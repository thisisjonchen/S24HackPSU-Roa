{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nclass BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n  async save(modelArtifacts) {\n    if (typeof document === 'undefined') {\n      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n    }\n    // TODO(mattsoulanille): Support saving models over 2GB that exceed\n    // Chrome's ArrayBuffer size limit.\n    const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n    const weightsURL = window.URL.createObjectURL(new Blob([weightBuffer], {\n      type: 'application/octet-stream'\n    }));\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const weightsManifest = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n      const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], {\n        type: 'application/json'\n      }));\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ? document.createElement('a') : this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n      };\n    }\n  }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nexport { BrowserDownloads };\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n  async load() {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n          return;\n        }\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n          return;\n        }\n        if (this.weightsFiles.length === 0) {\n          resolve({\n            modelTopology\n          });\n          return;\n        }\n        const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, weightsManifest => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n  loadWeights(weightsManifest) {\n    const weightSpecs = [];\n    const paths = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n    const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n    const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n    return Promise.all(promises).then(buffers => [weightSpecs, buffers]);\n  }\n  loadWeightsFile(path, file) {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const weightData = event.target.result;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  checkManifestAndWeightFiles(manifest) {\n    const basenames = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"names":["env","basename","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","IORouterRegistry","CompositeArrayBuffer","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","f","Promise","resolve","setTimeout","then","BrowserDownloads","constructor","fileNamePrefix","getBool","Error","startsWith","URL_SCHEME","slice","length","modelJsonFileName","weightDataFileName","save","modelArtifacts","document","weightBuffer","join","weightData","weightsURL","window","URL","createObjectURL","Blob","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelJSON","modelJsonURL","JSON","stringify","jsonAnchor","modelJsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","BrowserFiles","files","jsonFile","weightsFiles","load","reject","jsonReader","FileReader","onload","event","parse","target","result","name","modelArtifactsPromise","loadWeights","onerror","error","readAsText","entry","push","pathToFile","checkManifestAndWeightFiles","promises","map","path","loadWeightsFile","all","buffers","file","weightFileReader","readAsArrayBuffer","manifest","basenames","fileNames","group","forEach","pathBasename","indexOf","browserDownloadsRouter","url","Array","isArray","browserDownloads","registerSaveRouter","browserFiles"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/io/browser_files.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightData, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelJsonFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly modelJsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n\n    // TODO(mattsoulanille): Support saving models over 2GB that exceed\n    // Chrome's ArrayBuffer size limit.\n    const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [weightBuffer], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON: ModelJSON =\n          getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n      const modelJsonURL = window.URL.createObjectURL(\n          new Blob([JSON.stringify(modelJSON)], {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ?\n          document.createElement('a') :\n          this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly jsonFile: File;\n  private readonly weightsFiles: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({modelTopology});\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(\n            modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  private loadWeights(weightsManifest: WeightsManifestConfig): Promise<[\n    /* weightSpecs */ WeightsManifestEntry[], WeightData,\n  ]> {\n    const weightSpecs: WeightsManifestEntry[] = [];\n    const paths: string[] = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile: {[path: string]: File} =\n        this.checkManifestAndWeightFiles(weightsManifest);\n\n    const promises: Array<Promise<ArrayBuffer>> =\n        paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n\n    return Promise.all(promises).then(\n        buffers => [weightSpecs, buffers]);\n  }\n\n  private loadWeightsFile(path: string, file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const weightData = (event.target as any).result as ArrayBuffer;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error =>\n          reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(manifest: WeightsManifestConfig):\n      {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}