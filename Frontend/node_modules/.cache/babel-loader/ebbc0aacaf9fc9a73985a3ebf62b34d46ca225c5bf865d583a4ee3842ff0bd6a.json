{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Dataset } from '../dataset';\nimport { TextLineDataset } from './text_line_dataset';\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class CSVDataset extends Dataset {\n  /**\n   * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n   * false and `columnNames` is provided, `columnNames`. If\n   * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n   * all column names parsed from the csv file. For example usage please go to\n   * `tf.data.csv`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async columnNames() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;\n  }\n  /* 1) If `columnNames` is provided as string[], use this string[] as output\n   * keys in corresponding order. The length must match the number of inferred\n   * columns if `hasHeader` is true .\n   * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n   * hasHeader is true. If `hasHeader` is false, throw an error.\n   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n   * exist in parsed `columnNames`.\n   */\n  async setColumnNames() {\n    const columnNamesFromFile = await this.maybeReadHeaderLine();\n    if (!this.fullColumnNames && !columnNamesFromFile) {\n      // Throw an error if columnNames is not provided and no header line.\n      throw new Error('Column names must be provided if there is no header line.');\n    } else if (this.fullColumnNames && columnNamesFromFile) {\n      // Check provided columnNames match header line.\n      util.assert(columnNamesFromFile.length === this.fullColumnNames.length, () => 'The length of provided columnNames (' + this.fullColumnNames.length.toString() + ') does not match the length of the header line read from ' + 'file (' + columnNamesFromFile.length.toString() + ').');\n    }\n    if (!this.fullColumnNames) {\n      this.fullColumnNames = columnNamesFromFile;\n    }\n    // Check if there are duplicate column names.\n    const counts = this.fullColumnNames.reduce((countAcc, name) => {\n      countAcc[name] = countAcc[name] + 1 || 1;\n      return countAcc;\n    }, {});\n    const duplicateNames = Object.keys(counts).filter(name => counts[name] > 1);\n    util.assert(duplicateNames.length === 0, () => 'Duplicate column names found: ' + duplicateNames.toString());\n    // Check if keys in columnConfigs match columnNames.\n    if (this.columnConfigs) {\n      for (const key of Object.keys(this.columnConfigs)) {\n        const index = this.fullColumnNames.indexOf(key);\n        if (index === -1) {\n          throw new Error('The key \"' + key + '\" provided in columnConfigs does not match any of the column ' + 'names (' + this.fullColumnNames.toString() + ').');\n        }\n      }\n    }\n    this.columnNamesValidated = true;\n  }\n  async maybeReadHeaderLine() {\n    if (this.hasHeader) {\n      const iter = await this.base.iterator();\n      const firstElement = await iter.next();\n      if (firstElement.done) {\n        throw new Error('No data was found for CSV parsing.');\n      }\n      const firstLine = firstElement.value;\n      const headers = this.parseRow(firstLine, false);\n      return headers;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Create a `CSVDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   * @param csvConfig (Optional) A CSVConfig object that contains configurations\n   *     of reading and decoding from CSV file(s).\n   *\n   *     hasHeader: (Optional) A boolean value that indicates whether the first\n   *     row of provided CSV file is a header line with column names, and should\n   *     not be included in the data. Defaults to `true`.\n   *\n   *     columnNames: (Optional) A list of strings that corresponds to\n   *     the CSV column names, in order. If provided, it ignores the column\n   *     names inferred from the header row. If not provided, infers the column\n   *     names from the first row of the records. If hasHeader is false and\n   *     columnNames is not provided, this method throws an error.\n   *\n   *     columnConfigs: (Optional) A dictionary whose key is column names, value\n   *     is an object stating if this column is required, column's data type,\n   *     default value, and if this column is label. If provided, keys must\n   *     correspond to names provided in columnNames or inferred from the file\n   *     header lines. If isLabel is true any column, returns an array of two\n   *     items: the first item is a dict of features key/value pairs, the second\n   *     item is a dict of labels key/value pairs. If no feature is marked as\n   *     label, returns a dict of features only.\n   *\n   *     configuredColumnsOnly (Optional) If true, only columns provided in\n   *     columnConfigs will be parsed and provided during iteration.\n   *\n   *     delimiter (Optional) The string used to parse each line of the input\n   *     file. Defaults to `,`.\n   */\n  constructor(input, csvConfig) {\n    super();\n    this.input = input;\n    this.hasHeader = true;\n    this.fullColumnNames = null;\n    this.columnNamesValidated = false;\n    this.columnConfigs = null;\n    this.configuredColumnsOnly = false;\n    this.delimiter = ',';\n    this.delimWhitespace = false;\n    this.base = new TextLineDataset(input);\n    if (!csvConfig) {\n      csvConfig = {};\n    }\n    this.hasHeader = csvConfig.hasHeader === false ? false : true;\n    this.fullColumnNames = csvConfig.columnNames;\n    this.columnConfigs = csvConfig.columnConfigs;\n    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n    if (csvConfig.delimWhitespace) {\n      util.assert(csvConfig.delimiter == null, () => 'Delimiter should not be provided when delimWhitespace is true.');\n      this.delimWhitespace = true;\n      this.delimiter = ' ';\n    } else {\n      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n    }\n  }\n  async iterator() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    let lines = await this.base.iterator();\n    if (this.hasHeader) {\n      // We previously read the first line to get the columnNames.\n      // Now that we're providing data, skip it.\n      lines = lines.skip(1);\n    }\n    return lines.map(x => this.makeDataElement(x));\n  }\n  makeDataElement(line) {\n    const values = this.parseRow(line);\n    const features = {};\n    const labels = {};\n    for (let i = 0; i < this.fullColumnNames.length; i++) {\n      const key = this.fullColumnNames[i];\n      const config = this.columnConfigs ? this.columnConfigs[key] : null;\n      if (this.configuredColumnsOnly && !config) {\n        // This column is not selected.\n        continue;\n      } else {\n        const value = values[i];\n        let parsedValue = null;\n        if (value === '') {\n          // If default value is provided, use it. If default value is not\n          // provided, set as undefined.\n          if (config && config.default !== undefined) {\n            parsedValue = config.default;\n          } else if (config && (config.required || config.isLabel)) {\n            throw new Error(`Required column ${key} is empty in this line: ${line}`);\n          } else {\n            parsedValue = undefined;\n          }\n        } else {\n          // A value is present, so parse it based on type\n          const valueAsNum = Number(value);\n          if (isNaN(valueAsNum)) {\n            // The value is a string and this column is declared as boolean\n            // in config, parse it as boolean.\n            if (config && config.dtype === 'bool') {\n              parsedValue = this.getBoolean(value);\n            } else {\n              // Set value as string\n              parsedValue = value;\n            }\n          } else if (!config || !config.dtype) {\n            // If this value is a number and no type config is provided, return\n            // it as number.\n            parsedValue = valueAsNum;\n          } else {\n            // If this value is a number and data type is provided, parse it\n            // according to provided data type.\n            switch (config.dtype) {\n              case 'float32':\n                parsedValue = valueAsNum;\n                break;\n              case 'int32':\n                parsedValue = Math.floor(valueAsNum);\n                break;\n              case 'bool':\n                parsedValue = this.getBoolean(value);\n                break;\n              default:\n                parsedValue = valueAsNum;\n            }\n          }\n        }\n        // Check if this column is label.\n        config && config.isLabel ? labels[key] = parsedValue : features[key] = parsedValue;\n      }\n    }\n    // If label exists, return an object of features and labels as {xs:features,\n    // ys:labels}, otherwise return features only.\n    if (Object.keys(labels).length === 0) {\n      return features;\n    } else {\n      return {\n        xs: features,\n        ys: labels\n      };\n    }\n  }\n  getBoolean(value) {\n    if (value === '1' || value.toLowerCase() === 'true') {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n  parseRow(line, validateElementCount = true) {\n    const result = [];\n    let readOffset = 0;\n    const readLength = line.length;\n    let currentState = STATE_OUT;\n    // Goes through the line to parse quote.\n    for (let i = 0; i < readLength; i++) {\n      switch (currentState) {\n        // Before enter a new field\n        case STATE_OUT:\n          switch (line.charAt(i)) {\n            // Enter a quoted field\n            case CODE_QUOTE:\n              readOffset = i + 1;\n              currentState = STATE_QUOTE;\n              break;\n            // Read an empty field\n            case this.delimiter:\n              readOffset = i + 1;\n              // If delimiter is white space and configured to collapse\n              // multiple white spaces, ignore this white space.\n              if (this.delimiter === ' ' && this.delimWhitespace) {\n                break;\n              }\n              result.push('');\n              currentState = STATE_OUT;\n              break;\n            // Enter an unquoted field\n            default:\n              currentState = STATE_FIELD;\n              readOffset = i;\n              break;\n          }\n          break;\n        // In an unquoted field\n        case STATE_FIELD:\n          switch (line.charAt(i)) {\n            // Exit an unquoted field, add it to result\n            case this.delimiter:\n              result.push(line.substring(readOffset, i));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            default:\n          }\n          break;\n        // In a quoted field\n        case STATE_QUOTE:\n          switch (line.charAt(i)) {\n            // Read a quote after a quote\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE_AFTER_QUOTE;\n              break;\n            default:\n          }\n          break;\n        // This state means it's right after a second quote in a field\n        case STATE_QUOTE_AFTER_QUOTE:\n          switch (line.charAt(i)) {\n            // Finished a quoted field\n            case this.delimiter:\n              result.push(line.substring(readOffset, i - 1));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            // Finished a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            // In a quoted part in a quoted field\n            default:\n              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n              break;\n          }\n          break;\n        case STATE_WITHIN_QUOTE_IN_QUOTE:\n          switch (line.charAt(i)) {\n            // Exit a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            default:\n          }\n          break;\n        default:\n      }\n    }\n    // Adds last item based on if it is quoted.\n    if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n      result.push(line.substring(readOffset, readLength - 1));\n    } else {\n      result.push(line.substring(readOffset));\n    }\n    // Check if each row has the same number of elements as column names.\n    if (validateElementCount && result.length !== this.fullColumnNames.length) {\n      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);\n    }\n    return result;\n  }\n}\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()","map":{"version":3,"names":["util","Dataset","TextLineDataset","CODE_QUOTE","STATE_OUT","Symbol","STATE_FIELD","STATE_QUOTE","STATE_QUOTE_AFTER_QUOTE","STATE_WITHIN_QUOTE_IN_QUOTE","CSVDataset","columnNames","columnNamesValidated","setColumnNames","configuredColumnsOnly","Object","keys","columnConfigs","fullColumnNames","columnNamesFromFile","maybeReadHeaderLine","Error","assert","length","toString","counts","reduce","countAcc","name","duplicateNames","filter","key","index","indexOf","hasHeader","iter","base","iterator","firstElement","next","done","firstLine","value","headers","parseRow","constructor","input","csvConfig","delimiter","delimWhitespace","lines","skip","map","x","makeDataElement","line","values","features","labels","i","config","parsedValue","default","undefined","required","isLabel","valueAsNum","Number","isNaN","dtype","getBoolean","Math","floor","xs","ys","toLowerCase","validateElementCount","result","readOffset","readLength","currentState","charAt","push","substring"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-data/src/datasets/csv_dataset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer, util} from '@tensorflow/tfjs-core';\nimport {Dataset} from '../dataset';\nimport {DataSource} from '../datasource';\nimport {LazyIterator} from '../iterators/lazy_iterator';\nimport {ColumnConfig, CSVConfig} from '../types';\nimport {TextLineDataset} from './text_line_dataset';\n\nconst CODE_QUOTE = '\"';\nconst STATE_OUT = Symbol('out');\nconst STATE_FIELD = Symbol('field');\nconst STATE_QUOTE = Symbol('quote');\nconst STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');\nconst STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');\n\n/**\n * Represents a potentially large collection of delimited text records.\n *\n * The produced `TensorContainer`s each contain one key-value pair for\n * every column of the table.  When a field is empty in the incoming data, the\n * resulting value is `undefined`, or throw error if it is required.  Values\n * that can be parsed as numbers are emitted as type `number`, other values\n * are parsed as `string`.\n *\n * The results are not batched.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport class CSVDataset extends Dataset<TensorContainer> {\n  base: TextLineDataset;\n  private hasHeader = true;\n  private fullColumnNames: string[] = null;\n  private columnNamesValidated = false;\n  private columnConfigs: {[key: string]: ColumnConfig} = null;\n  private configuredColumnsOnly = false;\n  private delimiter = ',';\n  private delimWhitespace = false;\n\n  /**\n   * Returns column names of the csv dataset. If `configuredColumnsOnly` is\n   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is\n   * false and `columnNames` is provided, `columnNames`. If\n   * `configuredColumnsOnly` is false and `columnNames` is not provided, return\n   * all column names parsed from the csv file. For example usage please go to\n   * `tf.data.csv`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async columnNames() {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    return this.configuredColumnsOnly ? Object.keys(this.columnConfigs) :\n                                        this.fullColumnNames;\n  }\n\n  /* 1) If `columnNames` is provided as string[], use this string[] as output\n   * keys in corresponding order. The length must match the number of inferred\n   * columns if `hasHeader` is true .\n   * 2) If `columnNames` is not provided, parse header line as `columnNames` if\n   * hasHeader is true. If `hasHeader` is false, throw an error.\n   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must\n   * exist in parsed `columnNames`.\n   */\n  private async setColumnNames() {\n    const columnNamesFromFile = await this.maybeReadHeaderLine();\n    if (!this.fullColumnNames && !columnNamesFromFile) {\n      // Throw an error if columnNames is not provided and no header line.\n      throw new Error(\n          'Column names must be provided if there is no header line.');\n    } else if (this.fullColumnNames && columnNamesFromFile) {\n      // Check provided columnNames match header line.\n      util.assert(\n          columnNamesFromFile.length === this.fullColumnNames.length,\n          () => 'The length of provided columnNames (' +\n              this.fullColumnNames.length.toString() +\n              ') does not match the length of the header line read from ' +\n              'file (' + columnNamesFromFile.length.toString() + ').');\n    }\n    if (!this.fullColumnNames) {\n      this.fullColumnNames = columnNamesFromFile;\n    }\n    // Check if there are duplicate column names.\n    const counts: {[key: string]: number} = this.fullColumnNames.reduce(\n        (countAcc: {[key: string]: number}, name) => {\n          countAcc[name] = (countAcc[name] + 1) || 1;\n          return countAcc;\n        },\n        {});\n    const duplicateNames =\n        Object.keys(counts).filter((name) => (counts[name] > 1));\n    util.assert(\n        duplicateNames.length === 0,\n        () => 'Duplicate column names found: ' + duplicateNames.toString());\n    // Check if keys in columnConfigs match columnNames.\n    if (this.columnConfigs) {\n      for (const key of Object.keys(this.columnConfigs)) {\n        const index = this.fullColumnNames.indexOf(key);\n        if (index === -1) {\n          throw new Error(\n              'The key \"' + key +\n              '\" provided in columnConfigs does not match any of the column ' +\n              'names (' + this.fullColumnNames.toString() + ').');\n        }\n      }\n    }\n    this.columnNamesValidated = true;\n  }\n\n  private async maybeReadHeaderLine() {\n    if (this.hasHeader) {\n      const iter = await this.base.iterator();\n      const firstElement = await iter.next();\n      if (firstElement.done) {\n        throw new Error('No data was found for CSV parsing.');\n      }\n      const firstLine: string = firstElement.value;\n      const headers = this.parseRow(firstLine, false);\n      return headers;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Create a `CSVDataset`.\n   *\n   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.\n   * @param csvConfig (Optional) A CSVConfig object that contains configurations\n   *     of reading and decoding from CSV file(s).\n   *\n   *     hasHeader: (Optional) A boolean value that indicates whether the first\n   *     row of provided CSV file is a header line with column names, and should\n   *     not be included in the data. Defaults to `true`.\n   *\n   *     columnNames: (Optional) A list of strings that corresponds to\n   *     the CSV column names, in order. If provided, it ignores the column\n   *     names inferred from the header row. If not provided, infers the column\n   *     names from the first row of the records. If hasHeader is false and\n   *     columnNames is not provided, this method throws an error.\n   *\n   *     columnConfigs: (Optional) A dictionary whose key is column names, value\n   *     is an object stating if this column is required, column's data type,\n   *     default value, and if this column is label. If provided, keys must\n   *     correspond to names provided in columnNames or inferred from the file\n   *     header lines. If isLabel is true any column, returns an array of two\n   *     items: the first item is a dict of features key/value pairs, the second\n   *     item is a dict of labels key/value pairs. If no feature is marked as\n   *     label, returns a dict of features only.\n   *\n   *     configuredColumnsOnly (Optional) If true, only columns provided in\n   *     columnConfigs will be parsed and provided during iteration.\n   *\n   *     delimiter (Optional) The string used to parse each line of the input\n   *     file. Defaults to `,`.\n   */\n  constructor(protected readonly input: DataSource, csvConfig?: CSVConfig) {\n    super();\n    this.base = new TextLineDataset(input);\n    if (!csvConfig) {\n      csvConfig = {};\n    }\n    this.hasHeader = csvConfig.hasHeader === false ? false : true;\n    this.fullColumnNames = csvConfig.columnNames;\n    this.columnConfigs = csvConfig.columnConfigs;\n    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;\n    if (csvConfig.delimWhitespace) {\n      util.assert(\n          csvConfig.delimiter == null,\n          () =>\n              'Delimiter should not be provided when delimWhitespace is true.');\n      this.delimWhitespace = true;\n      this.delimiter = ' ';\n    } else {\n      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';\n    }\n  }\n\n  async iterator(): Promise<LazyIterator<TensorContainer>> {\n    if (!this.columnNamesValidated) {\n      await this.setColumnNames();\n    }\n    let lines = await this.base.iterator();\n    if (this.hasHeader) {\n      // We previously read the first line to get the columnNames.\n      // Now that we're providing data, skip it.\n      lines = lines.skip(1);\n    }\n    return lines.map(x => this.makeDataElement(x));\n  }\n\n  makeDataElement(line: string): TensorContainer {\n    const values = this.parseRow(line);\n    const features: {[key: string]: TensorContainer} = {};\n    const labels: {[key: string]: TensorContainer} = {};\n\n    for (let i = 0; i < this.fullColumnNames.length; i++) {\n      const key = this.fullColumnNames[i];\n      const config = this.columnConfigs ? this.columnConfigs[key] : null;\n      if (this.configuredColumnsOnly && !config) {\n        // This column is not selected.\n        continue;\n      } else {\n        const value = values[i];\n        let parsedValue = null;\n        if (value === '') {\n          // If default value is provided, use it. If default value is not\n          // provided, set as undefined.\n          if (config && config.default !== undefined) {\n            parsedValue = config.default;\n          } else if (config && (config.required || config.isLabel)) {\n            throw new Error(\n                `Required column ${key} is empty in this line: ${line}`);\n          } else {\n            parsedValue = undefined;\n          }\n        } else {\n          // A value is present, so parse it based on type\n          const valueAsNum = Number(value);\n          if (isNaN(valueAsNum)) {\n            // The value is a string and this column is declared as boolean\n            // in config, parse it as boolean.\n            if (config && config.dtype === 'bool') {\n              parsedValue = this.getBoolean(value);\n            } else {\n              // Set value as string\n              parsedValue = value;\n            }\n          } else if (!config || !config.dtype) {\n            // If this value is a number and no type config is provided, return\n            // it as number.\n            parsedValue = valueAsNum;\n          } else {\n            // If this value is a number and data type is provided, parse it\n            // according to provided data type.\n            switch (config.dtype) {\n              case 'float32':\n                parsedValue = valueAsNum;\n                break;\n              case 'int32':\n                parsedValue = Math.floor(valueAsNum);\n                break;\n              case 'bool':\n                parsedValue = this.getBoolean(value);\n                break;\n              default:\n                parsedValue = valueAsNum;\n            }\n          }\n        }\n        // Check if this column is label.\n        (config && config.isLabel) ? labels[key] = parsedValue :\n                                     features[key] = parsedValue;\n      }\n    }\n    // If label exists, return an object of features and labels as {xs:features,\n    // ys:labels}, otherwise return features only.\n    if (Object.keys(labels).length === 0) {\n      return features;\n\n    } else {\n      return {xs: features, ys: labels};\n    }\n  }\n\n  private getBoolean(value: string): number {\n    if (value === '1' || value.toLowerCase() === 'true') {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  // adapted from https://beta.observablehq.com/@mbostock/streaming-csv\n  private parseRow(line: string, validateElementCount = true): string[] {\n    const result: string[] = [];\n    let readOffset = 0;\n    const readLength = line.length;\n    let currentState = STATE_OUT;\n    // Goes through the line to parse quote.\n    for (let i = 0; i < readLength; i++) {\n      switch (currentState) {\n        // Before enter a new field\n        case STATE_OUT:\n          switch (line.charAt(i)) {\n            // Enter a quoted field\n            case CODE_QUOTE:\n              readOffset = i + 1;\n              currentState = STATE_QUOTE;\n              break;\n            // Read an empty field\n            case this.delimiter:\n              readOffset = i + 1;\n              // If delimiter is white space and configured to collapse\n              // multiple white spaces, ignore this white space.\n              if (this.delimiter === ' ' && this.delimWhitespace) {\n                break;\n              }\n              result.push('');\n              currentState = STATE_OUT;\n              break;\n            // Enter an unquoted field\n            default:\n              currentState = STATE_FIELD;\n              readOffset = i;\n              break;\n          }\n          break;\n        // In an unquoted field\n        case STATE_FIELD:\n          switch (line.charAt(i)) {\n            // Exit an unquoted field, add it to result\n            case this.delimiter:\n              result.push(line.substring(readOffset, i));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            default:\n          }\n          break;\n        // In a quoted field\n        case STATE_QUOTE:\n          switch (line.charAt(i)) {\n            // Read a quote after a quote\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE_AFTER_QUOTE;\n              break;\n            default:\n          }\n          break;\n        // This state means it's right after a second quote in a field\n        case STATE_QUOTE_AFTER_QUOTE:\n          switch (line.charAt(i)) {\n            // Finished a quoted field\n            case this.delimiter:\n              result.push(line.substring(readOffset, i - 1));\n              currentState = STATE_OUT;\n              readOffset = i + 1;\n              break;\n            // Finished a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            // In a quoted part in a quoted field\n            default:\n              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;\n              break;\n          }\n          break;\n        case STATE_WITHIN_QUOTE_IN_QUOTE:\n          switch (line.charAt(i)) {\n            // Exit a quoted part in a quoted field\n            case CODE_QUOTE:\n              currentState = STATE_QUOTE;\n              break;\n            default:\n          }\n          break;\n        default:\n      }\n    }\n    // Adds last item based on if it is quoted.\n    if (currentState === STATE_QUOTE_AFTER_QUOTE) {\n      result.push(line.substring(readOffset, readLength - 1));\n    } else {\n      result.push(line.substring(readOffset));\n    }\n    // Check if each row has the same number of elements as column names.\n    if (validateElementCount && result.length !== this.fullColumnNames.length) {\n      throw new Error(`Invalid row in csv file. Should have ${\n          this.fullColumnNames.length} elements in a row, but got ${result}`);\n    }\n    return result;\n  }\n}\n\n// TODO(soergel): add more basic datasets for parity with tf.data\n// tf.data.FixedLengthRecordDataset()\n// tf.data.TFRecordDataset()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}