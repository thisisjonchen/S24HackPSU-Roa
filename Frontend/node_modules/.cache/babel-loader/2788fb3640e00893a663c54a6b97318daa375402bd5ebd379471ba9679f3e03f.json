{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n  const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) || value > max) {\n        // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}","map":{"version":3,"names":["util","maxImpl","aVals","reduceSize","outShape","dtype","vals","getTypedArrayFromDType","sizeFromShape","i","length","offset","max","j","value","Number","isNaN"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Max_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA+CA,IAAI,QAAO,uBAAuB;AAEjF,OAAM,SAAUC,OAAOA,CACnBC,KAAiB,EAAEC,UAAkB,EAAEC,QAAkB,EACzDC,KAAe;EACjB,MAAMC,IAAI,GAAGN,IAAI,CAACO,sBAAsB,CACpCF,KAAwB,EAAEL,IAAI,CAACQ,aAAa,CAACJ,QAAQ,CAAC,CAAC;EAE3D,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;IACpC,MAAME,MAAM,GAAGF,CAAC,GAAGN,UAAU;IAC7B,IAAIS,GAAG,GAAGV,KAAK,CAACS,MAAM,CAAC;IACvB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,UAAU,EAAE,EAAEU,CAAC,EAAE;MACnC,MAAMC,KAAK,GAAGZ,KAAK,CAACS,MAAM,GAAGE,CAAC,CAAC;MAC/B,IAAIE,MAAM,CAACC,KAAK,CAACF,KAAK,CAAC,IACnBA,KAAK,GAAGF,GAAG,EAAE;QAAG;QAClBA,GAAG,GAAGE,KAAK;;;IAGfR,IAAI,CAACG,CAAC,CAAC,GAAGG,GAAG;;EAEf,OAAON,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}