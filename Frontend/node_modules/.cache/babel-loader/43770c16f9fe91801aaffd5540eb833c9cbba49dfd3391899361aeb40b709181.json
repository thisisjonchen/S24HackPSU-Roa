{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\nexport function fullDefinedShape(elementShape) {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n  }\n  const result = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}","map":{"version":3,"names":["util","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","length","i","dim0","dim1","fullDefinedShape","elementShape","some","dim","inferElementShape","listElementShape","tensors","partialShape","mergeElementShape","notfullDefinedShape","Error","forEach","tensor","shape","elementShapeA","elementShapeB","result"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-converter/src/executor/tensor_utils.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n"],"mappings":"AACA;;;;;;;;;;;;;;;;AAgBA;;;;;AAMA,SAAgBA,IAAI,QAAO,uBAAuB;AAElD;;;;;;;AAOA,OAAM,SAAUC,mCAAmCA,CAC/CC,MAAuB,EAAEC,MAAuB,EAChDC,kBAAkB,GAAG,EAAE;EACzB;EACA,IAAI,OAAOF,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;IAC5D;;EAEFH,IAAI,CAACK,MAAM,CACPH,MAAM,CAACI,MAAM,KAAKH,MAAM,CAACG,MAAM,EAC/B,MAAMF,kBAAkB,GAAG,WAAWF,MAAM,QAAQC,MAAM,aAAa,CAAC;EAC5E,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtC,MAAMC,IAAI,GAAGN,MAAM,CAACK,CAAC,CAAC;IACtB,MAAME,IAAI,GAAGN,MAAM,CAACI,CAAC,CAAC;IACtBP,IAAI,CAACK,MAAM,CACPG,IAAI,GAAG,CAAC,IAAIC,IAAI,GAAG,CAAC,IAAID,IAAI,KAAKC,IAAI,EACrC,MACIL,kBAAkB,GAAG,WAAWF,MAAM,QAAQC,MAAM,aAAa,CAAC;;AAE9E;AAEA,OAAM,SAAUO,gBAAgBA,CAACC,YAA6B;EAC5D,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAIA,YAAY,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,GAAG,CAAC,CAAC,EAAE;IACzE,OAAO,KAAK;;EAEd,OAAO,IAAI;AACb;AACA;;;;;;;AAOA,OAAM,SAAUC,iBAAiBA,CAC7BC,gBAAiC,EAAEC,OAAiB,EACpDL,YAA6B;EAC/B,IAAIM,YAAY,GAAGC,iBAAiB,CAACH,gBAAgB,EAAEJ,YAAY,CAAC;EACpE,MAAMQ,mBAAmB,GAAG,CAACT,gBAAgB,CAACO,YAAY,CAAC;EAC3D,IAAIE,mBAAmB,IAAIH,OAAO,CAACV,MAAM,KAAK,CAAC,EAAE;IAC/C,MAAM,IAAIc,KAAK,CACX,8CAA8C,GAC9C,yCAAyCH,YAAY,EAAE,CAAC;;EAE9D,IAAIE,mBAAmB,EAAE;IACvBH,OAAO,CAACK,OAAO,CAACC,MAAM,IAAG;MACvBL,YAAY,GAAGC,iBAAiB,CAACI,MAAM,CAACC,KAAK,EAAEN,YAAY,CAAC;IAC9D,CAAC,CAAC;;EAEJ,IAAI,CAACP,gBAAgB,CAACO,YAAY,CAAC,EAAE;IACnC,MAAM,IAAIG,KAAK,CAAC,mCAAmCH,YAAY,EAAE,CAAC;;EAEpE,OAAOA,YAAwB;AACjC;AAEA,OAAM,SAAUC,iBAAiBA,CAC7BM,aAA8B,EAAEC,aAA8B;EAEhE,IAAI,OAAOD,aAAa,KAAK,QAAQ,EAAE;IACrC,OAAOC,aAAa;;EAEtB,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACrC,OAAOD,aAAa;;EAGtB,IAAIA,aAAa,CAAClB,MAAM,KAAKmB,aAAa,CAACnB,MAAM,EAAE;IACjD,MAAM,IAAIc,KAAK,CAAC,oCAAoCI,aAAa,QAC7DC,aAAa,EAAE,CAAC;;EAGtB,MAAMC,MAAM,GAAa,EAAE;EAC3B,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,aAAa,CAAClB,MAAM,EAAE,EAAEC,CAAC,EAAE;IAC7C,MAAMC,IAAI,GAAGgB,aAAa,CAACjB,CAAC,CAAC;IAC7B,MAAME,IAAI,GAAGgB,aAAa,CAAClB,CAAC,CAAC;IAC7B,IAAIC,IAAI,IAAI,CAAC,IAAIC,IAAI,IAAI,CAAC,IAAID,IAAI,KAAKC,IAAI,EAAE;MAC3C,MAAM,IAAIW,KAAK,CAAC,oCAAoCI,aAAa,QAC7DC,aAAa,EAAE,CAAC;;IAEtBC,MAAM,CAACnB,CAAC,CAAC,GAAGC,IAAI,IAAI,CAAC,GAAGA,IAAI,GAAGC,IAAI;;EAErC,OAAOiB,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}