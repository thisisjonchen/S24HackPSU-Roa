{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../../gradients';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { expandShapeToKeepDim } from '../axis_util';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { exp } from '../exp';\nimport { logSumExp } from '../log_sum_exp';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n  if (dim !== logits.rank - 1) {\n    throw Error(`Softmax cross entropy along a non-last dimension is not yet ` + `supported. Labels / logits was rank ${logits.rank} ` + `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp = customGrad((labels, logits, save) => {\n    // Reference:\n    //   1. http://cs231n.github.io/linear-classify/#softmax\n    //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n    const keepDims = true;\n    const lse = logSumExp(logits, [dim], keepDims);\n    const logResult = sub(cast(logits, 'float32'), lse);\n    save([labels, logResult]);\n    const costVector = neg(mul(logResult, labels));\n    const value = sum(costVector, [dim]);\n    const gradFunc = (dy, saved) => {\n      const [labels, logResult] = saved;\n      const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n      return [mul(reshape(dy, dyShape), sub(cast(labels, 'float32'), exp(logResult))), mul(reshape(dy, dyShape), sub(exp(logResult), cast(labels, 'float32')))];\n    };\n    return {\n      value,\n      gradFunc\n    };\n  });\n  return customOp(labels, logits);\n}\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  let $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n  assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n    $onehotLabels = add(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));\n  }\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const softmaxCrossEntropy = /* @__PURE__ */op({\n  softmaxCrossEntropy_\n});","map":{"version":3,"names":["customGrad","convertToTensor","assertShapesMatch","add","expandShapeToKeepDim","cast","div","exp","logSumExp","Reduction","mul","neg","op","reshape","scalar","sub","sum","computeWeightedLoss","softmaxCrossEntropyWithLogits_","labels","logits","dim","rank","Error","customOp","save","keepDims","lse","logResult","costVector","value","gradFunc","dy","saved","dyShape","shape","softmaxCrossEntropy_","onehotLabels","weights","labelSmoothing","reduction","SUM_BY_NONZERO_WEIGHTS","$onehotLabels","$logits","$weights","labelSmoothingScalar","one","numClasses","losses","softmaxCrossEntropy"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/losses/softmax_cross_entropy.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {customGrad} from '../../gradients';\nimport {Tensor} from '../../tensor';\nimport {GradSaveFunc} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {add} from '../add';\nimport {expandShapeToKeepDim} from '../axis_util';\nimport {cast} from '../cast';\nimport {div} from '../div';\nimport {exp} from '../exp';\nimport {logSumExp} from '../log_sum_exp';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T, logits: T, dim = -1): O {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n\n  if (dim !== logits.rank - 1) {\n    throw Error(\n        `Softmax cross entropy along a non-last dimension is not yet ` +\n        `supported. Labels / logits was rank ${logits.rank} ` +\n        `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp =\n      customGrad((labels: Tensor, logits: Tensor, save: GradSaveFunc) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logSumExp(logits, [dim], keepDims);\n        const logResult = sub(cast(logits, 'float32'), lse);\n        save([labels, logResult]);\n\n        const costVector = neg(mul(logResult, labels));\n        const value: O = sum(costVector, [dim]);\n\n        const gradFunc = (dy: O, saved: Tensor[]) => {\n          const [labels, logResult] = saved;\n          const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n          return [\n            mul(reshape(dy, dyShape),\n                sub(cast(labels, 'float32'), exp(logResult))),\n            mul(reshape(dy, dyShape),\n                sub(exp(logResult), cast(labels, 'float32'))),\n          ];\n        };\n        return {value, gradFunc};\n      });\n\n  return customOp(labels, logits);\n}\n\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_<T extends Tensor, O extends Tensor>(\n    onehotLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $onehotLabels =\n      convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights: Tensor = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n\n  assertShapesMatch(\n      $onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n\n    $onehotLabels =\n        add(mul($onehotLabels, sub(one, labelSmoothingScalar)),\n            div(labelSmoothingScalar, numClasses));\n  }\n\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const softmaxCrossEntropy = /* @__PURE__ */ op({softmaxCrossEntropy_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,UAAU,QAAO,iBAAiB;AAG1C,SAAQC,eAAe,QAAO,uBAAuB;AAErD,SAAQC,iBAAiB,QAAO,YAAY;AAC5C,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,oBAAoB,QAAO,cAAc;AACjD,SAAQC,IAAI,QAAO,SAAS;AAC5B,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,SAAS,QAAO,gBAAgB;AACxC,SAAQC,SAAS,QAAO,mBAAmB;AAC3C,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,EAAE,QAAO,cAAc;AAC/B,SAAQC,OAAO,QAAO,YAAY;AAClC,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,GAAG,QAAO,QAAQ;AAE1B,SAAQC,mBAAmB,QAAO,yBAAyB;AAE3D;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,8BAA8BA,CACnCC,MAAS,EAAEC,MAAS,EAAEC,GAAG,GAAG,CAAC,CAAC;EAChC,IAAIA,GAAG,KAAK,CAAC,CAAC,EAAE;IACdA,GAAG,GAAGD,MAAM,CAACE,IAAI,GAAG,CAAC;;EAGvB,IAAID,GAAG,KAAKD,MAAM,CAACE,IAAI,GAAG,CAAC,EAAE;IAC3B,MAAMC,KAAK,CACP,8DAA8D,GAC9D,uCAAuCH,MAAM,CAACE,IAAI,GAAG,GACrD,eAAeD,GAAG,EAAE,CAAC;;EAE3B;EACA,MAAMG,QAAQ,GACVxB,UAAU,CAAC,CAACmB,MAAc,EAAEC,MAAc,EAAEK,IAAkB,KAAI;IAChE;IACA;IACA;IACA,MAAMC,QAAQ,GAAG,IAAI;IACrB,MAAMC,GAAG,GAAGnB,SAAS,CAACY,MAAM,EAAE,CAACC,GAAG,CAAC,EAAEK,QAAQ,CAAC;IAC9C,MAAME,SAAS,GAAGb,GAAG,CAACV,IAAI,CAACe,MAAM,EAAE,SAAS,CAAC,EAAEO,GAAG,CAAC;IACnDF,IAAI,CAAC,CAACN,MAAM,EAAES,SAAS,CAAC,CAAC;IAEzB,MAAMC,UAAU,GAAGlB,GAAG,CAACD,GAAG,CAACkB,SAAS,EAAET,MAAM,CAAC,CAAC;IAC9C,MAAMW,KAAK,GAAMd,GAAG,CAACa,UAAU,EAAE,CAACR,GAAG,CAAC,CAAC;IAEvC,MAAMU,QAAQ,GAAGA,CAACC,EAAK,EAAEC,KAAe,KAAI;MAC1C,MAAM,CAACd,MAAM,EAAES,SAAS,CAAC,GAAGK,KAAK;MACjC,MAAMC,OAAO,GAAG9B,oBAAoB,CAAC4B,EAAE,CAACG,KAAK,EAAE,CAACd,GAAG,CAAC,CAAC;MACrD,OAAO,CACLX,GAAG,CAACG,OAAO,CAACmB,EAAE,EAAEE,OAAO,CAAC,EACpBnB,GAAG,CAACV,IAAI,CAACc,MAAM,EAAE,SAAS,CAAC,EAAEZ,GAAG,CAACqB,SAAS,CAAC,CAAC,CAAC,EACjDlB,GAAG,CAACG,OAAO,CAACmB,EAAE,EAAEE,OAAO,CAAC,EACpBnB,GAAG,CAACR,GAAG,CAACqB,SAAS,CAAC,EAAEvB,IAAI,CAACc,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAClD;IACH,CAAC;IACD,OAAO;MAACW,KAAK;MAAEC;IAAQ,CAAC;EAC1B,CAAC,CAAC;EAEN,OAAOP,QAAQ,CAACL,MAAM,EAAEC,MAAM,CAAC;AACjC;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASgB,oBAAoBA,CACzBC,YAA0B,EAAEjB,MAAoB,EAChDkB,OAA2B,EAAEC,cAAc,GAAG,CAAC,EAC/CC,SAAS,GAAG/B,SAAS,CAACgC,sBAAsB;EAC9C,IAAIC,aAAa,GACbzC,eAAe,CAACoC,YAAY,EAAE,cAAc,EAAE,qBAAqB,CAAC;EACxE,MAAMM,OAAO,GAAG1C,eAAe,CAACmB,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAC;EACxE,IAAIwB,QAAQ,GAAW,IAAI;EAE3B,IAAIN,OAAO,IAAI,IAAI,EAAE;IACnBM,QAAQ,GAAG3C,eAAe,CAACqC,OAAO,EAAE,SAAS,EAAE,qBAAqB,CAAC;;EAGvEpC,iBAAiB,CACbwC,aAAa,CAACP,KAAK,EAAEQ,OAAO,CAACR,KAAK,EAAE,gCAAgC,CAAC;EAEzE,IAAII,cAAc,GAAG,CAAC,EAAE;IACtB,MAAMM,oBAAoB,GAAG/B,MAAM,CAACyB,cAAc,CAAC;IACnD,MAAMO,GAAG,GAAGhC,MAAM,CAAC,CAAC,CAAC;IACrB,MAAMiC,UAAU,GAAGjC,MAAM,CAAC4B,aAAa,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjDO,aAAa,GACTvC,GAAG,CAACO,GAAG,CAACgC,aAAa,EAAE3B,GAAG,CAAC+B,GAAG,EAAED,oBAAoB,CAAC,CAAC,EAClDvC,GAAG,CAACuC,oBAAoB,EAAEE,UAAU,CAAC,CAAC;;EAGhD,MAAMC,MAAM,GAAG9B,8BAA8B,CAACwB,aAAa,EAAEC,OAAO,CAAC;EAErE,OAAO1B,mBAAmB,CAAC+B,MAAM,EAAEJ,QAAQ,EAAEJ,SAAS,CAAC;AACzD;AAEA,OAAO,MAAMS,mBAAmB,GAAG,eAAgBrC,EAAE,CAAC;EAACwB;AAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}