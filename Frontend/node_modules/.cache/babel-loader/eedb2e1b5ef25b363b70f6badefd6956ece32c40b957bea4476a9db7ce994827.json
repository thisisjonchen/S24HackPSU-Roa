{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input, mapFn) {\n  return deepMapInternal(input, mapFn);\n}\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n  if (input == null) {\n    return null;\n  }\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep map function may not return both a value and recurse=true.');\n  }\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(inputs, zipFn = zipToList) {\n  return deepZipInternal(inputs, zipFn);\n}\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep zip function may not return both a value and recurse=true.');\n  }\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n// tslint:disable-next-line:no-any\nexport function zipToList(x) {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n  if (isIterable(x[0])) {\n    return {\n      value: null,\n      recurse: true\n    };\n  } else {\n    return {\n      value: x,\n      recurse: false\n    };\n  }\n}\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(input, mapFn) {\n  const seen = new Map();\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj) {\n  let isTextDecoder = false;\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {\n      StringDecoder\n    } = require('string_decoder');\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === 'object' && !(obj instanceof tf.Tensor) && !(obj instanceof Promise) && !isTextDecoder);\n}\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj) {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === 'object' && obj instanceof tf.Tensor || tf.util.isTypedArray(obj);\n}\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object' && typeof value !== 'function';\n}","map":{"version":3,"names":["tf","deepMap","input","mapFn","deepMapInternal","seen","Map","containedIn","Set","Blob","slice","has","Error","get","result","recurse","value","set","isIterable","mappedIterable","Array","isArray","add","k","child","childResult","delete","__proto__","deepZip","inputs","zipFn","zipToList","deepZipInternal","children","map","x","deepMapAndAwaitAll","key","from","keys","util","isPromise","mappedValue","obj","isTextDecoder","env","TextDecoder","StringDecoder","require","ArrayBuffer","isView","Tensor","Promise","canTensorify","isPrimitive","isTypedArray"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-data/src/util/deep_map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n// tslint:disable:no-any\n\n/**\n * A return value for a mapping function that can be applied via deepMap.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapResult = {\n  value: any,\n  recurse: boolean\n};\n\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input: any, mapFn: (x: any) => DeepMapResult): any|\n    any[] {\n  return deepMapInternal(input, mapFn);\n}\n\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(\n    input: any, mapFn: (x: any) => DeepMapResult,\n    seen: Map<any, any> = new Map(), containedIn: Set<{}> = new Set()): any|\n    any[] {\n  if (input == null) {\n    return null;\n  }\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult = zipToList): any|any[] {\n  return deepZipInternal(inputs, zipFn);\n}\n\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult,\n    containedIn: Set<{}> = new Set()): any|any[] {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function zipToList(x: any[]): DeepMapResult {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n\n  if (isIterable(x[0])) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: x, recurse: false};\n  }\n}\n\n/**\n * A return value for an async map function for use with deepMapAndAwaitAll.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapAsyncResult = {\n  value: Promise<any>,\n  recurse: boolean\n};\n\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(\n    input: any, mapFn: (x: any) => DeepMapAsyncResult): Promise<any|any[]> {\n  const seen: Map<any, any> = new Map();\n\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj: any): boolean {\n  let isTextDecoder = false;\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {StringDecoder} = require('string_decoder');\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n  return obj != null && (!ArrayBuffer.isView(obj)) &&\n      (Array.isArray(obj) ||\n       (typeof obj === 'object' && !(obj instanceof tf.Tensor) &&\n        !(obj instanceof Promise) && !isTextDecoder));\n}\n\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj: any): boolean {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n      (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n      tf.util.isTypedArray(obj);\n}\n\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value: any): boolean {\n  return (\n      value === null ||\n      (typeof value !== 'object' && typeof value !== 'function'));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}