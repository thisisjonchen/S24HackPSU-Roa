{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId);\n    const weightsVals = backend.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount\n};","map":{"version":3,"names":["DenseBincount","bincountImplCPU","bincountReduceImplCPU","denseBincount","args","inputs","backend","attrs","x","weights","size","binaryOutput","shape","length","xVals","readSync","dataId","weightsVals","outVals","dtype","makeTensorInfo","xBuf","bufferSync","weightsBuf","outBuf","values","Error","denseBincountConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/DenseBincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAa,QAAwG,uBAAuB;AAGpJ,SAAQC,eAAe,EAAEC,qBAAqB,QAAO,wBAAwB;AAE7E,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAO,CAAC,GAAGJ,MAAM;EAC3B,MAAM;IAACK,IAAI;IAAEC;EAAY,CAAC,GAAGJ,KAAK;EAElC,IAAIC,CAAC,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,MAAMC,KAAK,GAAGR,OAAO,CAACS,QAAQ,CAACP,CAAC,CAACQ,MAAM,CAAe;IACtD,MAAMC,WAAW,GAAGX,OAAO,CAACS,QAAQ,CAACN,OAAO,CAACO,MAAM,CAAe;IAElE,MAAME,OAAO,GACTjB,eAAe,CAACa,KAAK,EAAEG,WAAW,EAAER,OAAO,CAACU,KAAK,EAAEV,OAAO,CAACG,KAAK,EAAEF,IAAI,CAAC;IAE3E,OAAOJ,OAAO,CAACc,cAAc,CAAC,CAACV,IAAI,CAAC,EAAED,OAAO,CAACU,KAAK,EAAED,OAAO,CAAC;GAC9D,MAAM,IAAIV,CAAC,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAMQ,IAAI,GAAGf,OAAO,CAACgB,UAAU,CAAkBd,CAAC,CAAC;IACnD,MAAMe,UAAU,GAAGjB,OAAO,CAACgB,UAAU,CAAkBb,OAAO,CAAC;IAE/D,MAAMe,MAAM,GAAGtB,qBAAqB,CAACmB,IAAI,EAAEE,UAAU,EAAEb,IAAI,EAAEC,YAAY,CAAC;IAE1E,OAAOL,OAAO,CAACc,cAAc,CAACI,MAAM,CAACZ,KAAK,EAAEH,OAAO,CAACU,KAAK,EAAEK,MAAM,CAACC,MAAM,CAAC;;EAG3E,MAAM,IAAIC,KAAK,CACX,oEAAoE,GACpE,GAAGlB,CAAC,CAACI,KAAK,CAACC,MAAM,GAAG,CAAC;AAC3B;AAEA,OAAO,MAAMc,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE5B,aAAa;EACzB6B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}