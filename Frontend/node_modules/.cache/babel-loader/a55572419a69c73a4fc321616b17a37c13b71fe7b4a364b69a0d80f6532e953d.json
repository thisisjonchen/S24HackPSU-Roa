{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const {\n    cropSize,\n    method,\n    extrapolationValue\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n  const boxVals = backend.data.get(boxes.dataId).values;\n  const boxIndVals = backend.data.get(boxInd.dataId).values;\n  const imageVals = backend.data.get(image.dataId).values;\n  const inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n  const outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n    const bInd = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n    const heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            const topLeft = imageVals[ind];\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];\n            const topRight = imageVals[ind];\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + (bottom - top) * yLerp;\n          }\n        }\n      } else {\n        // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];\n            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize\n};","map":{"version":3,"names":["buffer","CropAndResize","util","cropAndResize","args","inputs","backend","attrs","image","boxes","boxInd","cropSize","method","extrapolationValue","batch","imageHeight","imageWidth","numChannels","shape","numBoxes","cropHeight","cropWidth","output","boxVals","data","get","dataId","values","boxIndVals","imageVals","inStride","computeStrides","outStride","b","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","y","yInd","x","c","ind","topInd","Math","floor","bottomInd","ceil","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottomRight","top","bottom","closestX","round","closestY","inInd","outInd","makeTensorInfo","dtype","cropAndResizeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/CropAndResize.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}