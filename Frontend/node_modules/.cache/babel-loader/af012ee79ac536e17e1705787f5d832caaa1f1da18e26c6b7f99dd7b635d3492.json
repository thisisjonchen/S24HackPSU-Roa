{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU\n} = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, bitwiseAndImplCPU, castImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, raggedGatherImplCPU, raggedRangeImplCPU, raggedTensorToTensorImplCPU, scatterImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, staticRegexReplaceImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };","map":{"version":3,"names":["shared","addImpl","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","bitwiseAndImpl","bitwiseAndImplCPU","castImpl","castImplCPU","ceilImpl","ceilImplCPU","concatImpl","concatImplCPU","equalImpl","equalImplCPU","expImpl","expImplCPU","expm1Impl","expm1ImplCPU","floorImpl","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImpl","greaterImplCPU","greaterEqualImpl","greaterEqualImplCPU","lessImpl","lessImplCPU","lessEqualImpl","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImpl","logImplCPU","maxImpl","maxImplCPU","maximumImpl","maximumImplCPU","minimumImpl","minimumImplCPU","multiplyImpl","multiplyImplCPU","negImpl","negImplCPU","notEqualImpl","notEqualImplCPU","prodImpl","prodImplCPU","raggedGatherImpl","raggedGatherImplCPU","raggedRangeImpl","raggedRangeImplCPU","raggedTensorToTensorImpl","raggedTensorToTensorImplCPU","rangeImpl","rangeImplCPU","rsqrtImpl","rsqrtImplCPU","scatterImpl","scatterImplCPU","sigmoidImpl","sigmoidImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","sqrtImpl","sqrtImplCPU","staticRegexReplaceImpl","staticRegexReplaceImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImpl","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernel_utils/shared.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  bitwiseAndImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  staticRegexReplaceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n"],"mappings":"AACA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA,OAAO,KAAKA,MAAM,MAAM,0CAA0C;AAQlE,MAAM;EACJC,OAAO,EAAEC,UAAU;EACnBC,YAAY,EAAEC,eAAe;EAC7BC,kBAAkB,EAAEC,qBAAqB;EACzCC,cAAc,EAAEC,iBAAiB;EACjCC,QAAQ,EAAEC,WAAW;EACrBC,QAAQ,EAAEC,WAAW;EACrBC,UAAU,EAAEC,aAAa;EACzBC,SAAS,EAAEC,YAAY;EACvBC,OAAO,EAAEC,UAAU;EACnBC,SAAS,EAAEC,YAAY;EACvBC,SAAS,EAAEC,YAAY;EACvBC,YAAY,EAAEC,eAAe;EAC7BC,YAAY,EAAEC,eAAe;EAC7BC,WAAW,EAAEC,cAAc;EAC3BC,gBAAgB,EAAEC,mBAAmB;EACrCC,QAAQ,EAAEC,WAAW;EACrBC,aAAa,EAAEC,gBAAgB;EAC/BC,YAAY,EAAEC,eAAe;EAC7BC,OAAO,EAAEC,UAAU;EACnBC,OAAO,EAAEC,UAAU;EACnBC,WAAW,EAAEC,cAAc;EAC3BC,WAAW,EAAEC,cAAc;EAC3BC,YAAY,EAAEC,eAAe;EAC7BC,OAAO,EAAEC,UAAU;EACnBC,YAAY,EAAEC,eAAe;EAC7BC,QAAQ,EAAEC,WAAW;EACrBC,gBAAgB,EAAEC,mBAAmB;EACrCC,eAAe,EAAEC,kBAAkB;EACnCC,wBAAwB,EAAEC,2BAA2B;EACrDC,SAAS,EAAEC,YAAY;EACvBC,SAAS,EAAEC,YAAY;EACvBC,WAAW,EAAEC,cAAc;EAC3BC,WAAW,EAAEC,cAAc;EAC3BC,aAAa,EAAEC,gBAAgB;EAC/BC,SAAS,EAAEC,YAAY;EACvBC,uBAAuB,EAAEC,0BAA0B;EACnDC,iBAAiB,EAAEC,oBAAoB;EACvCC,0BAA0B,EAAEC,6BAA6B;EACzDC,QAAQ,EAAEC,WAAW;EACrBC,sBAAsB,EAAEC,yBAAyB;EACjDC,gBAAgB,EAAEC,mBAAmB;EACrCC,gBAAgB,EAAEC,mBAAmB;EACrCC,eAAe,EAAEC,kBAAkB;EACnCC,0BAA0B,EAAEC,6BAA6B;EACzDC,OAAO,EAAEC,UAAU;EACnBC,QAAQ,EAAEC,WAAW;EACrBC,QAAQ,EAAEC,WAAW;EACrBC,aAAa,EAAEC,gBAAgB;EAC/BC,UAAU,EAAEC;AAAa,CAC1B,GAAGlG,MAAM;AAEV,SACEE,UAAU,EACVE,eAAe,EACfE,qBAAqB,EACrBE,iBAAiB,EACjBE,WAAW,EACXE,WAAW,EACXE,aAAa,EACbE,YAAY,EACZE,UAAU,EACVE,YAAY,EACZE,YAAY,EACZE,eAAe,EACfE,eAAe,EACfI,mBAAmB,EACnBF,cAAc,EACdM,gBAAgB,EAChBF,WAAW,EACXI,eAAe,EACfE,UAAU,EACVE,UAAU,EACVE,cAAc,EACdE,cAAc,EACdE,eAAe,EACfE,UAAU,EACVE,eAAe,EACfE,WAAW,EACXE,mBAAmB,EACnBE,kBAAkB,EAClBE,2BAA2B,EAC3BM,cAAc,EACdE,cAAc,EACdE,gBAAgB,EAChBE,YAAY,EACZE,0BAA0B,EAC1BE,oBAAoB,EACpBE,6BAA6B,EAC7BE,WAAW,EACXE,yBAAyB,EACzBE,mBAAmB,EACnBE,mBAAmB,EACnBE,kBAAkB,EAClBE,6BAA6B,EAC7BE,UAAU,EACV9B,YAAY,EACZE,YAAY,EACZ8B,WAAW,EACXE,WAAW,EACXE,gBAAgB,EAChBE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}