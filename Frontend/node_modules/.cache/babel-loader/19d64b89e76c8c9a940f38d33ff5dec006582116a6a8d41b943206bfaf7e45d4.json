{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from './tensor1d';\nexport function enclosingPowerOfTwo(value) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\nexport function cosineWindow(windowLength, a, b) {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = 2.0 * Math.PI * i / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}","map":{"version":3,"names":["tensor1d","enclosingPowerOfTwo","value","Math","floor","pow","ceil","log","cosineWindow","windowLength","a","b","even","newValues","Float32Array","i","cosArg","PI","cos"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/signal_ops_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {tensor1d} from './tensor1d';\n\nexport function enclosingPowerOfTwo(value: number) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\n\nexport function cosineWindow(\n    windowLength: number, a: number, b: number): Tensor1D {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,QAAQ,QAAO,YAAY;AAEnC,OAAM,SAAUC,mBAAmBA,CAACC,KAAa;EAC/C;EACA,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACG,IAAI,CAACH,IAAI,CAACI,GAAG,CAACL,KAAK,CAAC,GAAGC,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5E;AAEA,OAAM,SAAUC,YAAYA,CACxBC,YAAoB,EAAEC,CAAS,EAAEC,CAAS;EAC5C,MAAMC,IAAI,GAAG,CAAC,GAAGH,YAAY,GAAG,CAAC;EACjC,MAAMI,SAAS,GAAG,IAAIC,YAAY,CAACL,YAAY,CAAC;EAChD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,EAAE,EAAEM,CAAC,EAAE;IACrC,MAAMC,MAAM,GAAI,GAAG,GAAGb,IAAI,CAACc,EAAE,GAAGF,CAAC,IAAKN,YAAY,GAAGG,IAAI,GAAG,CAAC,CAAC;IAC9DC,SAAS,CAACE,CAAC,CAAC,GAAGL,CAAC,GAAGC,CAAC,GAAGR,IAAI,CAACe,GAAG,CAACF,MAAM,CAAC;;EAEzC,OAAOhB,QAAQ,CAACa,SAAS,EAAE,SAAS,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}