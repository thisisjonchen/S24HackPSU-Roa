{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(tape, xs, y) {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX = {};\n  const nodesFromX = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY = {};\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n  // Return the paths that come from x and lead to y.\n  const filteredTape = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n      filteredTape.push(prunedNode);\n    }\n  }\n  return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n    const dys = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n    if (node.gradient == null) {\n      throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);\n    }\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);\n      }\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}","map":{"version":3,"names":["util","getFilteredNodesXToY","tape","xs","y","tensorsFromX","nodesFromX","i","length","id","node","nodeInputs","inputs","inputName","input","anyInputFromX","j","outputs","forEach","output","tensorsLeadToY","nodesToY","filteredTape","prunedInputs","nodeInput","prunedNode","Object","assign","push","backpropagateGradients","tensorAccumulatedGradientMap","tidy","add","dys","o","gradTensor","gradient","Error","kernelName","inputGradients","keys","dx","dtype","x","arraysEqual","shape","curGradient","dispose"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/tape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  kernelName: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dys: Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor,\n    add: (a: Tensor, b: Tensor) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.kernelName}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,OAAO,KAAKA,IAAI,MAAM,QAAQ;AAgB9B;;;;;;;;AAQA,OAAM,SAAUC,oBAAoBA,CAChCC,IAAgB,EAAEC,EAAY,EAAEC,CAAS;EAC3C;EACA;EACA,MAAMC,YAAY,GAAkC,EAAE;EACtD,MAAMC,UAAU,GAAgC,EAAE;EAClD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,EAAE,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IAClCF,YAAY,CAACF,EAAE,CAACI,CAAC,CAAC,CAACE,EAAE,CAAC,GAAG,IAAI;;EAG/B,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAMG,IAAI,GAAGR,IAAI,CAACK,CAAC,CAAC;IACpB,MAAMI,UAAU,GAAGD,IAAI,CAACE,MAAM;IAC9B,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;MAClC,MAAMG,KAAK,GAAGH,UAAU,CAACE,SAAS,CAAC;MAEnC,IAAIE,aAAa,GAAG,KAAK;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,EAAE,CAACK,MAAM,EAAEQ,CAAC,EAAE,EAAE;QAClC,IAAIX,YAAY,CAACS,KAAK,CAACL,EAAE,CAAC,EAAE;UAC1BC,IAAI,CAACO,OAAO,CAACC,OAAO,CAACC,MAAM,IAAId,YAAY,CAACc,MAAM,CAACV,EAAE,CAAC,GAAG,IAAI,CAAC;UAC9DM,aAAa,GAAG,IAAI;UACpBT,UAAU,CAACI,IAAI,CAACD,EAAE,CAAC,GAAG,IAAI;UAC1B;;;MAIJ,IAAIM,aAAa,EAAE;QACjB;;;;EAKN;EACA,MAAMK,cAAc,GAAkC,EAAE;EACxDA,cAAc,CAAChB,CAAC,CAACK,EAAE,CAAC,GAAG,IAAI;EAC3B,MAAMY,QAAQ,GAAgC,EAAE;EAEhD,KAAK,IAAId,CAAC,GAAGL,IAAI,CAACM,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzC,MAAMG,IAAI,GAAGR,IAAI,CAACK,CAAC,CAAC;IACpB,MAAMI,UAAU,GAAGD,IAAI,CAACE,MAAM;IAE9B;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,OAAO,CAACT,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAC5C,IAAII,cAAc,CAACV,IAAI,CAACO,OAAO,CAACD,CAAC,CAAC,CAACP,EAAE,CAAC,EAAE;QACtC,KAAK,MAAMI,SAAS,IAAIF,UAAU,EAAE;UAClCS,cAAc,CAACT,UAAU,CAACE,SAAS,CAAC,CAACJ,EAAE,CAAC,GAAG,IAAI;UAC/CY,QAAQ,CAACX,IAAI,CAACD,EAAE,CAAC,GAAG,IAAI;;QAE1B;;;;EAKN;EACA,MAAMa,YAAY,GAAe,EAAE;EACnC,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAMG,IAAI,GAAGR,IAAI,CAACK,CAAC,CAAC;IAEpB,IAAID,UAAU,CAACI,IAAI,CAACD,EAAE,CAAC,IAAIY,QAAQ,CAACX,IAAI,CAACD,EAAE,CAAC,EAAE;MAC5C;MACA,MAAMc,YAAY,GAAkC,EAAE;MACtD,KAAK,MAAMV,SAAS,IAAIH,IAAI,CAACE,MAAM,EAAE;QACnC,MAAMY,SAAS,GAAGd,IAAI,CAACE,MAAM,CAACC,SAAS,CAAC;QACxC,IAAIR,YAAY,CAACmB,SAAS,CAACf,EAAE,CAAC,EAAE;UAC9Bc,YAAY,CAACV,SAAS,CAAC,GAAGW,SAAS;;;MAIvC;MACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEjB,IAAI,CAAC;MAC1Ce,UAAU,CAACb,MAAM,GAAGW,YAAY;MAChCE,UAAU,CAACR,OAAO,GAAGP,IAAI,CAACO,OAAO;MAEjCK,YAAY,CAACM,IAAI,CAACH,UAAU,CAAC;;;EAIjC,OAAOH,YAAY;AACrB;AAEA;;;;;;;AAOA,OAAM,SAAUO,sBAAsBA,CAClCC,4BAA0D,EAC1DR,YAAwB,EAAES,IAA6B,EACvDC,GAAqC;EACvC;EACA,KAAK,IAAIzB,CAAC,GAAGe,YAAY,CAACd,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjD,MAAMG,IAAI,GAAGY,YAAY,CAACf,CAAC,CAAC;IAE5B,MAAM0B,GAAG,GAAa,EAAE;IACxBvB,IAAI,CAACO,OAAO,CAACC,OAAO,CAACgB,CAAC,IAAG;MACvB,MAAMC,UAAU,GAAGL,4BAA4B,CAACI,CAAC,CAACzB,EAAE,CAAC;MACrD,IAAI0B,UAAU,IAAI,IAAI,EAAE;QACtBF,GAAG,CAACL,IAAI,CAACO,UAAU,CAAC;OACrB,MAAM;QACL;QACA;QACAF,GAAG,CAACL,IAAI,CAAC,IAAI,CAAC;;IAElB,CAAC,CAAC;IAEF,IAAIlB,IAAI,CAAC0B,QAAQ,IAAI,IAAI,EAAE;MACzB,MAAM,IAAIC,KAAK,CACX,uDAAuD,GACvD,OAAO3B,IAAI,CAAC4B,UAAU,GAAG,CAAC;;IAGhC;IACA,MAAMC,cAAc,GAAG7B,IAAI,CAAC0B,QAAQ,CAACH,GAAG,CAAC;IAEzC,KAAK,MAAMpB,SAAS,IAAIH,IAAI,CAACE,MAAM,EAAE;MACnC,IAAI,EAAEC,SAAS,IAAI0B,cAAc,CAAC,EAAE;QAClC,MAAM,IAAIF,KAAK,CACX,iCAAiCxB,SAAS,IAAI,GAC9C,8BAA8Ba,MAAM,CAACc,IAAI,CAACD,cAAc,CAAC,GAAG,CAAC;;MAGnE;MACA,MAAME,EAAE,GAAGV,IAAI,CAAC,MAAMQ,cAAc,CAAC1B,SAAS,CAAC,EAAE,CAAC;MAClD,IAAI4B,EAAE,CAACC,KAAK,KAAK,SAAS,EAAE;QAC1B,MAAM,IAAIL,KAAK,CACX,4BACI3B,IAAI,CAAC4B,UAAU,0BAA0B,GAC7C,GAAGzB,SAAS,wCAAwC4B,EAAE,CAACC,KAAK,GAAG,CAAC;;MAEtE,MAAMC,CAAC,GAAGjC,IAAI,CAACE,MAAM,CAACC,SAAS,CAAC;MAChC,IAAI,CAACb,IAAI,CAAC4C,WAAW,CAACH,EAAE,CAACI,KAAK,EAAEF,CAAC,CAACE,KAAK,CAAC,EAAE;QACxC,MAAM,IAAIR,KAAK,CACX,4BACI3B,IAAI,CAAC4B,UAAU,0BAA0B,GAC7C,IAAIzB,SAAS,gBAAgB4B,EAAE,CAACI,KAAK,0BAA0B,GAC/D,2BAA2BF,CAAC,CAACE,KAAK,GAAG,CAAC;;MAG5C,IAAIf,4BAA4B,CAACa,CAAC,CAAClC,EAAE,CAAC,IAAI,IAAI,EAAE;QAC9CqB,4BAA4B,CAACa,CAAC,CAAClC,EAAE,CAAC,GAAGgC,EAAE;OACxC,MAAM;QACL,MAAMK,WAAW,GAAGhB,4BAA4B,CAACa,CAAC,CAAClC,EAAE,CAAC;QACtDqB,4BAA4B,CAACa,CAAC,CAAClC,EAAE,CAAC,GAAGuB,GAAG,CAACc,WAAW,EAAEL,EAAE,CAAC;QACzDK,WAAW,CAACC,OAAO,EAAE;;;;AAI7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}