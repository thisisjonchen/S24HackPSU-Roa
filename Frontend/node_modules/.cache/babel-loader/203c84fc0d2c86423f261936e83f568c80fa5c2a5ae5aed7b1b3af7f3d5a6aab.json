{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n    let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\nexport class BaseConv extends Layer {\n  constructor(rank, args) {\n    super(args);\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n    if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) {\n      throw new ValueError(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n  static verifyArgs(args) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n  getConfig() {\n    const config = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport class Conv extends BaseConv {\n  constructor(rank, args) {\n    super(rank, args);\n    this.kernel = null;\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    this.inputSpec = [{\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    }];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else {\n          throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n        }\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace = [];\n    const space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n  getConfig() {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  static verifyArgs(args) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\nclass Conv2D extends Conv {\n  constructor(args) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nexport { Conv2D };\nserialization.registerClass(Conv2D);\nclass Conv3D extends Conv {\n  constructor(args) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nexport { Conv3D };\nserialization.registerClass(Conv3D);\nclass Conv2DTranspose extends Conv2D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length !== 4) {\n      throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    // Set input spec.\n    this.inputSpec = [new InputSpec({\n      ndim: 4,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape = [batchSize, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n      if (this.bias != null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let heightAxis;\n    let widthAxis;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nexport { Conv2DTranspose };\nserialization.registerClass(Conv2DTranspose);\nclass Conv3DTranspose extends Conv3D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length !== 5) {\n      throw new ValueError('Input should have rank 5; Received input shape: ' + JSON.stringify(inputShape));\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n    // Set input spec.\n    this.inputSpec = [new InputSpec({\n      ndim: 5,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 5) {\n        throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      let dAxis;\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n      // Infer the dynamic output shape.\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n      // Same as `conv2dTranspose`. We always assumes channelsLast.\n      const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n      let outputs = tfc.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n      if (this.bias !== null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let depthAxis;\n    let heightAxis;\n    let widthAxis;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] = deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\n/** @nocollapse */\nConv3DTranspose.className = 'Conv3DTranspose';\nexport { Conv3DTranspose };\nserialization.registerClass(Conv3DTranspose);\nclass SeparableConv extends Conv {\n  constructor(rank, config) {\n    super(rank, config);\n    this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    this.depthwiseKernel = null;\n    this.pointwiseKernel = null;\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let output;\n      if (this.rank === 1) {\n        throw new NotImplementedError('1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n      }\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport { SeparableConv };\nclass SeparableConv2D extends SeparableConv {\n  constructor(args) {\n    super(2, args);\n  }\n}\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nexport { SeparableConv2D };\nserialization.registerClass(SeparableConv2D);\nclass Conv1D extends Conv {\n  constructor(args) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{\n      ndim: 3\n    }];\n  }\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nexport { Conv1D };\nserialization.registerClass(Conv1D);\nclass Cropping2D extends Layer {\n  constructor(args) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      this.cropping = args.cropping;\n    }\n    this.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{\n      ndim: 4\n    }];\n  }\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n    } else {\n      return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n    }\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n  getConfig() {\n    const config = {\n      cropping: this.cropping,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nexport { Cropping2D };\nserialization.registerClass(Cropping2D);\nclass UpSampling2D extends Layer {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_SIZE = [2, 2];\n    this.inputSpec = [{\n      ndim: 4\n    }];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n  getConfig() {\n    const config = {\n      size: this.size,\n      dataFormat: this.dataFormat,\n      interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nexport { UpSampling2D };\nserialization.registerClass(UpSampling2D);","map":{"version":3,"names":["tfc","serialization","tidy","getActivation","serializeActivation","imageDataFormat","K","checkDataFormat","checkInterpolationFormat","checkPaddingMode","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","deconvLength","normalizeArray","generic_utils","getExactlyOneShape","getExactlyOneTensor","preprocessConv2DInput","x","dataFormat","transpose","preprocessConv3DInput","conv1dWithBias","kernel","bias","strides","padding","dilationRate","shape","length","y","conv1d","biasAdd","conv2d","conv2dWithBiasActivation","activation","rank","fused","filter","pad","dilations","conv3d","conv3dWithBias","BaseConv","constructor","args","DEFAULT_KERNEL_INITIALIZER","DEFAULT_BIAS_INITIALIZER","verifyArgs","assertPositiveInteger","kernelSize","useBias","biasInitializer","biasConstraint","biasRegularizer","activityRegularizer","Array","isArray","JSON","stringify","assert","checkArrayTypeAndLength","getConfig","config","baseConfig","Object","assign","Conv","filters","kernelInitializer","kernelConstraint","kernelRegularizer","build","inputShape","channelAxis","inputDim","kernelShape","concat","addWeight","inputSpec","ndim","axes","built","call","inputs","kwargs","outputs","biasValue","read","fusedActivationName","mapActivationToFusedKernel","getClassName","apply","computeOutputShape","newSpace","space","slice","i","newDim","push","outputShape","Conv2D","className","registerClass","Conv3D","Conv2DTranspose","input","batchSize","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","outHeight","outWidth","conv2dTranspose","heightAxis","widthAxis","Conv3DTranspose","dAxis","depth","kernelD","strideD","outDepth","conv3dTranspose","depthAxis","SeparableConv","DEFAULT_DEPTHWISE_INITIALIZER","DEFAULT_POINTWISE_INITIALIZER","depthwiseKernel","pointwiseKernel","depthMultiplier","depthwiseInitializer","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","trainable","output","separableConv2d","SeparableConv2D","Conv1D","Cropping2D","cropping","undefined","hSliced","sliceAlongAxis","UpSampling2D","DEFAULT_SIZE","size","interpolation","resized","image","resizeNearestNeighbor","resizeBilinear"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/layers/convolutional.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkInterpolationFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, InterpolationFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n          this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static override className = 'Conv2DTranspose';\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport class Conv3DTranspose extends Conv3D {\n  /** @nocollapse */\n  static override className = 'Conv3DTranspose';\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 5})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv3DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError(\n          'Input should have rank 5; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 5, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy<tfc.Tensor5D>(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 5) {\n        throw new ValueError(\n            `Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      let dAxis: number;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n\n      // Infer the dynamic output shape.\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Same as `conv2dTranspose`. We always assumes channelsLast.\n      const outputShape: [number, number, number, number, number] =\n          [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n      let outputs = tfc.conv3dTranspose(\n          input as Tensor5D, this.kernel.read() as Tensor5D, outputShape,\n          this.strides as [number, number, number],\n          this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor5D;\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs) as Tensor5D;\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let depthAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] =\n        deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv3DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static override className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 lists of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   * `channels_first` corresponds to inputs with shape\n   *   `(batch, channels, ...)`\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n  /**\n   * The interpolation mechanism, one of `\"nearest\"` or `\"bilinear\"`, default\n   * to `\"nearest\"`.\n   */\n  interpolation?: InterpolationFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n  protected readonly interpolation: InterpolationFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation =\n        args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n\n        const resized = this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n        size: this.size,\n        dataFormat: this.dataFormat,\n        interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}