{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n  constructor(outputShape, inputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec3'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  const coordsFromIndexSnippet = enableShapeUniforms ? shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}","map":{"version":3,"names":["useShapeUniforms","shader_util","ReshapePackedProgram","constructor","outputShape","inputShape","variableNames","packedInputs","packedOutput","customUniforms","name","type","enableShapeUniforms","length","mainLoop","i","thisRC","userCode","getReshapedInputCoords","getFlatIndexFrom3DOutput","getFlatIndexFrom3D","shape","coordsFromIndexSnippet","getLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/reshape_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,gBAAgB,QAAO,cAAc;AAC3D,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD,OAAM,MAAOC,oBAAoB;EAS/BC,YAAYC,WAAqC,EAAEC,UAElD;IAVD,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,KAAAC,YAAY,GAAG,IAAI;IACnB,KAAAC,YAAY,GAAG,IAAI;IAInB,KAAAC,cAAc,GAAG,CAAC;MAACC,IAAI,EAAE,YAAY;MAAEC,IAAI,EAAE;IAAgB,CAAE,CAAC;IAK9D,IAAI,CAACP,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACQ,mBAAmB,GAAGZ,gBAAgB,CAAC,IAAI,CAACI,WAAW,CAACS,MAAM,CAAC;IAEpE,IAAIC,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAIC,MAAM,GAAG,cAAc;MAC3B,IAAID,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACfC,MAAM,IAAI,gBAAgB;;MAE5B,IAAID,CAAC,GAAG,CAAC,EAAE;QACTC,MAAM,IAAI,gBAAgB;;MAG5BF,QAAQ,IAAI;UACRE,MAAM;UACND,CAAC,GAAG,CAAC,GAAG,yCAAyC,GAAG,EAAE;;;;;;mBAM7CA,CAAC;;UAEVA,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE;OACnB;;IAGH,IAAI,CAACE,QAAQ,GAAG;QACZC,sBAAsB,CAACb,UAAU,EAAE,IAAI,CAACO,mBAAmB,CAAC;QAE5D,IAAI,CAACA,mBAAmB,GAAGX,WAAW,CAACkB,wBAAwB,EAAE,GACtClB,WAAW,CAACmB,kBAAkB,CAAChB,WAAW,CAAC;;;;;;;;qBAQzD,IAAI,CAACQ,mBAAmB,GAAG,aAAa,GAAGR,WAAW,CAAC,CAAC,CAAC;qBACzD,IAAI,CAACQ,mBAAmB,GAAG,aAAa,GAAGR,WAAW,CAAC,CAAC,CAAC;;UAEpEU,QAAQ;;;;KAIb;EACH;;AAGF,SAASI,sBAAsBA,CAC3BG,KAA+B,EAAET,mBAA4B;EAC/D,MAAMU,sBAAsB,GAAGV,mBAAmB,GAC9CX,WAAW,CAACsB,2CAA2C,CACnD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,YAAY,CAAC,GAClCtB,WAAW,CAACuB,kCAAkC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAEH,KAAK,CAAC;EAE1E,OAAO;;QAEDC,sBAAsB;;;GAG3B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}