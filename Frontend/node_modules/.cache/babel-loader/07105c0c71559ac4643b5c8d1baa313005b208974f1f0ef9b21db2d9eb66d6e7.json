{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n  const inRank = inShape.length;\n  const dims = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(inShape, outShape) {\n  const result = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || inDim === 1 && outDim > 1) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n  const l = Math.max(shapeA.length, shapeB.length);\n  const result = new Array(l);\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result[l - i - 1] = b;\n    } else if (b === 1) {\n      result[l - i - 1] = a;\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result[l - i - 1] = a;\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["getBroadcastDims","inShape","outShape","inRank","length","dims","i","dim","a","b","unshift","getReductionAxes","result","inDim","outAxis","outDim","assertAndGetBroadcastShape","shapeA","shapeB","l","Math","max","Array","errMsg","Error"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/broadcast_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(\n    inShape: number[], outShape: number[]): number[] {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(\n    inShape: number[], outShape: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || (inDim === 1 && outDim > 1)) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\n\nexport function assertAndGetBroadcastShape(\n    shapeA: number[], shapeB: number[]): number[] {\n  const l = Math.max(shapeA.length, shapeB.length);\n  const result = new Array(l);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result[l - i - 1] = b;\n    } else if (b === 1) {\n      result[l - i - 1] = a;\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` +\n          `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result[l - i - 1] = a;\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AASA,OAAM,SAAUA,gBAAgBA,CAC5BC,OAAiB,EAAEC,QAAkB;EACvC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM;EAC7B,MAAMC,IAAI,GAAa,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC/B,MAAMC,GAAG,GAAGJ,MAAM,GAAG,CAAC,GAAGG,CAAC;IAC1B,MAAME,CAAC,GAAGP,OAAO,CAACM,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAME,CAAC,GAAGP,QAAQ,CAACA,QAAQ,CAACE,MAAM,GAAG,CAAC,GAAGE,CAAC,CAAC,IAAI,CAAC;IAChD,IAAIG,CAAC,GAAG,CAAC,IAAID,CAAC,KAAK,CAAC,EAAE;MACpBH,IAAI,CAACK,OAAO,CAACH,GAAG,CAAC;;;EAGrB,OAAOF,IAAI;AACb;AAEA;;;;AAIA,OAAM,SAAUM,gBAAgBA,CAC5BV,OAAiB,EAAEC,QAAkB;EACvC,MAAMU,MAAM,GAAa,EAAE;EAC3B,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;IACxC,MAAMO,KAAK,GAAGZ,OAAO,CAACA,OAAO,CAACG,MAAM,GAAGE,CAAC,GAAG,CAAC,CAAC;IAC7C,MAAMQ,OAAO,GAAGZ,QAAQ,CAACE,MAAM,GAAGE,CAAC,GAAG,CAAC;IACvC,MAAMS,MAAM,GAAGb,QAAQ,CAACY,OAAO,CAAC;IAChC,IAAID,KAAK,IAAI,IAAI,IAAKA,KAAK,KAAK,CAAC,IAAIE,MAAM,GAAG,CAAE,EAAE;MAChDH,MAAM,CAACF,OAAO,CAACI,OAAO,CAAC;;;EAG3B,OAAOF,MAAM;AACf;AAEA,OAAM,SAAUI,0BAA0BA,CACtCC,MAAgB,EAAEC,MAAgB;EACpC,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACb,MAAM,EAAEc,MAAM,CAACd,MAAM,CAAC;EAChD,MAAMQ,MAAM,GAAG,IAAIU,KAAK,CAACH,CAAC,CAAC;EAE3B,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,CAAC,EAAEb,CAAC,EAAE,EAAE;IAC1B,IAAIE,CAAC,GAAGS,MAAM,CAACA,MAAM,CAACb,MAAM,GAAGE,CAAC,GAAG,CAAC,CAAC;IACrC,IAAIE,CAAC,IAAI,IAAI,EAAE;MACbA,CAAC,GAAG,CAAC;;IAEP,IAAIC,CAAC,GAAGS,MAAM,CAACA,MAAM,CAACd,MAAM,GAAGE,CAAC,GAAG,CAAC,CAAC;IACrC,IAAIG,CAAC,IAAI,IAAI,EAAE;MACbA,CAAC,GAAG,CAAC;;IAEP,IAAID,CAAC,KAAK,CAAC,EAAE;MACXI,MAAM,CAACO,CAAC,GAAGb,CAAC,GAAG,CAAC,CAAC,GAAGG,CAAC;KACtB,MAAM,IAAIA,CAAC,KAAK,CAAC,EAAE;MAClBG,MAAM,CAACO,CAAC,GAAGb,CAAC,GAAG,CAAC,CAAC,GAAGE,CAAC;KACtB,MAAM,IAAIA,CAAC,KAAKC,CAAC,EAAE;MAClB,MAAMc,MAAM,GAAG,uDAAuD,GAClE,GAAGN,MAAM,QAAQC,MAAM,GAAG;MAC9B,MAAMM,KAAK,CAACD,MAAM,CAAC;KACpB,MAAM;MACLX,MAAM,CAACO,CAAC,GAAGb,CAAC,GAAG,CAAC,CAAC,GAAGE,CAAC;;;EAGzB,OAAOI,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}