{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseSegmentMean } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Computes the mean along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentMean(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1], 'int32'),\n *                                             tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1, 2], 'int32'),\n *                                             tf.tensor1d([0, 1, 1], 'int32'));\n * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentMean_(data, indices, segmentIds) {\n  const $data = convertToTensor(data, 'data', 'sparseSegmentMean');\n  const $indices = convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');\n  const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');\n  if ($data.rank < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n  }\n  const inputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n  return ENGINE.runKernel(SparseSegmentMean, inputs);\n}\nexport const sparseSegmentMean = /* @__PURE__ */op({\n  sparseSegmentMean_\n});","map":{"version":3,"names":["ENGINE","SparseSegmentMean","convertToTensor","op","sparseSegmentMean_","data","indices","segmentIds","$data","$indices","$segmentIds","rank","Error","shape","inputs","runKernel","sparseSegmentMean"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/sparse/sparse_segment_mean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseSegmentMean, SparseSegmentMeanInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Computes the mean along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentMean(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1], 'int32'),\n *                                             tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1, 2], 'int32'),\n *                                             tf.tensor1d([0, 1, 1], 'int32'));\n * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentMean_(\n    data: Tensor|TensorLike, indices: Tensor1D|TensorLike,\n    segmentIds: Tensor1D|TensorLike): Tensor {\n  const $data = convertToTensor(data, 'data', 'sparseSegmentMean');\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');\n\n  if ($data.rank < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n  }\n\n  const inputs: SparseSegmentMeanInputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n\n  return ENGINE.runKernel(SparseSegmentMean, inputs as {});\n}\n\nexport const sparseSegmentMean = /* @__PURE__ */ op({sparseSegmentMean_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,iBAAiB,QAAgC,oBAAoB;AAE7E,SAAQC,eAAe,QAAO,uBAAuB;AAErD,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASC,kBAAkBA,CACvBC,IAAuB,EAAEC,OAA4B,EACrDC,UAA+B;EACjC,MAAMC,KAAK,GAAGN,eAAe,CAACG,IAAI,EAAE,MAAM,EAAE,mBAAmB,CAAC;EAChE,MAAMI,QAAQ,GACVP,eAAe,CAACI,OAAO,EAAE,SAAS,EAAE,mBAAmB,EAAE,OAAO,CAAC;EACrE,MAAMI,WAAW,GACbR,eAAe,CAACK,UAAU,EAAE,YAAY,EAAE,mBAAmB,EAAE,OAAO,CAAC;EAE3E,IAAIC,KAAK,CAACG,IAAI,GAAG,CAAC,EAAE;IAClB,MAAM,IAAIC,KAAK,CACX,2DAA2D,CAAC;;EAElE,IAAIH,QAAQ,CAACE,IAAI,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC;YACRH,QAAQ,CAACI,KAAK,EAAE,CAAC;;EAE3B,IAAIH,WAAW,CAACC,IAAI,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAAC;YACRF,WAAW,CAACG,KAAK,EAAE,CAAC;;EAG9B,MAAMC,MAAM,GAA4B;IACtCT,IAAI,EAAEG,KAAK;IACXF,OAAO,EAAEG,QAAQ;IACjBF,UAAU,EAAEG;GACb;EAED,OAAOV,MAAM,CAACe,SAAS,CAACd,iBAAiB,EAAEa,MAAY,CAAC;AAC1D;AAEA,OAAO,MAAME,iBAAiB,GAAG,eAAgBb,EAAE,CAAC;EAACC;AAAkB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}