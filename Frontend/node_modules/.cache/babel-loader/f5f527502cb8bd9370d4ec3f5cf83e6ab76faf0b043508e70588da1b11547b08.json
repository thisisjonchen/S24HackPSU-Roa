{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DenseBincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1 or rank 2.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n * @param binaryOutput Optional. Whether the kernel should count the appearance\n *     or number of occurrences. Defaults to False.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction denseBincount_(x, weights, size, binaryOutput = false) {\n  const $x = convertToTensor(x, 'x', 'denseBincount');\n  const $weights = convertToTensor(weights, 'weights', 'denseBincount');\n  util.assert($x.dtype === 'int32', () => `Error in denseBincount: input ` + `dtype must be int32, but got ${$x.dtype}`);\n  util.assert($x.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got ` + `rank ${$x.rank}.`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in denseBincount: weights must have the same shape as x or ` + `0-length, but got x shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);\n  const inputs = {\n    x: $x,\n    weights: $weights\n  };\n  const attrs = {\n    size,\n    binaryOutput\n  };\n  return ENGINE.runKernel(DenseBincount, inputs, attrs);\n}\nexport const denseBincount = /* @__PURE__ */op({\n  denseBincount_\n});","map":{"version":3,"names":["ENGINE","DenseBincount","convertToTensor","util","op","denseBincount_","x","weights","size","binaryOutput","$x","$weights","assert","dtype","rank","shape","inputs","attrs","runKernel","denseBincount"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/dense_bincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1 or rank 2.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n * @param binaryOutput Optional. Whether the kernel should count the appearance\n *     or number of occurrences. Defaults to False.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction denseBincount_<T extends Tensor1D|Tensor2D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number,\n    binaryOutput = false): T {\n  const $x = convertToTensor(x, 'x', 'denseBincount');\n  const $weights = convertToTensor(weights, 'weights', 'denseBincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in denseBincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(\n      $x.rank <= 2,\n      () => `Error in denseBincount: input must be at most rank 2, but got ` +\n          `rank ${$x.rank}.`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () =>\n          `Error in denseBincount: weights must have the same shape as x or ` +\n          `0-length, but got x shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: DenseBincountInputs = {x: $x, weights: $weights};\n  const attrs: DenseBincountAttrs = {size, binaryOutput};\n\n  return ENGINE.runKernel(\n      DenseBincount, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const denseBincount = /* @__PURE__ */ op({denseBincount_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,aAAa,QAAgD,iBAAiB;AAItF,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,cAAcA,CACnBC,CAAe,EAAEC,OAAqB,EAAEC,IAAY,EACpDC,YAAY,GAAG,KAAK;EACtB,MAAMC,EAAE,GAAGR,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,eAAe,CAAC;EACnD,MAAMK,QAAQ,GAAGT,eAAe,CAACK,OAAO,EAAE,SAAS,EAAE,eAAe,CAAC;EAErEJ,IAAI,CAACS,MAAM,CACPF,EAAE,CAACG,KAAK,KAAK,OAAO,EACpB,MAAM,gCAAgC,GAClC,gCAAgCH,EAAE,CAACG,KAAK,EAAE,CAAC;EACnDV,IAAI,CAACS,MAAM,CACPF,EAAE,CAACI,IAAI,IAAI,CAAC,EACZ,MAAM,gEAAgE,GAClE,QAAQJ,EAAE,CAACI,IAAI,GAAG,CAAC;EAC3BX,IAAI,CAACS,MAAM,CAACJ,IAAI,IAAI,CAAC,EAAE,MAAM,sCAAsCA,IAAI,GAAG,CAAC;EAC3EL,IAAI,CAACS,MAAM,CACPD,QAAQ,CAACH,IAAI,KAAKE,EAAE,CAACF,IAAI,IAAIG,QAAQ,CAACH,IAAI,KAAK,CAAC,EAChD,MACI,mEAAmE,GACnE,8BAA8BE,EAAE,CAACK,KAAK,mBAAmB,GACzD,GAAGJ,QAAQ,CAACI,KAAK,GAAG,CAAC;EAE7B,MAAMC,MAAM,GAAwB;IAACV,CAAC,EAAEI,EAAE;IAAEH,OAAO,EAAEI;EAAQ,CAAC;EAC9D,MAAMM,KAAK,GAAuB;IAACT,IAAI;IAAEC;EAAY,CAAC;EAEtD,OAAOT,MAAM,CAACkB,SAAS,CACnBjB,aAAa,EAAEe,MAAmC,EAClDC,KAAgC,CAAC;AACvC;AAEA,OAAO,MAAME,aAAa,GAAG,eAAgBf,EAAE,CAAC;EAACC;AAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}