{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n  constructor(outputShape, inputIsUnsignedByte = false) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n    this.userCode = `\n        ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}","map":{"version":3,"names":["getGlslDifferences","useShapeUniforms","shader_util","EncodeMatrixPackedProgram","constructor","outputShape","inputIsUnsignedByte","variableNames","packedInputs","packedOutput","customUniforms","name","type","glsl","enableShapeUniforms","length","mainLoop","output","row","col","channel","texture2D","userCode","getFlatIndexFrom3DOutput","getFlatIndexFrom3D"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,gBAAgB;AACjD,SAAsBC,gBAAgB,QAAO,cAAc;AAC3D,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD;;;;;;;;;;;;;;;AAgBA,OAAM,MAAOC,yBAAyB;EASpCC,YACIC,WAAqC,EAAEC,mBAAmB,GAAG,KAAK;IATtE,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAGrB,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,YAAY,GAAG,IAAI;IAEnB,KAAAC,cAAc,GAAG,CAAC;MAACC,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAgB,CAAE,CAAC;IAI5D,MAAMC,IAAI,GAAGb,kBAAkB,EAAE;IACjC,IAAI,CAACK,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACS,mBAAmB,GAAGb,gBAAgB,CAAC,IAAI,CAACI,WAAW,CAACU,MAAM,CAAC;IAEpE,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,QAAQ;IACrB,IAAIX,mBAAmB,EAAE;MACvBW,MAAM,GAAG,4BAA4B;;IAGvC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACjC,MAAMC,OAAO,GAAGF,GAAG,GAAG,CAAC,GAAGC,GAAG;QAE7BH,QAAQ,IAAI;;gCAEYG,GAAG,MACvB,IAAI,CAACL,mBAAmB,GAAG,aAAa,GAAG,GAAGT,WAAW,CAAC,CAAC,CAAC,EAAE;8BAC5Cc,GAAG;iCACAD,GAAG,MACxB,IAAI,CAACJ,mBAAmB,GAAG,aAAa,GAAG,GAAGT,WAAW,CAAC,CAAC,CAAC,EAAE;gCAC1Ca,GAAG;;;;;;;;;;uBAUZL,IAAI,CAACQ,SAAS;;;uBAGdD,OAAO;;uBAEPA,OAAO;;uBAEPA,OAAO;;uBAEPA,OAAO;;;;SAIrB;;;IAIL,IAAI,CAACE,QAAQ,GAAG;UAEZ,IAAI,CAACR,mBAAmB,GAAGZ,WAAW,CAACqB,wBAAwB,EAAE,GACtCrB,WAAW,CAACsB,kBAAkB,CAACnB,WAAW,CAAC;;;;;;;;;;;YAWlEW,QAAQ;;YAERH,IAAI,CAACI,MAAM,MAAMA,MAAM;;KAE9B;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}