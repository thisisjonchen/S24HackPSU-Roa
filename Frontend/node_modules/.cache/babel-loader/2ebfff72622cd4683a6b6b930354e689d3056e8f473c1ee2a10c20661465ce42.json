{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\nexport const argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax\n};","map":{"version":3,"names":["ArgMax","backend_util","util","argMinMaxReduce","transpose","argMax","args","inputs","backend","attrs","x","axis","axes","parseAxisParam","shape","permutedAxes","getAxesPermutation","length","$x","intermediateTensorInfos","perm","push","getInnerMostAxes","assertAxesAreInnerMostDims","out","forEach","t","disposeIntermediateTensorInfo","argMaxConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/ArgMax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,EAA6BC,YAAY,EAAwCC,IAAI,QAAO,uBAAuB;AAGjI,SAAQC,eAAe,QAAO,6BAA6B;AAE3D,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAM,SAAUC,MAAMA,CAClBC,IACyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EAEpB,IAAIG,IAAI,GAAGV,IAAI,CAACW,cAAc,CAACF,IAAI,EAAED,CAAC,CAACI,KAAK,CAAC;EAC7C,MAAMC,YAAY,GAAGd,YAAY,CAACe,kBAAkB,CAACJ,IAAI,EAAEF,CAAC,CAACI,KAAK,CAACG,MAAM,CAAC;EAC1E,IAAIC,EAAE,GAAGR,CAAC;EACV,MAAMS,uBAAuB,GAAG,EAAE;EAClC,IAAIJ,YAAY,IAAI,IAAI,EAAE;IACxBG,EAAE,GAAGd,SAAS,CAAC;MAACG,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF,OAAO;MAAEC,KAAK,EAAE;QAACW,IAAI,EAAEL;MAAY;IAAC,CAAC,CAAC;IACnEI,uBAAuB,CAACE,IAAI,CAACH,EAAE,CAAC;IAChCN,IAAI,GAAGX,YAAY,CAACqB,gBAAgB,CAACV,IAAI,CAACK,MAAM,EAAEC,EAAE,CAACJ,KAAK,CAACG,MAAM,CAAC;;EAGpEhB,YAAY,CAACsB,0BAA0B,CAAC,QAAQ,EAAE,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEM,EAAE,CAACJ,KAAK,CAACG,MAAM,CAAC;EAC7E,MAAMO,GAAG,GAAGrB,eAAe,CAACK,OAAO,EAAEU,EAAE,EAAEN,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;EAExDO,uBAAuB,CAACM,OAAO,CAC3BC,CAAC,IAAIlB,OAAO,CAACmB,6BAA6B,CAACD,CAAC,CAAC,CAAC;EAClD,OAAOF,GAAG;AACZ;AAEA,OAAO,MAAMI,YAAY,GAAiB;EACxCC,UAAU,EAAE7B,MAAM;EAClB8B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}