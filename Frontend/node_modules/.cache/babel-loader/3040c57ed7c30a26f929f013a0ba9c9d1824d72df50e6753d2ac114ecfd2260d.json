{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { resizeBilinear } from '../../ops/image/resize_bilinear';\nimport { getGlobalTensorClass } from '../../tensor';\ngetGlobalTensorClass().prototype.resizeBilinear = function (newShape2D, alignCorners, halfPixelCenters) {\n  this.throwIfDisposed();\n  return resizeBilinear(this, newShape2D, alignCorners, halfPixelCenters);\n};","map":{"version":3,"names":["resizeBilinear","getGlobalTensorClass","prototype","newShape2D","alignCorners","halfPixelCenters","throwIfDisposed"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/public/chained_ops/resize_bilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {resizeBilinear} from '../../ops/image/resize_bilinear';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    resizeBilinear<T extends Tensor3D|Tensor4D>(\n        newShape2D: [number, number], alignCorners?: boolean,\n        halfPixelCenters?: boolean): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.resizeBilinear =\n    function<T extends Tensor3D|Tensor4D>(\n        this: T, newShape2D: [number, number], alignCorners?: boolean,\n        halfPixelCenters?: boolean): T {\n  this.throwIfDisposed();\n  return resizeBilinear(this, newShape2D, alignCorners, halfPixelCenters);\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,cAAc,QAAO,iCAAiC;AAC9D,SAAQC,oBAAoB,QAA2B,cAAc;AAWrEA,oBAAoB,EAAE,CAACC,SAAS,CAACF,cAAc,GAC3C,UACaG,UAA4B,EAAEC,YAAsB,EAC7DC,gBAA0B;EAChC,IAAI,CAACC,eAAe,EAAE;EACtB,OAAON,cAAc,CAAC,IAAI,EAAEG,UAAU,EAAEC,YAAY,EAAEC,gBAAgB,CAAC;AACzE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}