{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}","map":{"version":3,"names":["LRNProgram","constructor","xShape","radius","bias","alpha","beta","variableNames","outputShape","rad","maxD","powOperator","basis","userCode"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/lrn_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOA,UAAU;EAKrBC,YACIC,MAAgB,EAAEC,MAAc,EAAEC,IAAY,EAAEC,KAAa,EAC7DC,IAAY;IANhB,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,KAAAC,WAAW,GAAa,EAAE;IAMxB,MAAMC,GAAG,GAAGN,MAAM;IAClB,MAAMO,IAAI,GAAGR,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,IAAI,CAACM,WAAW,GAAGN,MAAM;IAEzB;IACA;IACA;IACA;IACA,IAAIS,WAAW;IACf,MAAMC,KAAK,GAAG,SAASR,IAAI,aAAaC,KAAK,SAAS;IACtD,IAAIC,IAAI,KAAK,GAAG,EAAE;MAChBK,WAAW,GAAG,eAAeC,KAAK,GAAG;KACtC,MAAM,IAAIN,IAAI,KAAK,GAAG,EAAE;MACvBK,WAAW,GAAG,QAAQC,KAAK,GAAG;KAC/B,MAAM;MACLD,WAAW,GAAG,WAAWC,KAAK,cAAcN,IAAI,KAAK;;IAGvD,IAAI,CAACO,QAAQ,GAAG;;;;;;;;;wBASIJ,GAAG,UAAUA,GAAG;;oCAEJC,IAAI;;;;;0BAKdC,WAAW;;;KAGhC;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}