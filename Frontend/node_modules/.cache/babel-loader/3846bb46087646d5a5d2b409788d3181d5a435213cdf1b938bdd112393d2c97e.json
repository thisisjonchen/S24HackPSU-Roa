{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n  constructor(aShape, reps) {\n    this.variableNames = ['A'];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\nfunction getSourceCoords(aShape) {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}","map":{"version":3,"names":["getCoordsDataType","TileProgram","constructor","aShape","reps","variableNames","outputShape","Array","length","i","rank","dtype","sourceCoords","getSourceCoords","userCode","Error","currentCoords","push","join"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/tile_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAOC,WAAW;EAMtBC,YAAYC,MAAgB,EAAEC,IAAc;IAL5C,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAMnB,MAAMC,WAAW,GAAa,IAAIC,KAAK,CAACJ,MAAM,CAACK,MAAM,CAAC;IACtD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC3CH,WAAW,CAACG,CAAC,CAAC,GAAGN,MAAM,CAACM,CAAC,CAAC,GAAGL,IAAI,CAACK,CAAC,CAAC;;IAEtC,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,IAAI,GAAGJ,WAAW,CAACE,MAAM;IAC9B,MAAMG,KAAK,GAAGX,iBAAiB,CAAC,IAAI,CAACU,IAAI,CAAC;IAC1C,MAAME,YAAY,GAAGC,eAAe,CAACV,MAAM,CAAC;IAE5C,IAAI,CAACW,QAAQ,GAAG;;UAEVH,KAAK;yBACUC,YAAY;;KAEhC;EACH;;AAGF,SAASC,eAAeA,CAACV,MAAgB;EACvC,MAAMO,IAAI,GAAGP,MAAM,CAACK,MAAM;EAC1B,IAAIE,IAAI,GAAG,CAAC,EAAE;IACZ,MAAMK,KAAK,CAAC,iBAAiBL,IAAI,uBAAuB,CAAC;;EAE3D,IAAIA,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,eAAeP,MAAM,CAAC,CAAC,CAAC,GAAG;;EAGpC,MAAMa,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EAE7E,MAAMJ,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCG,YAAY,CAACK,IAAI,CAAC,QAAQD,aAAa,CAACP,CAAC,CAAC,KAAKN,MAAM,CAACM,CAAC,CAAC,GAAG,CAAC;;EAE9D,OAAOG,YAAY,CAACM,IAAI,EAAE;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}