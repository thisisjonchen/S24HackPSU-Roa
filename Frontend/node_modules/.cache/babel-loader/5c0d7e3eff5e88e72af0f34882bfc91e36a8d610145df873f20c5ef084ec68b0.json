{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n  summary() {\n    return this.impl.summary();\n  }\n  async next() {\n    return this.impl.next();\n  }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator;\n    // A partial string at the end of an upstream chunk\n    this.carryover = '';\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      }\n      // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n    const lines = chunkResult.value.split(this.separator);\n    // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n    lines[0] = this.carryover + lines[0];\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n    this.carryover = lines[lines.length - 1];\n    return true;\n  }\n}","map":{"version":3,"names":["LazyIterator","OneToManyIterator","StringIterator","split","separator","SplitIterator","constructor","upstream","impl","SplitIteratorImpl","summary","next","carryover","pump","chunkResult","done","outputQueue","push","lines","value","line","slice","length"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-data/src/iterators/string_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {LazyIterator, OneToManyIterator} from './lazy_iterator';\n\nexport abstract class StringIterator extends LazyIterator<string> {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator: string): StringIterator {\n    return new SplitIterator(this, separator);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  private impl: SplitIteratorImpl;\n\n  constructor(protected upstream: LazyIterator<string>, separator: string) {\n    super();\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n}\n\nclass SplitIteratorImpl extends OneToManyIterator<string> {\n  // A partial string at the end of an upstream chunk\n  carryover = '';\n\n  constructor(\n      protected upstream: LazyIterator<string>, protected separator: string) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n\n  async pump(): Promise<boolean> {\n    const chunkResult = await this.upstream.next();\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      }\n\n      // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n    const lines = chunkResult.value.split(this.separator) as string[];\n    // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n\n    lines[0] = this.carryover + lines[0];\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n    this.carryover = lines[lines.length - 1];\n\n    return true;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,YAAY,EAAEC,iBAAiB,QAAO,iBAAiB;AAE/D,OAAM,MAAgBC,cAAe,SAAQF,YAAoB;EAC/D;;;;;;;;;;;;;;;;;;EAkBAG,KAAKA,CAACC,SAAiB;IACrB,OAAO,IAAIC,aAAa,CAAC,IAAI,EAAED,SAAS,CAAC;EAC3C;;AAGF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAMC,aAAc,SAAQH,cAAc;EAGxCI,YAAsBC,QAA8B,EAAEH,SAAiB;IACrE,KAAK,EAAE;IADa,KAAAG,QAAQ,GAARA,QAAQ;IAE5B,IAAI,CAACC,IAAI,GAAG,IAAIC,iBAAiB,CAACF,QAAQ,EAAEH,SAAS,CAAC;EACxD;EAEAM,OAAOA,CAAA;IACL,OAAO,IAAI,CAACF,IAAI,CAACE,OAAO,EAAE;EAC5B;EAEA,MAAMC,IAAIA,CAAA;IACR,OAAO,IAAI,CAACH,IAAI,CAACG,IAAI,EAAE;EACzB;;AAGF,MAAMF,iBAAkB,SAAQR,iBAAyB;EAIvDK,YACcC,QAA8B,EAAYH,SAAiB;IACvE,KAAK,EAAE;IADK,KAAAG,QAAQ,GAARA,QAAQ;IAAkC,KAAAH,SAAS,GAATA,SAAS;IAJjE;IACA,KAAAQ,SAAS,GAAG,EAAE;EAKd;EAEAF,OAAOA,CAAA;IACL,OAAO,GAAG,IAAI,CAACH,QAAQ,CAACG,OAAO,EAAE,cAAc,IAAI,CAACN,SAAS,IAAI;EACnE;EAEA,MAAMS,IAAIA,CAAA;IACR,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACP,QAAQ,CAACI,IAAI,EAAE;IAC9C,IAAIG,WAAW,CAACC,IAAI,EAAE;MACpB,IAAI,IAAI,CAACH,SAAS,KAAK,EAAE,EAAE;QACzB,OAAO,KAAK;;MAGd;MACA;MACA,IAAI,CAACI,WAAW,CAACC,IAAI,CAAC,IAAI,CAACL,SAAS,CAAC;MACrC,IAAI,CAACA,SAAS,GAAG,EAAE;MACnB,OAAO,IAAI;;IAEb,MAAMM,KAAK,GAAGJ,WAAW,CAACK,KAAK,CAAChB,KAAK,CAAC,IAAI,CAACC,SAAS,CAAa;IACjE;IACA;IACA;IAEAc,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAACN,SAAS,GAAGM,KAAK,CAAC,CAAC,CAAC;IACpC,KAAK,MAAME,IAAI,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;MACrC,IAAI,CAACL,WAAW,CAACC,IAAI,CAACG,IAAI,CAAC;;IAE7B,IAAI,CAACR,SAAS,GAAGM,KAAK,CAACA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;IAExC,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}