{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { reverse } from '../reverse';\nimport { scalar } from '../scalar';\nimport { slice } from '../slice';\nimport { ifft } from './ifft';\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input) {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  let ret;\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n    const realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n  ret = real(ret);\n  // reshape the result if the input is 3D tensor.\n  if (input.rank === 3 && input.shape[0] !== 0) {\n    const temp = ret;\n    const batch = input.shape[0];\n    ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n    temp.dispose();\n  }\n  return ret;\n}\nexport const irfft = /* @__PURE__ */op({\n  irfft_\n});","map":{"version":3,"names":["complex","concat","imag","mul","op","real","reshape","reverse","scalar","slice","ifft","irfft_","input","innerDimensionSize","shape","length","batch","size","ret","complexInput","outputShape","realInput","imagInput","realConjugate","imagConjugate","r","i","rank","temp","dispose","irfft"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/spectral/irfft.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '../../tensor';\nimport {complex} from '../complex';\nimport {concat} from '../concat';\nimport {imag} from '../imag';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {real} from '../real';\nimport {reshape} from '../reshape';\nimport {reverse} from '../reverse';\nimport {scalar} from '../scalar';\nimport {slice} from '../slice';\n\nimport {ifft} from './ifft';\n\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input: Tensor): Tensor {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  let ret: Tensor;\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n\n    const realConjugate =\n        reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate: Tensor2D = mul(\n        reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1),\n        scalar(-1));\n\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput =\n        reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n  ret = real(ret);\n  // reshape the result if the input is 3D tensor.\n  if (input.rank === 3 && input.shape[0] !== 0) {\n    const temp = ret;\n    const batch = input.shape[0];\n    ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n    temp.dispose();\n  }\n  return ret;\n}\n\nexport const irfft = /* @__PURE__ */ op({irfft_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,OAAO,QAAO,YAAY;AAClC,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAAO,SAAS;AAC5B,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,EAAE,QAAO,cAAc;AAC/B,SAAQC,IAAI,QAAO,SAAS;AAC5B,SAAQC,OAAO,QAAO,YAAY;AAClC,SAAQC,OAAO,QAAO,YAAY;AAClC,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,KAAK,QAAO,UAAU;AAE9B,SAAQC,IAAI,QAAO,QAAQ;AAE3B;;;;;;;;;;;;;;;;;AAiBA,SAASC,MAAMA,CAACC,KAAa;EAC3B,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,KAAK,CAACF,KAAK,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;EAC9D,MAAMC,KAAK,GAAGJ,KAAK,CAACK,IAAI,GAAGJ,kBAAkB;EAC7C,IAAIK,GAAW;EACf,IAAIL,kBAAkB,IAAI,CAAC,EAAE;IAC3B,MAAMM,YAAY,GAAGb,OAAO,CAACM,KAAK,EAAE,CAACI,KAAK,EAAEH,kBAAkB,CAAC,CAAC;IAChEK,GAAG,GAAGR,IAAI,CAACS,YAAY,CAAC;GACzB,MAAM;IACL;IACA;IACA,MAAMC,WAAW,GAAG,CAACJ,KAAK,EAAE,CAAC,IAAIH,kBAAkB,GAAG,CAAC,CAAC,CAAC;IACzD,MAAMQ,SAAS,GAAGf,OAAO,CAACD,IAAI,CAACO,KAAK,CAAC,EAAE,CAACI,KAAK,EAAEH,kBAAkB,CAAC,CAAC;IACnE,MAAMS,SAAS,GAAGhB,OAAO,CAACJ,IAAI,CAACU,KAAK,CAAC,EAAE,CAACI,KAAK,EAAEH,kBAAkB,CAAC,CAAC;IAEnE,MAAMU,aAAa,GACfhB,OAAO,CAACE,KAAK,CAACY,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAACL,KAAK,EAAEH,kBAAkB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzE,MAAMW,aAAa,GAAarB,GAAG,CAC/BI,OAAO,CAACE,KAAK,CAACa,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAACN,KAAK,EAAEH,kBAAkB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACrEL,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEf,MAAMiB,CAAC,GAAGxB,MAAM,CAAC,CAACoB,SAAS,EAAEE,aAAa,CAAC,EAAE,CAAC,CAAC;IAC/C,MAAMG,CAAC,GAAGzB,MAAM,CAAC,CAACqB,SAAS,EAAEE,aAAa,CAAC,EAAE,CAAC,CAAC;IAC/C,MAAML,YAAY,GACdb,OAAO,CAACN,OAAO,CAACyB,CAAC,EAAEC,CAAC,CAAC,EAAE,CAACN,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5DF,GAAG,GAAGR,IAAI,CAACS,YAAY,CAAC;;EAE1BD,GAAG,GAAGb,IAAI,CAACa,GAAG,CAAC;EACf;EACA,IAAIN,KAAK,CAACe,IAAI,KAAK,CAAC,IAAIf,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IAC5C,MAAMc,IAAI,GAAGV,GAAG;IAChB,MAAMF,KAAK,GAAGJ,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;IAC5BI,GAAG,GAAGZ,OAAO,CAACY,GAAG,EAAE,CAACF,KAAK,EAAEE,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC,GAAGE,KAAK,EAAEE,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/Dc,IAAI,CAACC,OAAO,EAAE;;EAEhB,OAAOX,GAAG;AACZ;AAEA,OAAO,MAAMY,KAAK,GAAG,eAAgB1B,EAAE,CAAC;EAACO;AAAM,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}