{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n  constructor() {\n    super(...arguments);\n    /** Instance of `keras.models.Model`. Reference of the model being trained. */\n    this.model = null;\n  }\n  setModel(model) {\n    if (!(model instanceof LayersModel)) {\n      throw new Error('model must be a LayersModel, not some other Container');\n    }\n    this.model = model;\n  }\n}\nfunction less(currVal, prevVal) {\n  return currVal < prevVal;\n}\nfunction greater(currVal, prevVal) {\n  return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n  constructor(args) {\n    super();\n    if (args == null) {\n      args = {};\n    }\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n    }\n    this.monitor = args.monitor || 'val_loss';\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || 'auto';\n    this.baseline = args.baseline;\n    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n      console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` + `Falling back to mode 'auto'.`);\n      this.mode = 'auto';\n    }\n    if (this.mode === 'min') {\n      this.monitorFunc = less;\n    } else if (this.mode === 'max') {\n      this.monitorFunc = greater;\n    } else {\n      // For mode === 'auto'.\n      if (this.monitor.indexOf('acc') !== -1) {\n        this.monitorFunc = greater;\n      } else {\n        this.monitorFunc = less;\n      }\n    }\n    if (this.monitorFunc === less) {\n      this.minDelta *= -1;\n    }\n  }\n  async onTrainBegin(logs) {\n    this.wait = 0;\n    this.stoppedEpoch = 0;\n    if (this.baseline != null) {\n      this.best = this.baseline;\n    } else {\n      this.best = this.monitorFunc === less ? Infinity : -Infinity;\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    await resolveScalarsInLogs(logs);\n    const current = this.getMonitorValue(logs);\n    if (current == null) {\n      return;\n    }\n    if (this.monitorFunc(current - this.minDelta, this.best)) {\n      this.best = current;\n      this.wait = 0;\n      // TODO(cais): Logic for restoreBestWeights.\n    } else {\n      this.wait++;\n      if (this.wait >= this.patience) {\n        this.stoppedEpoch = epoch;\n        this.model.stopTraining = true;\n      }\n      // TODO(cais): Logic for restoreBestWeights.\n    }\n  }\n  async onTrainEnd(logs) {\n    if (this.stoppedEpoch > 0 && this.verbose) {\n      console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n    }\n  }\n  getMonitorValue(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const monitorValue = logs[this.monitor];\n    if (monitorValue == null) {\n      console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` + `Available metrics are: ${Object.keys(logs)}`);\n    }\n    return monitorValue;\n  }\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args) {\n  return new EarlyStopping(args);\n}\nexport const callbacks = {\n  earlyStopping\n};","map":{"version":3,"names":["BaseCallback","LayersModel","NotImplementedError","resolveScalarsInLogs","Callback","constructor","model","setModel","Error","less","currVal","prevVal","greater","EarlyStopping","args","restoreBestWeights","monitor","minDelta","Math","abs","patience","verbose","mode","baseline","indexOf","console","warn","monitorFunc","onTrainBegin","logs","wait","stoppedEpoch","best","Infinity","onEpochEnd","epoch","current","getMonitorValue","stopTraining","onTrainEnd","log","monitorValue","Object","keys","earlyStopping","callbacks"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/callbacks.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {BaseCallback} from './base_callbacks';\nimport {Container} from './engine/container';\nimport {LayersModel} from './engine/training';\nimport {NotImplementedError} from './errors';\nimport {Logs, resolveScalarsInLogs} from './logs';\n\nexport abstract class Callback extends BaseCallback {\n  /** Instance of `keras.models.Model`. Reference of the model being trained. */\n  model: LayersModel = null;\n\n  override setModel(model: Container): void {\n    if (!(model instanceof LayersModel)) {\n      throw new Error('model must be a LayersModel, not some other Container');\n    }\n    this.model = model;\n  }\n}\n\nexport interface EarlyStoppingCallbackArgs {\n  /**\n   * Quantity to be monitored.\n   *\n   * Defaults to 'val_loss'.\n   */\n  monitor?: string;\n\n  /**\n   * Minimum change in the monitored quantity to qualify as improvement,\n   * i.e., an absolute change of less than `minDelta` will count as no\n   * improvement.\n   *\n   * Defaults to 0.\n   */\n  minDelta?: number;\n\n  /**\n   * Number of epochs with no improvement after which training will be stopped.\n   *\n   * Defaults to 0.\n   */\n  patience?: number;\n\n  /** Verbosity mode. */\n  verbose?: number;\n\n  /**\n   * Mode: one of 'min', 'max', and 'auto'.\n   * - In 'min' mode, training will be stopped when the quantity monitored has\n   *   stopped decreasing.\n   * - In 'max' mode, training will be stopped when the quantity monitored has\n   *   stopped increasing.\n   * - In 'auto' mode, the direction is inferred automatically from the name of\n   *   the monitored quantity.\n   *\n   * Defaults to 'auto'.\n   */\n  mode?: 'auto'|'min'|'max';\n\n  /**\n   * Baseline value of the monitored quantity.\n   *\n   * If specified, training will be stopped if the model doesn't show\n   * improvement over the baseline.\n   */\n  baseline?: number;\n\n  /**\n   * Whether to restore model weights from the epoch with the best value\n   * of the monitored quantity. If `False`, the model weights obtained at the\n   * last step of training are used.\n   *\n   * **`True` is not supported yet.**\n   */\n  restoreBestWeights?: boolean;\n}\n\nfunction less(currVal: number, prevVal: number) {\n  return currVal < prevVal;\n}\n\nfunction greater(currVal: number, prevVal: number) {\n  return currVal > prevVal;\n}\n\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n  protected readonly monitor: string;\n  protected readonly minDelta: number;\n  protected readonly patience: number;\n  protected readonly baseline: number;\n  protected readonly verbose: number;\n  protected readonly mode: 'auto'|'min'|'max';\n\n  protected monitorFunc: (currVal: number, prevVal: number) => boolean;\n\n  private wait: number;\n  private stoppedEpoch: number;\n  private best: number;\n\n  constructor(args?: EarlyStoppingCallbackArgs) {\n    super();\n    if (args == null) {\n      args = {};\n    }\n    if (args.restoreBestWeights) {\n      throw new NotImplementedError(\n          'restoreBestWeights = True is not implemented in EarlyStopping yet.');\n    }\n\n    this.monitor = args.monitor || 'val_loss';\n    this.minDelta = Math.abs(args.minDelta || 0);\n    this.patience = args.patience || 0;\n    this.verbose = args.verbose || 0;\n    this.mode = args.mode || 'auto';\n    this.baseline = args.baseline;\n\n    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n      console.warn(\n          `EarlyStopping mode '${this.mode}' is invalid. ` +\n          `Falling back to mode 'auto'.`);\n      this.mode = 'auto';\n    }\n\n    if (this.mode === 'min') {\n      this.monitorFunc = less;\n    } else if (this.mode === 'max') {\n      this.monitorFunc = greater;\n    } else {\n      // For mode === 'auto'.\n      if (this.monitor.indexOf('acc') !== -1) {\n        this.monitorFunc = greater;\n      } else {\n        this.monitorFunc = less;\n      }\n    }\n\n    if (this.monitorFunc === less) {\n      this.minDelta *= -1;\n    }\n  }\n\n  override async onTrainBegin(logs?: Logs) {\n    this.wait = 0;\n    this.stoppedEpoch = 0;\n    if (this.baseline != null) {\n      this.best = this.baseline;\n    } else {\n      this.best = this.monitorFunc === less ? Infinity : -Infinity;\n    }\n  }\n\n  override async onEpochEnd(epoch: number, logs?: Logs) {\n    await resolveScalarsInLogs(logs);\n    const current = this.getMonitorValue(logs);\n    if (current == null) {\n      return;\n    }\n\n    if (this.monitorFunc(current - this.minDelta, this.best)) {\n      this.best = current;\n      this.wait = 0;\n      // TODO(cais): Logic for restoreBestWeights.\n    } else {\n      this.wait++;\n      if (this.wait >= this.patience) {\n        this.stoppedEpoch = epoch;\n        this.model.stopTraining = true;\n      }\n      // TODO(cais): Logic for restoreBestWeights.\n    }\n  }\n\n  override async onTrainEnd(logs?: Logs) {\n    if (this.stoppedEpoch > 0 && this.verbose) {\n      console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n    }\n  }\n\n  private getMonitorValue(logs: Logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const monitorValue = logs[this.monitor];\n    if (monitorValue == null) {\n      console.warn(\n          `Metric for EarlyStopping ${this.monitor} is not available. ` +\n          `Available metrics are: ${Object.keys(logs)}`);\n    }\n    return monitorValue;\n  }\n}\n\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args?: EarlyStoppingCallbackArgs) {\n  return new EarlyStopping(args);\n}\n\nexport const callbacks = {earlyStopping};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}