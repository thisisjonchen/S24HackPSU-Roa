{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  assertNotComplex(x, 'LRN');\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n  function sumAcrossChannels(offset) {\n    const currentChannel = offset % channels;\n    let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n// tslint:disable-next-line: variable-name\nexport const LRNConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN\n};","map":{"version":3,"names":["LRN","util","assertNotComplex","lRN","args","inputs","backend","attrs","x","depthRadius","bias","alpha","beta","channels","shape","maxD","xValues","data","get","dataId","values","size","sizeFromShape","result","Float32Array","sumAcrossChannels","offset","currentChannel","beginSumOffset","Math","max","endSumOffset","min","sum","z","val","pow","makeTensorInfo","dtype","LRNConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/LRN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,GAAG,EAA+CC,IAAI,QAAO,uBAAuB;AAGtH,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,GAAGA,CACfC,IAAmE;EAErE,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,WAAW;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGL,KAAK;EAE9CL,gBAAgB,CAACM,CAAC,EAAE,KAAK,CAAC;EAE1B,MAAMK,QAAQ,GAAGL,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC;EAC3B,MAAMC,IAAI,GAAGF,QAAQ,GAAG,CAAC;EACzB,MAAMG,OAAO,GAAGV,OAAO,CAACW,IAAI,CAACC,GAAG,CAACV,CAAC,CAACW,MAAM,CAAC,CAACC,MAAoB;EAC/D,MAAMC,IAAI,GAAGpB,IAAI,CAACqB,aAAa,CAACd,CAAC,CAACM,KAAK,CAAC;EACxC,MAAMS,MAAM,GAAG,IAAIC,YAAY,CAACH,IAAI,CAAC;EAErC,SAASI,iBAAiBA,CAACC,MAAc;IACvC,MAAMC,cAAc,GAAGD,MAAM,GAAGb,QAAQ;IACxC,IAAIe,cAAc,GACdF,MAAM,GAAGC,cAAc,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,cAAc,GAAGlB,WAAW,CAAC;IACvE,MAAMsB,YAAY,GACdL,MAAM,GAAGC,cAAc,GAAGE,IAAI,CAACG,GAAG,CAACL,cAAc,GAAGlB,WAAW,EAAEM,IAAI,CAAC;IAE1E,IAAIkB,GAAG,GAAG,GAAG;IACb,OAAOL,cAAc,IAAIG,YAAY,EAAEH,cAAc,EAAE,EAAE;MACvD,MAAMM,CAAC,GAAGlB,OAAO,CAACY,cAAc,CAAC;MACjCK,GAAG,IAAIC,CAAC,GAAGA,CAAC;;IAEd,OAAOD,GAAG;EACZ;EAEA,KAAK,IAAIP,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGL,IAAI,EAAEK,MAAM,EAAE,EAAE;IAC5C,MAAMO,GAAG,GAAGR,iBAAiB,CAACC,MAAM,CAAC;IACrC,MAAMS,GAAG,GAAGnB,OAAO,CAACU,MAAM,CAAC,GAAGG,IAAI,CAACO,GAAG,CAAC1B,IAAI,GAAGC,KAAK,GAAGsB,GAAG,EAAE,CAACrB,IAAI,CAAC;IACjEW,MAAM,CAACG,MAAM,CAAC,GAAGS,GAAG;;EAGtB,OAAO7B,OAAO,CAAC+B,cAAc,CAAC7B,CAAC,CAACM,KAAK,EAAEN,CAAC,CAAC8B,KAAK,EAAEf,MAAM,CAAC;AACzD;AAEA;AACA,OAAO,MAAMgB,SAAS,GAAiB;EACrCC,UAAU,EAAExC,GAAG;EACfyC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEvC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}