{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  assertNotComplex(x, 'pad');\n  const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const start = paddings.map(p => p[0]);\n  const xVals = backend.data.get(x.dataId).values;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n  const outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2\n};","map":{"version":3,"names":["PadV2","util","assertNotComplex","padV2","args","inputs","backend","attrs","x","paddings","constantValue","outShape","map","p","i","shape","start","xVals","data","get","dataId","values","xSize","sizeFromShape","xRank","length","xStrides","computeStrides","resultSize","resultRank","resultStrides","resVals","getTypedArrayFromDType","dtype","fill","coords","indexToLoc","outCoords","c","outIndex","locToIndex","outId","write","padV2Config","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/PadV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAmDA,KAAK,EAAmDC,IAAI,QAAO,uBAAuB;AAG7I,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,KAAKA,CACjBC,IAAuE;EAEzE,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,QAAQ;IAAEC;EAAa,CAAC,GAAGH,KAAK;EAEvCL,gBAAgB,CAACM,CAAC,EAAE,KAAK,CAAC;EAE1B,MAAMG,QAAQ,GAAGF,QAAQ,CAACG,GAAG,CACzB,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBL,CAAC,CAACO,KAAK,CAACD,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;EAEtE,MAAMG,KAAK,GAAGP,QAAQ,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC;EAErC,MAAMI,KAAK,GAAGX,OAAO,CAACY,IAAI,CAACC,GAAG,CAACX,CAAC,CAACY,MAAM,CAAC,CAACC,MAAoB;EAC7D,MAAMC,KAAK,GAAGrB,IAAI,CAACsB,aAAa,CAACf,CAAC,CAACO,KAAK,CAAC;EACzC,MAAMS,KAAK,GAAGhB,CAAC,CAACO,KAAK,CAACU,MAAM;EAC5B,MAAMC,QAAQ,GAAGzB,IAAI,CAAC0B,cAAc,CAACnB,CAAC,CAACO,KAAK,CAAC;EAE7C,MAAMa,UAAU,GAAG3B,IAAI,CAACsB,aAAa,CAACZ,QAAQ,CAAC;EAC/C,MAAMkB,UAAU,GAAGlB,QAAQ,CAACc,MAAM;EAClC,MAAMK,aAAa,GAAG7B,IAAI,CAAC0B,cAAc,CAAChB,QAAQ,CAAC;EACnD,MAAMoB,OAAO,GACT9B,IAAI,CAAC+B,sBAAsB,CAACxB,CAAC,CAACyB,KAAwB,EAAEL,UAAU,CAAC;EAEvE,IAAIlB,aAAa,KAAK,CAAC,EAAE;IACvBqB,OAAO,CAACG,IAAI,CAACxB,aAAa,CAAC;;EAG7B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,KAAK,EAAER,CAAC,EAAE,EAAE;IAC9B,MAAMqB,MAAM,GAAGlC,IAAI,CAACmC,UAAU,CAACtB,CAAC,EAAEU,KAAK,EAAEE,QAAQ,CAAC;IAClD,MAAMW,SAAS,GAAGF,MAAM,CAACvB,GAAG,CAAC,CAAC0B,CAAC,EAAExB,CAAC,KAAKwB,CAAC,GAAGtB,KAAK,CAACF,CAAC,CAAC,CAAC;IACpD,MAAMyB,QAAQ,GAAGtC,IAAI,CAACuC,UAAU,CAACH,SAAS,EAAER,UAAU,EAAEC,aAAa,CAAC;IAEtEC,OAAO,CAACQ,QAAQ,CAAC,GAAGtB,KAAK,CAACH,CAAC,CAAC;;EAG9B,MAAM2B,KAAK,GAAGnC,OAAO,CAACoC,KAAK,CAACX,OAAO,EAAEpB,QAAQ,EAAEH,CAAC,CAACyB,KAAK,CAAC;EAEvD,OAAO;IAACb,MAAM,EAAEqB,KAAK;IAAE1B,KAAK,EAAEJ,QAAQ;IAAEsB,KAAK,EAAEzB,CAAC,CAACyB;EAAK,CAAC;AACzD;AAEA,OAAO,MAAMU,WAAW,GAAiB;EACvCC,UAAU,EAAE5C,KAAK;EACjB6C,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE3C;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}