{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n  util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);\n  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\nexport { nonMaxSuppSanityCheck };","map":{"version":3,"names":["util","nonMaxSuppSanityCheck","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","Number","NEGATIVE_INFINITY","numBoxes","shape","Math","min","assert","rank"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/nonmax_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma?: number): {\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n  softNmsSigma: number\n} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  util.assert(\n      0 <= softNmsSigma && softNmsSigma <= 1,\n      () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n}\n\nexport {nonMaxSuppSanityCheck};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,OAAO,KAAKA,IAAI,MAAM,SAAS;AAE/B,SAASC,qBAAqBA,CAC1BC,KAAe,EAAEC,MAAgB,EAAEC,aAAqB,EACxDC,YAAoB,EAAEC,cAAsB,EAAEC,YAAqB;EAMrE,IAAIF,YAAY,IAAI,IAAI,EAAE;IACxBA,YAAY,GAAG,GAAG;;EAEpB,IAAIC,cAAc,IAAI,IAAI,EAAE;IAC1BA,cAAc,GAAGE,MAAM,CAACC,iBAAiB;;EAE3C,IAAIF,YAAY,IAAI,IAAI,EAAE;IACxBA,YAAY,GAAG,GAAG;;EAGpB,MAAMG,QAAQ,GAAGR,KAAK,CAACS,KAAK,CAAC,CAAC,CAAC;EAC/BP,aAAa,GAAGQ,IAAI,CAACC,GAAG,CAACT,aAAa,EAAEM,QAAQ,CAAC;EAEjDV,IAAI,CAACc,MAAM,CACP,CAAC,IAAIT,YAAY,IAAIA,YAAY,IAAI,CAAC,EACtC,MAAM,4CAA4CA,YAAY,GAAG,CAAC;EACtEL,IAAI,CAACc,MAAM,CACPZ,KAAK,CAACa,IAAI,KAAK,CAAC,EAChB,MAAM,+CAA+Cb,KAAK,CAACa,IAAI,GAAG,CAAC;EACvEf,IAAI,CAACc,MAAM,CACPZ,KAAK,CAACS,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EACpB,MACI,oDAAoDT,KAAK,CAACS,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;EAC7EX,IAAI,CAACc,MAAM,CAACX,MAAM,CAACY,IAAI,KAAK,CAAC,EAAE,MAAM,4BAA4B,CAAC;EAClEf,IAAI,CAACc,MAAM,CACPX,MAAM,CAACQ,KAAK,CAAC,CAAC,CAAC,KAAKD,QAAQ,EAC5B,MAAM,sDAAsDA,QAAQ,IAAI,GACpE,WAAWP,MAAM,CAACQ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;EACrCX,IAAI,CAACc,MAAM,CACP,CAAC,IAAIP,YAAY,IAAIA,YAAY,IAAI,CAAC,EACtC,MAAM,4CAA4CA,YAAY,GAAG,CAAC;EACtE,OAAO;IAACH,aAAa;IAAEC,YAAY;IAAEC,cAAc;IAAEC;EAAY,CAAC;AACpE;AAEA,SAAQN,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}