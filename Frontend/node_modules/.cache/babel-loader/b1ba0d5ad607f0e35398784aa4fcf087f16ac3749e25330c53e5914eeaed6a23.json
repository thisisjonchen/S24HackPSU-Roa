{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack conv2dTranspose op. */\nENV.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n  return -1;\n}, threshold => {\n  if (!(typeof threshold === 'number')) {\n    throw new Error('WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but ' + `got ${threshold}.`);\n  }\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n  return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n  if (!(typeof threshold === 'number')) {\n    throw new Error('WEBGL_FLUSH_THRESHOLD must be a number but got ' + `${threshold}.`);\n  }\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` + `manual flush) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);","map":{"version":3,"names":["device_util","env","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","getWebGLMaxTextureSize","isCapableOfRenderingToFloatTexture","isDownloadFloatTextureEnabled","isWebGLFenceEnabled","isWebGLVersionEnabled","ENV","registerFlag","getNumber","get","getBool","webGLVersion","isMobile","useUniforms","threshold","Error","Infinity"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/flags_webgl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack conv2dTranspose op. */\nENV.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but ' +\n            `got ${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_FLUSH_THRESHOLD must be a number but got ' +\n            `${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}