{"ast":null,"code":"import { computeStrides, sizeFromShape } from '../util';\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor, indices) {\n  const tensorRank = tensor.shape.length;\n  const indicesRank = indices.shape.length;\n  if (tensorRank < 1) {\n    throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' + ` but the rank was ${tensorRank}.`);\n  }\n  if (indicesRank < 1) {\n    throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' + ` but the rank was ${indicesRank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error('tf.gatherND() expects the indices to be int32 type,' + ` but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indicesRank - 1] > tensorRank) {\n    throw new Error('index innermost dimension length must be <= tensor rank; saw: ' + `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n  }\n  if (sizeFromShape(tensor.shape) === 0) {\n    throw new Error('Requested more than 0 entries, but input is empty.' + ` Input shape: ${tensor.shape}.`);\n  }\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  // The result shape is\n  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n  const inputShape = tensor.shape;\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensorRank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n  const strides = [...computeStrides(tensor.shape).map(stride => stride / sliceSize), 1].slice(0, sliceRank);\n  return [resultShape, nResult, sliceSize, strides];\n}","map":{"version":3,"names":["computeStrides","sizeFromShape","prepareAndValidate","tensor","indices","tensorRank","shape","length","indicesRank","Error","dtype","indicesShape","sliceRank","nResult","i","inputShape","resultShape","slice","pop","sliceSize","push","strides","map","stride"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/gather_nd_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorInfo } from '../tensor_info';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor: TensorInfo, indices: TensorInfo):\n    [number[], number, number, number[]] {\n  const tensorRank = tensor.shape.length;\n  const indicesRank = indices.shape.length;\n  if (tensorRank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the input to be rank 1 or higher,' +\n        ` but the rank was ${tensorRank}.`);\n  }\n  if (indicesRank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indicesRank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(\n        'tf.gatherND() expects the indices to be int32 type,' +\n        ` but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indicesRank - 1] > tensorRank) {\n    throw new Error(\n        'index innermost dimension length must be <= tensor rank; saw: ' +\n        `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n  }\n\n  if (sizeFromShape(tensor.shape) === 0) {\n    throw new Error(\n        'Requested more than 0 entries, but input is empty.' +\n        ` Input shape: ${tensor.shape}.`);\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  // The result shape is\n  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n\n  const inputShape = tensor.shape;\n\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensorRank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n\n  const strides =\n      [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n       1].slice(0, sliceRank);\n\n  return [resultShape, nResult, sliceSize, strides];\n}\n"],"mappings":"AAiBA,SAAQA,cAAc,EAAEC,aAAa,QAAO,SAAS;AAErD;;;;;;;;AAQA,OAAM,SAAUC,kBAAkBA,CAACC,MAAkB,EAAEC,OAAmB;EAExE,MAAMC,UAAU,GAAGF,MAAM,CAACG,KAAK,CAACC,MAAM;EACtC,MAAMC,WAAW,GAAGJ,OAAO,CAACE,KAAK,CAACC,MAAM;EACxC,IAAIF,UAAU,GAAG,CAAC,EAAE;IAClB,MAAM,IAAII,KAAK,CACX,yDAAyD,GACzD,qBAAqBJ,UAAU,GAAG,CAAC;;EAEzC,IAAIG,WAAW,GAAG,CAAC,EAAE;IACnB,MAAM,IAAIC,KAAK,CACX,2DAA2D,GAC3D,qBAAqBD,WAAW,GAAG,CAAC;;EAE1C,IAAIJ,OAAO,CAACM,KAAK,KAAK,OAAO,EAAE;IAC7B,MAAM,IAAID,KAAK,CACX,qDAAqD,GACrD,sBAAsBL,OAAO,CAACM,KAAK,GAAG,CAAC;;EAE7C,IAAIN,OAAO,CAACE,KAAK,CAACE,WAAW,GAAG,CAAC,CAAC,GAAGH,UAAU,EAAE;IAC/C,MAAM,IAAII,KAAK,CACX,gEAAgE,GAChE,GAAGL,OAAO,CAACE,KAAK,CAACE,WAAW,GAAG,CAAC,CAAC,QAAQH,UAAU,EAAE,CAAC;;EAG5D,IAAIJ,aAAa,CAACE,MAAM,CAACG,KAAK,CAAC,KAAK,CAAC,EAAE;IACrC,MAAM,IAAIG,KAAK,CACX,oDAAoD,GACpD,iBAAiBN,MAAM,CAACG,KAAK,GAAG,CAAC;;EAGvC,MAAMK,YAAY,GAAGP,OAAO,CAACE,KAAK;EAClC,MAAMM,SAAS,GAAGD,YAAY,CAACA,YAAY,CAACJ,MAAM,GAAG,CAAC,CAAC;EAEvD;EACA;EACA,IAAIM,OAAO,GAAG,CAAC;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACJ,MAAM,GAAG,CAAC,EAAE,EAAEO,CAAC,EAAE;IAChDD,OAAO,IAAIF,YAAY,CAACG,CAAC,CAAC;;EAG5B,MAAMC,UAAU,GAAGZ,MAAM,CAACG,KAAK;EAE/B,MAAMU,WAAW,GAAGL,YAAY,CAACM,KAAK,EAAE;EACxCD,WAAW,CAACE,GAAG,EAAE;EAEjB,IAAIC,SAAS,GAAG,CAAC;EACjB,KAAK,IAAIL,CAAC,GAAGF,SAAS,EAAEE,CAAC,GAAGT,UAAU,EAAE,EAAES,CAAC,EAAE;IAC3CK,SAAS,IAAIJ,UAAU,CAACD,CAAC,CAAC;IAC1BE,WAAW,CAACI,IAAI,CAACL,UAAU,CAACD,CAAC,CAAC,CAAC;;EAGjC,MAAMO,OAAO,GACT,CAAC,GAAGrB,cAAc,CAACG,MAAM,CAACG,KAAK,CAAC,CAACgB,GAAG,CAACC,MAAM,IAAIA,MAAM,GAAGJ,SAAS,CAAC,EACjE,CAAC,CAAC,CAACF,KAAK,CAAC,CAAC,EAAEL,SAAS,CAAC;EAE3B,OAAO,CAACI,WAAW,EAAEH,OAAO,EAAEM,SAAS,EAAEE,OAAO,CAAC;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}