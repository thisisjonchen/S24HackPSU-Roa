{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    pad,\n    strides,\n    inputShape\n  } = attrs;\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2\n};","map":{"version":3,"names":["backend_util","Conv3DBackpropInputV2","TensorBuffer","util","assertNotComplex","conv3DBackpropInputV2","args","inputs","backend","attrs","dy","filter","pad","strides","inputShape","dyStrides","computeStrides","shape","filterStrides","convInfo","computeConv3DInfo","dx","inShape","dxValues","values","dxS0","dxS1","dxS2","dxS3","dyValues","data","get","dataId","dyS0","dyS1","dyS2","dyS3","fltValues","fltS0","fltS1","fltS2","fltS3","batchSize","filterDepth","filterHeight","filterWidth","inChannels","inDepth","inHeight","inWidth","outChannels","outDepth","outHeight","outWidth","strideDepth","strideHeight","strideWidth","frontPad","padInfo","front","topPad","top","leftPad","left","b","d1","xF","xFCorner","xFMin","Math","max","ceil","yFMax","min","xR","xRCorner","xRMin","yRMax","xC","xCCorner","xCMin","yCMax","dotProd","yF","wF","yR","wR","yC","wC","dyOffset","fltOffset","d2","pixel","weight","makeTensorInfo","dtype","conv3DBackpropInputV2Config","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}