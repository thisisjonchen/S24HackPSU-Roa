{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId);\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values);\n      const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: finalShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"names":["buffer","slice_util","StridedSlice","util","stridedSliceImplCPU","StridedSliceProgram","reshape","slice","stridedSlice","args","inputs","backend","attrs","x","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$begin","$end","$strides","sliceInfo","shape","result","assert","length","size","computeOutShape","sliced","disposeIntermediateTensorInfo","shouldExecuteOnCPU","values","readSync","dataId","xBuf","dtype","resultValues","makeTensorInfo","program","runWebGLProgram","resultReshaped","stridedSliceConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/StridedSlice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}