{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n  getPadWidth(nGramWidth) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n  getNumNGrams(length, nGramWidth) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n  }\n  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n      let nextNGramIndex = 0;\n      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  compute(data, splits) {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && splits[i] <= inputDataSize;\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n      }\n    }\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach(nGramWidth => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n    const nGrams = new Array(nGramsSplits[numBatchItems]);\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach(nGramWidth => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}","map":{"version":3,"names":["util","StringNGramsOp","constructor","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","Math","min","getNumNGrams","length","max","createNGrams","data","splitIndex","output","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","numSeparators","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","forEach","value","compute","splits","inputDataSize","splitsSize","prevSplit","Error","i","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","Array","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,QAAO,uBAAuB;AAE1C;;;;;;AAMA,MAAMC,cAAc;EAQlBC,YACIC,SAAiB,EAAEC,WAAqB,EAAEC,OAAe,EACzDC,QAAgB,EAAEC,QAAgB,EAAEC,sBAA+B;IACrE,IAAI,CAACL,SAAS,GAAGH,IAAI,CAACS,YAAY,CAACN,SAAS,CAAC;IAC7C,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,OAAO,GAAGL,IAAI,CAACS,YAAY,CAACJ,OAAO,CAAC;IACzC,IAAI,CAACC,QAAQ,GAAGN,IAAI,CAACS,YAAY,CAACH,QAAQ,CAAC;IAC3C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,aAAa,GAAGF,sBAAsB;EAC7C;EAEQG,WAAWA,CAACC,UAAkB;IACpC;IACA;IACA;IACA,OAAOC,IAAI,CAACC,GAAG,CACX,IAAI,CAACP,QAAQ,GAAG,CAAC,GAAGK,UAAU,GAAG,CAAC,GAAG,IAAI,CAACL,QAAQ,EAAEK,UAAU,GAAG,CAAC,CAAC;EACzE;EAEQG,YAAYA,CAACC,MAAc,EAAEJ,UAAkB;IACrD,MAAML,QAAQ,GAAG,IAAI,CAACI,WAAW,CAACC,UAAU,CAAC;IAC7C,OAAOC,IAAI,CAACI,GAAG,CAAC,CAAC,EAAID,MAAM,GAAG,CAAC,GAAGT,QAAQ,GAAIK,UAAU,GAAI,CAAC,CAAC;EAChE;EAEQM,YAAYA,CAChBC,IAAkB,EAAEC,UAAkB,EAAEC,MAAoB,EAC5DC,gBAAwB,EAAEC,SAAiB,EAAEX,UAAkB;IACjE,KAAK,IAAIY,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGD,SAAS,EAAE,EAAEC,UAAU,EAAE;MAC7D,MAAMjB,QAAQ,GAAG,IAAI,CAACI,WAAW,CAACC,UAAU,CAAC;MAC7C,MAAMa,WAAW,GAAGZ,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEV,QAAQ,GAAGiB,UAAU,CAAC;MACtD,MAAME,YAAY,GACdb,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEV,QAAQ,IAAIgB,SAAS,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;MAC1D,MAAMG,SAAS,GAAGf,UAAU,IAAIa,WAAW,GAAGC,YAAY,CAAC;MAC3D,MAAME,cAAc,GAChBR,UAAU,IAAIK,WAAW,GAAG,CAAC,GAAG,CAAC,GAAGD,UAAU,GAAGjB,QAAQ,CAAC;MAE9D;MACA;MACA,IAAIsB,SAAS,GAAG,CAAC;MACjB;MACAA,SAAS,IAAIJ,WAAW,GAAG,IAAI,CAACpB,OAAO,CAACW,MAAM;MAC9C;MACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAE,EAAEG,CAAC,EAAE;QAClCD,SAAS,IAAIV,IAAI,CAACS,cAAc,GAAGE,CAAC,CAAC,CAACd,MAAM;;MAE9C;MACAa,SAAS,IAAIH,YAAY,GAAG,IAAI,CAACpB,QAAQ,CAACU,MAAM;MAChD;MACA,MAAMe,aAAa,GAAGN,WAAW,GAAGC,YAAY,GAAGC,SAAS,GAAG,CAAC;MAChEE,SAAS,IAAIE,aAAa,GAAG,IAAI,CAAC5B,SAAS,CAACa,MAAM;MAElD;MACAK,MAAM,CAACC,gBAAgB,GAAGE,UAAU,CAAC,GAAG,IAAIQ,UAAU,CAACH,SAAS,CAAC;MACjE,MAAMI,KAAK,GAAGZ,MAAM,CAACC,gBAAgB,GAAGE,UAAU,CAAC;MAEnD,IAAIU,cAAc,GAAG,CAAC;MACtB,MAAMC,aAAa,GAAIC,GAAe,IAClCA,GAAG,CAACC,OAAO,CAAEC,KAAK,IAAKL,KAAK,CAACC,cAAc,EAAE,CAAC,GAAGI,KAAK,CAAC;MAE3D,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,WAAW,EAAE,EAAEK,CAAC,EAAE;QACpCK,aAAa,CAAC,IAAI,CAAC9B,OAAO,CAAC;QAC3B8B,aAAa,CAAC,IAAI,CAAChC,SAAS,CAAC;;MAE/B;MACA,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,GAAG,CAAC,EAAE,EAAEG,CAAC,EAAE;QACtCK,aAAa,CAAChB,IAAI,CAACS,cAAc,GAAGE,CAAC,CAAC,CAAC;QACvCK,aAAa,CAAC,IAAI,CAAChC,SAAS,CAAC;;MAE/B;MACA;MACA,IAAIwB,SAAS,GAAG,CAAC,EAAE;QACjB;QACA;QACA;QACAQ,aAAa,CAAChB,IAAI,CAACS,cAAc,GAAGD,SAAS,GAAG,CAAC,CAAC,CAAC;QACnD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,YAAY,EAAE,EAAEI,CAAC,EAAE;UACrCK,aAAa,CAAC,IAAI,CAAChC,SAAS,CAAC;UAC7BgC,aAAa,CAAC,IAAI,CAAC7B,QAAQ,CAAC;;OAE/B,MAAM;QACL;QACA;QACA;QACA;QACA,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,YAAY,GAAG,CAAC,EAAE,EAAEI,CAAC,EAAE;UACzCK,aAAa,CAAC,IAAI,CAAC7B,QAAQ,CAAC;UAC5B6B,aAAa,CAAC,IAAI,CAAChC,SAAS,CAAC;;QAE/BgC,aAAa,CAAC,IAAI,CAAC7B,QAAQ,CAAC;;;EAGlC;EAEA;EACA;EACA;EACOiC,OAAOA,CAACpB,IAAkB,EAAEqB,MAAkB;IAEnD;IACA;IACA,MAAMC,aAAa,GAAGtB,IAAI,CAACH,MAAM;IACjC,MAAM0B,UAAU,GAAGF,MAAM,CAACxB,MAAM;IAChC,IAAI0B,UAAU,GAAG,CAAC,EAAE;MAClB,IAAIC,SAAS,GAAGH,MAAM,CAAC,CAAC,CAAC;MACzB,IAAIG,SAAS,KAAK,CAAC,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,oCAAoCD,SAAS,EAAE,CAAC;;MAElE,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,EAAE,EAAEG,CAAC,EAAE;QACnC,IAAIC,WAAW,GAAGN,MAAM,CAACK,CAAC,CAAC,IAAIF,SAAS;QACxCG,WAAW,GAAGA,WAAW,IAAKN,MAAM,CAACK,CAAC,CAAC,IAAIJ,aAAc;QACzD,IAAI,CAACK,WAAW,EAAE;UAChB,MAAM,IAAIF,KAAK,CAAC,uBAAuBJ,MAAM,CAACK,CAAC,CAAC,iBAC5CF,SAAS,KAAKF,aAAa,GAAG,CAAC;;QAErCE,SAAS,GAAGH,MAAM,CAACK,CAAC,CAAC;;MAEvB,IAAIF,SAAS,KAAKF,aAAa,EAAE;QAC/B,MAAM,IAAIG,KAAK,CAAC,gDACZH,aAAa,SAASE,SAAS,EAAE,CAAC;;;IAI1C,MAAMI,aAAa,GAAGL,UAAU,GAAG,CAAC;IACpC,MAAMM,YAAY,GAAGhD,IAAI,CAACiD,iBAAiB,CAAC,OAAO,EAAEP,UAAU,CAAC;IAChE;IACA,IAAID,aAAa,KAAK,CAAC,IAAIC,UAAU,KAAK,CAAC,EAAE;MAC3C,MAAMQ,KAAK,GAAiB,IAAIC,KAAK,CAACV,aAAa,CAAC;MACpD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,aAAa,EAAE,EAAEF,CAAC,EAAE;QACvCG,YAAY,CAACH,CAAC,CAAC,GAAG,CAAC;;MAErB,OAAO,CAACK,KAAK,EAAEF,YAAY,CAAC;;IAG9BA,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC;IACnB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,aAAa,EAAE,EAAEF,CAAC,EAAE;MACvC,MAAM7B,MAAM,GAAGwB,MAAM,CAACK,CAAC,CAAC,GAAGL,MAAM,CAACK,CAAC,GAAG,CAAC,CAAC;MACxC,IAAItB,SAAS,GAAG,CAAC;MACjB,IAAI,CAACnB,WAAW,CAACiC,OAAO,CAAEzB,UAAU,IAAI;QACtCW,SAAS,IAAI,IAAI,CAACR,YAAY,CAACC,MAAM,EAAEJ,UAAU,CAAC;MACpD,CAAC,CAAC;MACF,IAAI,IAAI,CAACF,aAAa,IAAIM,MAAM,GAAG,CAAC,IAAIO,SAAS,KAAK,CAAC,EAAE;QACvDA,SAAS,GAAG,CAAC;;MAEfyB,YAAY,CAACH,CAAC,CAAC,GAAGG,YAAY,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGtB,SAAS;;IAGnD,MAAM6B,MAAM,GAAiB,IAAID,KAAK,CAACH,YAAY,CAACD,aAAa,CAAC,CAAC;IAEnE,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,aAAa,EAAE,EAAEF,CAAC,EAAE;MACtC,MAAMzB,UAAU,GAAGoB,MAAM,CAACK,CAAC,CAAC;MAC5B,IAAIQ,cAAc,GAAGL,YAAY,CAACH,CAAC,CAAC;MACpC,IAAI,CAACzC,WAAW,CAACiC,OAAO,CAAEzB,UAAU,IAAI;QACtC,MAAMI,MAAM,GAAGwB,MAAM,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGL,MAAM,CAACK,CAAC,CAAC;QACxC,MAAMtB,SAAS,GAAG,IAAI,CAACR,YAAY,CAACC,MAAM,EAAEJ,UAAU,CAAC;QACvD,IAAI,CAACM,YAAY,CACbC,IAAI,EAAEC,UAAU,EAAEgC,MAAM,EAAEC,cAAc,EAAE9B,SAAS,EAAEX,UAAU,CAAC;QACpEyC,cAAc,IAAI9B,SAAS;MAC7B,CAAC,CAAC;MACF;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACb,aAAa,IAAI2C,cAAc,KAAKL,YAAY,CAACH,CAAC,CAAC,EAAE;QAC5D,MAAMS,UAAU,GAAGd,MAAM,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGL,MAAM,CAACK,CAAC,CAAC;QAC5C;QACA;QACA,IAAIS,UAAU,KAAK,CAAC,EAAE;UACpB;;QAEF;QACA;QACA;QACA,MAAM1C,UAAU,GAAG0C,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC/C,QAAQ;QACjD,MAAMgB,SAAS,GAAG,CAAC;QACnB,IAAI,CAACL,YAAY,CACbC,IAAI,EAAEC,UAAU,EAAEgC,MAAM,EAAEC,cAAc,EAAE9B,SAAS,EAAEX,UAAU,CAAC;;;IAGxE,OAAO,CAACwC,MAAM,EAAEJ,YAAY,CAAC;EAC/B;;AAGF,OAAM,SAAUO,gBAAgBA,CAC5BpC,IAAkB,EAAEqC,UAAsB,EAAErD,SAAiB,EAC7DC,WAAqB,EAAEC,OAAe,EAAEC,QAAgB,EAAEC,QAAgB,EAC1EC,sBAA+B;EACjC,OAAO,IAAIP,cAAc,CACdE,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EACnDC,sBAAsB,CAAC,CAC7B+B,OAAO,CAACpB,IAAI,EAAEqC,UAAU,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}