{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n  const minusOne = util.createScalarValue(-1, xDtype);\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'neg');\n  const xVals = backend.data.get(x.dataId).values;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg\n};","map":{"version":3,"names":["Neg","util","assertNotComplex","multiplyImpl","negImpl","xVals","xShape","xDtype","minusOne","createScalarValue","neg","args","inputs","backend","x","data","get","dataId","values","res","newShape","shape","dtype","makeTensorInfo","negConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Neg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA4CA,GAAG,EAAuCC,IAAI,QAAO,uBAAuB;AAGxH,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,YAAY,QAAO,YAAY;AAEvC,OAAM,SAAUC,OAAOA,CAACC,KAAiB,EAAEC,MAAgB,EAAEC,MAAgB;EAE3E,MAAMC,QAAQ,GACVP,IAAI,CAACQ,iBAAiB,CAAC,CAAC,CAAyB,EAAEF,MAAM,CAAe;EAC5E,OAAOJ,YAAY,CAAC,EAAE,EAAEG,MAAM,EAAEE,QAAQ,EAAEH,KAAK,EAAEE,MAAM,CAAC;AAC1D;AAEA,OAAM,SAAUG,GAAGA,CAACC,IAAoD;EAEtE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElBV,gBAAgB,CAACY,CAAC,EAAE,KAAK,CAAC;EAE1B,MAAMT,KAAK,GAAGQ,OAAO,CAACE,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,MAAoB;EAC7D,MAAM,CAACC,GAAG,EAAEC,QAAQ,CAAC,GAAGhB,OAAO,CAACC,KAAK,EAAES,CAAC,CAACO,KAAK,EAAEP,CAAC,CAACQ,KAAK,CAAC;EAExD,OAAOT,OAAO,CAACU,cAAc,CAACH,QAAQ,EAAEN,CAAC,CAACQ,KAAK,EAAEH,GAAG,CAAC;AACvD;AAEA,OAAO,MAAMK,SAAS,GAAiB;EACrCC,UAAU,EAAEzB,GAAG;EACf0B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEjB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}