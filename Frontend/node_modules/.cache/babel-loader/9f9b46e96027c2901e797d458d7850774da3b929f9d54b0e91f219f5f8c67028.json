{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Abs, ComplexAbs } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_(x) {\n  const $x = convertToTensor(x, 'x', 'abs');\n  if ($x.dtype === 'complex64') {\n    const inputs = {\n      x: $x\n    };\n    return ENGINE.runKernel(ComplexAbs, inputs);\n  } else {\n    const inputs = {\n      x: $x\n    };\n    return ENGINE.runKernel(Abs, inputs);\n  }\n}\nexport const abs = /* @__PURE__ */op({\n  abs_\n});","map":{"version":3,"names":["ENGINE","Abs","ComplexAbs","convertToTensor","op","abs_","x","$x","dtype","inputs","runKernel","abs"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/abs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Abs, AbsInputs, ComplexAbs, ComplexAbsInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'abs');\n\n  if ($x.dtype === 'complex64') {\n    const inputs: ComplexAbsInputs = {x: $x};\n    return ENGINE.runKernel(ComplexAbs, inputs as unknown as NamedTensorMap);\n  } else {\n    const inputs: AbsInputs = {x: $x};\n    return ENGINE.runKernel(Abs, inputs as unknown as NamedTensorMap);\n  }\n}\n\nexport const abs = /* @__PURE__ */ op({abs_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,GAAG,EAAaC,UAAU,QAAyB,iBAAiB;AAG5E,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;AAYA,SAASC,IAAIA,CAAmBC,CAAe;EAC7C,MAAMC,EAAE,GAAGJ,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;EAEzC,IAAIC,EAAE,CAACC,KAAK,KAAK,WAAW,EAAE;IAC5B,MAAMC,MAAM,GAAqB;MAACH,CAAC,EAAEC;IAAE,CAAC;IACxC,OAAOP,MAAM,CAACU,SAAS,CAACR,UAAU,EAAEO,MAAmC,CAAC;GACzE,MAAM;IACL,MAAMA,MAAM,GAAc;MAACH,CAAC,EAAEC;IAAE,CAAC;IACjC,OAAOP,MAAM,CAACU,SAAS,CAACT,GAAG,EAAEQ,MAAmC,CAAC;;AAErE;AAEA,OAAO,MAAME,GAAG,GAAG,eAAgBP,EAAE,CAAC;EAACC;AAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}