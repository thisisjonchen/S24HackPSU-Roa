{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { stridedSlice } from '../../ops/ops';\nimport { getGlobalTensorClass } from '../../tensor';\ngetGlobalTensorClass().prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n  this.throwIfDisposed();\n  return stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n};","map":{"version":3,"names":["stridedSlice","getGlobalTensorClass","prototype","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","throwIfDisposed"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/public/chained_ops/strided_slice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {stridedSlice} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    stridedSlice<T extends Tensor>(\n        this: Tensor, begin: number[], end: number[], strides: number[],\n        beginMask?: number, endMask?: number, ellipsisMask?: number,\n        newAxisMask?: number, shrinkAxisMask?: number): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.stridedSlice = function<T extends Tensor>(\n    this: Tensor, begin: number[], end: number[], strides: number[],\n    beginMask?: number, endMask?: number, ellipsisMask?: number,\n    newAxisMask?: number, shrinkAxisMask?: number): T {\n  this.throwIfDisposed();\n  return stridedSlice(\n             this, begin, end, strides, beginMask, endMask, ellipsisMask,\n             newAxisMask, shrinkAxisMask) as T;\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AACA,SAAQA,YAAY,QAAO,eAAe;AAC1C,SAAQC,oBAAoB,QAAe,cAAc;AAYzDA,oBAAoB,EAAE,CAACC,SAAS,CAACF,YAAY,GAAG,UAC9BG,KAAe,EAAEC,GAAa,EAAEC,OAAiB,EAC/DC,SAAkB,EAAEC,OAAgB,EAAEC,YAAqB,EAC3DC,WAAoB,EAAEC,cAAuB;EAC/C,IAAI,CAACC,eAAe,EAAE;EACtB,OAAOX,YAAY,CACR,IAAI,EAAEG,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAEC,YAAY,EAC3DC,WAAW,EAAEC,cAAc,CAAM;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}