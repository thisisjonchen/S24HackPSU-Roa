{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImpl } from './SparseSegmentReduction_impl';\nexport function sparseSegmentSum(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n  const $data = backend.data.get(data.dataId).values;\n  const $indices = backend.data.get(indices.dataId).values;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values;\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum\n};","map":{"version":3,"names":["SparseSegmentSum","sparseSegmentReductionImpl","sparseSegmentSum","args","inputs","backend","data","indices","segmentIds","shape","length","Error","$data","get","dataId","values","$indices","$segmentIds","outputData","outputDataShape","dtype","makeTensorInfo","sparseSegmentSumConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,gBAAgB,QAAuD,uBAAuB;AAIpH,SAAQC,0BAA0B,QAAO,+BAA+B;AAExE,OAAM,SAAUC,gBAAgBA,CAC5BC,IAA+D;EAEjE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,IAAI;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAGJ,MAAM;EAC1C,IAAIE,IAAI,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,CACX,2DAA2D,CAAC;;EAElE,IAAIJ,OAAO,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC;WACTJ,OAAO,CAACE,KAAK,EAAE,CAAC;;EAEzB,IAAID,UAAU,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC;WACTH,UAAU,CAACC,KAAK,EAAE,CAAC;;EAE5B,IAAIF,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC,KAAKD,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC5C,MAAM,IAAIE,KAAK,CAAC,+CAA+C,CAAC;;EAGlE,MAAMC,KAAK,GAAGP,OAAO,CAACC,IAAI,CAACO,GAAG,CAACP,IAAI,CAACQ,MAAM,CAAC,CAACC,MAAoB;EAChE,MAAMC,QAAQ,GAAGX,OAAO,CAACC,IAAI,CAACO,GAAG,CAACN,OAAO,CAACO,MAAM,CAAC,CAACC,MAAoB;EACtE,MAAME,WAAW,GAAGZ,OAAO,CAACC,IAAI,CAACO,GAAG,CAACL,UAAU,CAACM,MAAM,CAAC,CAACC,MAAoB;EAE5E,MAAM,CAACG,UAAU,EAAEC,eAAe,CAAC,GAAGlB,0BAA0B,CAC5DW,KAAK,EAAEN,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACc,KAAK,EAAEJ,QAAQ,EAAEC,WAAW,CAAC;EACzD,OAAOZ,OAAO,CAACgB,cAAc,CAACF,eAAe,EAAEb,IAAI,CAACc,KAAK,EAAEF,UAAU,CAAC;AACxE;AAEA,OAAO,MAAMI,sBAAsB,GAAiB;EAClDC,UAAU,EAAEvB,gBAAgB;EAC5BwB,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEvB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}