{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n  function toListOrNull(x) {\n    if (x == null || Array.isArray(x)) {\n      return x;\n    } else {\n      return [x];\n    }\n  }\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n  return {\n    inputs,\n    initialState,\n    constants\n  };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n    if (constants != null) {\n      throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');\n    }\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');\n    }\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n    const perStepOutputs = [];\n    let lastOutput;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks;\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = tfc.add(tfc.mul(stepOutputs[0], stepMask), tfc.mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return tfc.add(tfc.mul(stepOutputs[1][i], stepMask), tfc.mul(state, negStepMask));\n          });\n          return {\n            output,\n            newStates\n          };\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states];\n  });\n}\nclass RNN extends Layer {\n  constructor(args) {\n    super(args);\n    let cell;\n    if (args.cell == null) {\n      throw new ValueError('cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({\n        cells: args.cell\n      });\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences = args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n    this.keptStates = [];\n  }\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states) {\n    this.states_ = states;\n  }\n  computeOutputShape(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n    inputShape = inputShape;\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape;\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n    if (this.returnState) {\n      const stateShape = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n  computeMask(inputs, mask) {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n  set states(s) {\n    this.states_ = s;\n  }\n  build(inputShape) {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n    }\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n    inputShape = inputShape;\n    const batchSize = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({\n      shape: [batchSize, null, ...inputDim]\n    });\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n    // Set or validate stateSpec.\n    let stateSize;\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {\n        throw new ValueError(`An initialState was passed that is not compatible with ` + `cell.stateSize. Received stateSpec=${this.stateSpec}; ` + `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec = stateSize.map(dim => new InputSpec({\n        shape: [null, dim]\n      }));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  resetStates(states, training = false) {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);\n        }\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n  apply(inputs, kwargs) {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState = kwargs == null ? null : kwargs['initialState'];\n    let constants = kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n    const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n    let additionalInputs = [];\n    let additionalSpecs = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({\n          shape: state.shape\n        }));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n  // tslint:disable-next-line:no-any\n  call(inputs, kwargs) {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState = kwargs == null ? null : kwargs['initialState'];\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ` + `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n      const cellCallKwargs = {\n        training\n      };\n      // TODO(cais): Add support for constants.\n      const step = (inputs, states) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs = this.cell.call([inputs].concat(states), cellCallKwargs);\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)];\n      };\n      // TODO(cais): Add support for constants.\n      const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n      const output = this.returnSequences ? outputs : lastOutput;\n      // TODO(cais): Porperty set learning phase flag.\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n  getInitialState(inputs) {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState); // [Samples, 1].\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ? [K.tile(initialState, [1, this.cell.stateSize])] : [initialState];\n      }\n    });\n  }\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n  get nonTrainableWeights() {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n  setFastWeightInitDuringBuild(value) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll\n    };\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n    const cellConfig = this.cell.getConfig();\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig\n      };\n    }\n    // this order is necessary, to prevent cell name from replacing layer name\n    return Object.assign(Object.assign(Object.assign({}, cellConfig), baseConfig), config);\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config, customObjects = {}) {\n    const cellConfig = config['cell'];\n    const cell = deserialize(cellConfig, customObjects);\n    return new cls(Object.assign(config, {\n      cell\n    }));\n  }\n}\n/** @nocollapse */\nRNN.className = 'RNN';\nexport { RNN };\nserialization.registerClass(RNN);\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport class RNNCell extends Layer {}\nclass SimpleRNNCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      if (inputs.length !== 2) {\n        throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(prevOutput),\n          rate: this.recurrentDropout,\n          training,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      let h;\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout\n    };\n    return Object.assign(Object.assign({}, baseConfig), config);\n  }\n}\n/** @nocollapse */\nSimpleRNNCell.className = 'SimpleRNNCell';\nexport { SimpleRNNCell };\nserialization.registerClass(SimpleRNNCell);\nclass SimpleRNN extends RNN {\n  constructor(args) {\n    args.cell = new SimpleRNNCell(args);\n    super(args);\n    // TODO(cais): Add activityRegularizer.\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n}\n/** @nocollapse */\nSimpleRNN.className = 'SimpleRNN';\nexport { SimpleRNN };\nserialization.registerClass(SimpleRNN);\nclass GRUCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    if (args.resetAfter) {\n      throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      if (inputs.length !== 2) {\n        throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1]; // Previous memory state.\n      inputs = inputs[0];\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 3,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 3,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      let z;\n      let r;\n      let hh;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] = tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n      const h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n    return Object.assign(Object.assign({}, baseConfig), config);\n  }\n}\n/** @nocollapse */\nGRUCell.className = 'GRUCell';\nexport { GRUCell };\nserialization.registerClass(GRUCell);\nclass GRU extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args);\n    // TODO(cais): Add activityRegularizer.\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\n/** @nocollapse */\nGRU.className = 'GRU';\nexport { GRU };\nserialization.registerClass(GRU);\nclass LSTMCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n  build(inputShape) {\n    var _a;\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    let biasInitializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = new Ones().apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        }, /** @nocollapse */\n        _a.className = 'CustomInit', _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs;\n      if (inputs.length !== 3) {\n        throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1]; // Previous memory state.\n      const cTMinus1 = inputs[2]; // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 4,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 4,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i;\n      let f;\n      let c;\n      let o;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation\n    };\n    return Object.assign(Object.assign({}, baseConfig), config);\n  }\n}\n/** @nocollapse */\nLSTMCell.className = 'LSTMCell';\nexport { LSTMCell };\nserialization.registerClass(LSTMCell);\nclass LSTM extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args);\n    // TODO(cais): Add activityRegularizer.\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\n/** @nocollapse */\nLSTM.className = 'LSTM';\nexport { LSTM };\nserialization.registerClass(LSTM);\nclass StackedRNNCells extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.cells = args.cells;\n  }\n  get stateSize() {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      let states = inputs.slice(1);\n      // Recover per-cell states.\n      const nestedStates = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n      // Call the cells in order and store the returned states.\n      const newNestedStates = [];\n      let callInputs;\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs);\n        newNestedStates.push(callInputs.slice(1));\n      }\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n  build(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = inputShape[0];\n    }\n    inputShape = inputShape;\n    let outputDim;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim];\n      });\n    });\n    this.built = true;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const getCellConfig = cell => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig()\n      };\n    };\n    const cellConfigs = this.cells.map(getCellConfig);\n    const config = {\n      'cells': cellConfigs\n    };\n    return Object.assign(Object.assign({}, baseConfig), config);\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config, customObjects = {}) {\n    const cells = [];\n    for (const cellConfig of config['cells']) {\n      cells.push(deserialize(cellConfig, customObjects));\n    }\n    return new cls({\n      cells\n    });\n  }\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n  get nonTrainableWeights() {\n    const weights = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  getWeights() {\n    const weights = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  setWeights(weights) {\n    const tuples = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n}\n/** @nocollapse */\nStackedRNNCells.className = 'StackedRNNCells';\nexport { StackedRNNCells };\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n  const {\n    ones,\n    rate,\n    training = false,\n    count = 1,\n    dropoutFunc\n  } = args;\n  const droppedInputs = () => dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n  // just in case count is provided with null or undefined\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n  const masks = Array(count).fill(undefined).map(createMask);\n  return masks.map(m => tfc.keep(m.clone()));\n}","map":{"version":3,"names":["tfc","serialization","tidy","util","getActivation","serializeActivation","K","nameScope","getConstraint","serializeConstraint","InputSpec","SymbolicTensor","Layer","AttributeError","NotImplementedError","ValueError","getInitializer","Initializer","Ones","serializeInitializer","getRegularizer","serializeRegularizer","assertPositiveInteger","math_utils","getExactlyOneShape","getExactlyOneTensor","isArrayOfShapes","batchGetValue","batchSetValue","deserialize","standardizeArgs","inputs","initialState","constants","numConstants","Array","isArray","slice","length","toListOrNull","x","rnn","stepFunction","initialStates","goBackwards","mask","unroll","needPerStepOutputs","ndim","shape","axes","concat","range","transpose","console","warn","cast","rank","expandDims","reverse","perStepOutputs","lastOutput","states","timeSteps","perStepInputs","unstack","perStepMasks","t","currentInput","stepOutputs","maskedOutputs","stepMask","negStepMask","sub","onesLike","output","add","mul","newStates","map","state","i","push","outputs","axis","stack","RNN","constructor","args","cell","StackedRNNCells","cells","stateSize","returnSequences","returnState","_stateful","stateful","supportsMasking","inputSpec","stateSpec","states_","keptStates","getStates","numStates","setStates","computeOutputShape","inputShape","outputDim","outputShape","stateShape","dim","computeMask","outputMask","stateMask","s","build","constantShape","batchSize","inputDim","stepInputShape","arraysEqual","spec","resetStates","training","zeros","dispose","name","index","value","expectedShape","keep","clone","apply","kwargs","standardized","additionalInputs","additionalSpecs","isTensor","fullInput","fullInputSpec","originalInputSpec","call","getInitialState","cellCallKwargs","step","rnnOutputs","sum","tile","trainableWeights","trainable","nonTrainableWeights","weights","setFastWeightInitDuringBuild","getConfig","baseConfig","config","cellConfig","getClassName","className","Object","assign","fromConfig","cls","customObjects","registerClass","RNNCell","SimpleRNNCell","DEFAULT_ACTIVATION","DEFAULT_KERNEL_INITIALIZER","DEFAULT_RECURRENT_INITIALIZER","DEFAULT_BIAS_INITIALIZER","units","activation","useBias","kernelInitializer","recurrentInitializer","biasInitializer","kernelRegularizer","recurrentRegularizer","biasRegularizer","kernelConstraint","recurrentConstraint","biasConstraint","dropout","min","max","recurrentDropout","dropoutFunc","dropoutMask","recurrentDropoutMask","kernel","addWeight","recurrentKernel","bias","built","prevOutput","generateDropoutMask","ones","rate","h","dpMask","recDpMask","dot","read","biasAdd","activityRegularizer","SimpleRNN","GRUCell","DEFAULT_RECURRENT_ACTIVATION","resetAfter","undefined","recurrentActivation","implementation","hTMinus1","count","z","r","hh","matrixX","recurrentKernelValue","rk1","rk2","split","matrixInner","xZ","xR","xH","recurrentZ","recurrentR","recurrentH","neg","GRU","LSTMCell","unitForgetBias","capturedBiasInit","capturedUnits","_a","CustomInit","dtype","bI","bF","bCAndH","concatAlongFirstAxis","cTMinus1","f","c","o","z0","z1","z2","z3","LSTM","nestedStates","splice","newNestedStates","callInputs","cellStates","forEach","getCellConfig","cellConfigs","getWeights","setWeights","tuples","numParams","inputWeights","droppedInputs","createMask","inTrainPhase","masks","fill","m"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/layers/recurrent.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, SymbolicTensor} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, Ones, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, RnnStepFunction} from '../types';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes} from '../utils/types_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\nimport {deserialize} from './serialization';\n\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(\n    inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    initialState: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    constants: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    numConstants?: number): {\n  inputs: Tensor|SymbolicTensor,\n  initialState: Tensor[]|SymbolicTensor[],\n  constants: Tensor[]|SymbolicTensor[]\n} {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\n          'When inputs is an array, neither initialState or constants ' +\n          'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x: Tensor|Tensor[]|SymbolicTensor|\n                        SymbolicTensor[]): Tensor[]|SymbolicTensor[] {\n    if (x == null || Array.isArray(x)) {\n      return x as Tensor[] | SymbolicTensor[];\n    } else {\n      return [x] as Tensor[] | SymbolicTensor[];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n\n  return {inputs, initialState, constants};\n}\n\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(\n    stepFunction: RnnStepFunction, inputs: Tensor, initialStates: Tensor[],\n    goBackwards = false, mask?: Tensor, constants?: Tensor[], unroll = false,\n    needPerStepOutputs = false): [Tensor, Tensor, Tensor[]] {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError(\n          'The rnn() functoin of the deeplearn.js backend does not support ' +\n          'constants yet.');\n    }\n\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn(\n          'Backend rnn(): the unroll = true option is not applicable to the ' +\n          'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n    const perStepOutputs: Tensor[] = [];\n    let lastOutput: Tensor;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks: Tensor[];\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = tfc.add(\n              tfc.mul(stepOutputs[0], stepMask),\n              tfc.mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return tfc.add(\n                tfc.mul(stepOutputs[1][i], stepMask),\n                tfc.mul(state, negStepMask));\n          });\n          return {output, newStates};\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs: Tensor;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states] as [Tensor, Tensor, Tensor[]];\n  });\n}\n\nexport declare interface BaseRNNLayerArgs extends LayerArgs {\n  /**\n   * A RNN cell instance. A RNN cell is a class that has:\n   *   - a `call()` method, which takes `[Tensor, Tensor]` as the\n   *     first input argument. The first item is the input at time t, and\n   *     second item is the cell state at time t.\n   *     The `call()` method returns `[outputAtT, statesAtTPlus1]`.\n   *     The `call()` method of the cell can also take the argument `constants`,\n   *     see section \"Note on passing external constants\" below.\n   *     Porting Node: PyKeras overrides the `call()` signature of RNN cells,\n   *       which are Layer subtypes, to accept two arguments. tfjs-layers does\n   *       not do such overriding. Instead we preseve the `call()` signature,\n   *       which due to its `Tensor|Tensor[]` argument and return value is\n   *       flexible enough to handle the inputs and states.\n   *   - a `stateSize` attribute. This can be a single integer (single state)\n   *     in which case it is the size of the recurrent state (which should be\n   *     the same as the size of the cell output). This can also be an Array of\n   *     integers (one size per state). In this case, the first entry\n   *     (`stateSize[0]`) should be the same as the size of the cell output.\n   * It is also possible for `cell` to be a list of RNN cell instances, in which\n   * case the cells get stacked on after the other in the RNN, implementing an\n   * efficient stacked RNN.\n   */\n  cell?: RNNCell|RNNCell[];\n\n  /**\n   * Whether to return the last output in the output sequence, or the full\n   * sequence.\n   */\n  returnSequences?: boolean;\n\n  /**\n   * Whether to return the last state in addition to the output.\n   */\n  returnState?: boolean;\n\n  /**\n   * If `true`, process the input sequence backwards and return the reversed\n   * sequence (default: `false`).\n   */\n  goBackwards?: boolean;\n\n  /**\n   * If `true`, the last state for each sample at index i in a batch will be\n   * used as initial state of the sample of index i in the following batch\n   * (default: `false`).\n   *\n   * You can set RNN layers to be \"stateful\", which means that the states\n   * computed for the samples in one batch will be reused as initial states\n   * for the samples in the next batch. This assumes a one-to-one mapping\n   * between samples in different successive batches.\n   *\n   * To enable \"statefulness\":\n   *   - specify `stateful: true` in the layer constructor.\n   *   - specify a fixed batch size for your model, by passing\n   *     - if sequential model:\n   *       `batchInputShape: [...]` to the first layer in your model.\n   *     - else for functional model with 1 or more Input layers:\n   *       `batchShape: [...]` to all the first layers in your model.\n   *     This is the expected shape of your inputs\n   *     *including the batch size*.\n   *     It should be a tuple of integers, e.g., `[32, 10, 100]`.\n   *   - specify `shuffle: false` when calling `LayersModel.fit()`.\n   *\n   * To reset the state of your model, call `resetStates()` on either the\n   * specific layer or on the entire model.\n   */\n  stateful?: boolean;\n  // TODO(cais): Explore whether we can warn users when they fail to set\n  //   `shuffle: false` when training a model consisting of stateful RNNs\n  //   and any stateful Layers in general.\n\n  /**\n   * If `true`, the network will be unrolled, else a symbolic loop will be\n   * used. Unrolling can speed up a RNN, although it tends to be more\n   * memory-intensive. Unrolling is only suitable for short sequences (default:\n   * `false`).\n   * Porting Note: tfjs-layers has an imperative backend. RNNs are executed with\n   *   normal TypeScript control flow. Hence this property is inapplicable and\n   *   ignored in tfjs-layers.\n   */\n  unroll?: boolean;\n\n  /**\n   * Dimensionality of the input (integer).\n   *   This option (or alternatively, the option `inputShape`) is required when\n   *   this layer is used as the first layer in a model.\n   */\n  inputDim?: number;\n\n  /**\n   * Length of the input sequences, to be specified when it is constant.\n   * This argument is required if you are going to connect `Flatten` then\n   * `Dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed). Note that if the recurrent layer is not the first layer in\n   * your model, you would need to specify the input length at the level of the\n   * first layer (e.g., via the `inputShape` option).\n   */\n  inputLength?: number;\n}\n\nexport class RNN extends Layer {\n  /** @nocollapse */\n  static className = 'RNN';\n  public readonly cell: RNNCell;\n  public readonly returnSequences: boolean;\n  public readonly returnState: boolean;\n  public readonly goBackwards: boolean;\n  public readonly unroll: boolean;\n\n  public stateSpec: InputSpec[];\n  protected states_: Tensor[];\n\n  // NOTE(cais): For stateful RNNs, the old states cannot be disposed right\n  // away when new states are set, because the old states may need to be used\n  // later for backpropagation through time (BPTT) and other purposes. So we\n  // keep them here for final disposal when the state is reset completely\n  // (i.e., through no-arg call to `resetStates()`).\n  protected keptStates: Tensor[][];\n\n  private numConstants: number;\n\n  constructor(args: RNNLayerArgs) {\n    super(args);\n    let cell: RNNCell;\n    if (args.cell == null) {\n      throw new ValueError(\n          'cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({cells: args.cell});\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError(\n          'The RNN cell should have an attribute `stateSize` (tuple of ' +\n          'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences =\n        args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ndim: 3})];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  }\n\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states: Tensor[]): void {\n    this.states_ = states;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape: Shape|Shape[];\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape: Shape[] = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output: Tensor[] = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s: Tensor[]) {\n    this.states_ = s;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape: Shape[] = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    const batchSize: number = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({shape: [batchSize, null, ...inputDim]});\n\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n\n    // Set or validate stateSpec.\n    let stateSize: number[];\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(\n              this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]),\n              stateSize)) {\n        throw new ValueError(\n            `An initialState was passed that is not compatible with ` +\n            `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n            `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec =\n          stateSize.map(dim => new InputSpec({shape: [null, dim]}));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  override resetStates(states?: Tensor|Tensor[], training = false): void {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ?\n              this.cell.stateSize[index] :\n              this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  override apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    let additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({shape: state.shape}));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput =\n          [inputs].concat(additionalInputs) as Tensor[] | SymbolicTensor[];\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'] as Tensor;\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(\n            `RNN Layer has ${numStates} state(s) but was passed ` +\n            `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\n            'Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs: Kwargs = {training};\n\n      // TODO(cais): Add support for constants.\n      const step = (inputs: Tensor, states: Tensor[]) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs =\n            this.cell.call([inputs].concat(states), cellCallKwargs) as Tensor[];\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)] as [Tensor, Tensor[]];\n      };\n\n      // TODO(cais): Add support for constants.\n\n      const rnnOutputs =\n          rnn(step, inputs, initialState, this.goBackwards, mask, null,\n              this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput;\n\n      // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs: Tensor): Tensor[] {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState);  // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(\n            dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ?\n            [K.tile(initialState, [1, this.cell.stateSize])] :\n            [initialState];\n      }\n    });\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n\n  override setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll,\n    };\n\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n\n    const cellConfig = this.cell.getConfig();\n\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig,\n      } as serialization.ConfigDictValue;\n    }\n\n    // this order is necessary, to prevent cell name from replacing layer name\n    return {...cellConfig, ...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cellConfig = config['cell'] as serialization.ConfigDict;\n    const cell = deserialize(cellConfig, customObjects) as RNNCell;\n    return new cls(Object.assign(config, {cell}));\n  }\n}\nserialization.registerClass(RNN);\n\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport abstract class RNNCell extends Layer {\n  /**\n   * Size(s) of the states.\n   * For RNN cells with only a single state, this is a single integer.\n   */\n  // See\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#properties-overriding-accessors-and-vice-versa-is-an-error\n  public abstract stateSize: number|number[];\n  public dropoutMask: Tensor|Tensor[];\n  public recurrentDropoutMask: Tensor|Tensor[];\n}\n\nexport declare interface SimpleRNNCellLayerArgs extends LayerArgs {\n  /**\n   * units: Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   * Default: hyperbolic tangent ('tanh').\n   * If you pass `null`,  'linear' activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the `kernel` weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the `recurrent_kernel` weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the `kernel` weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the `recurrentKernel` weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\nexport class SimpleRNNCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'SimpleRNNCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args: SimpleRNNCellLayerArgs) {\n    super(args);\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(\n        args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight(\n        'kernel', [inputShape[inputShape.length - 1], this.units], null,\n        this.kernelInitializer, this.kernelRegularizer, true,\n        this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor;\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(prevOutput),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor;\n      }\n      let h: Tensor;\n      const dpMask: Tensor = this.dropoutMask as Tensor;\n      const recDpMask: Tensor = this.recurrentDropoutMask as Tensor;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(SimpleRNNCell);\n\nexport declare interface SimpleRNNLayerArgs extends BaseRNNLayerArgs {\n  /**\n   * Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   *\n   * Defaults to  hyperbolic tangent (`tanh`)\n   *\n   * If you pass `null`, no activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the recurrentKernel weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the kernel weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the recurrentKernel weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\n/**\n * RNNLayerConfig is identical to BaseRNNLayerConfig, except it makes the\n * `cell` property required. This interface is to be used with constructors\n * of concrete RNN layer subtypes.\n */\nexport declare interface RNNLayerArgs extends BaseRNNLayerArgs {\n  cell: RNNCell|RNNCell[];\n}\n\nexport class SimpleRNN extends RNN {\n  /** @nocollapse */\n  static override className = 'SimpleRNN';\n  constructor(args: SimpleRNNLayerArgs) {\n    args.cell = new SimpleRNNCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\nserialization.registerClass(SimpleRNN);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface GRUCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n\n  /**\n   * GRU convention (whether to apply reset gate after or before matrix\n   * multiplication). false = \"before\", true = \"after\" (only false is\n   * supported).\n   */\n  resetAfter?: boolean;\n}\n\nexport class GRUCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'GRUCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION: ActivationIdentifier = 'hardSigmoid';\n\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: GRUCellLayerArgs) {\n    super(args);\n    if (args.resetAfter) {\n      throw new ValueError(\n          `GRUCell does not support reset_after parameter set to true.`);\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 3], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 3], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units * 3], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1];  // Previous memory state.\n      inputs = inputs[0];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 3,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 3,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor];\n      const recDpMask = this.recurrentDropoutMask as [Tensor, Tensor, Tensor];\n      let z: Tensor;\n      let r: Tensor;\n      let hh: Tensor;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(\n          recurrentKernelValue, [2 * this.units, this.units],\n          recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] =\n          tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n\n      const h =\n          tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(GRUCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface GRULayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   * smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class GRU extends RNN {\n  /** @nocollapse */\n  static override className = 'GRU';\n  constructor(args: GRULayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(GRU);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface LSTMCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class LSTMCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'LSTMCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n  readonly unitForgetBias: boolean;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number[];\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n\n  readonly DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: LSTMCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 4], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 4], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    let biasInitializer: Initializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): Tensor {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = (new Ones()).apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(\n                K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\n          'bias', [this.units * 4], null, biasInitializer, this.biasRegularizer,\n          true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];    // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 4,\n                             dropoutFunc: this.dropoutFunc\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 4,\n                                      dropoutFunc: this.dropoutFunc\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor, Tensor];\n      const recDpMask =\n          this.recurrentDropoutMask as [Tensor, Tensor, Tensor, Tensor];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i: Tensor;\n      let f: Tensor;\n      let c: Tensor;\n      let o: Tensor;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(LSTMCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface LSTMLayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *   Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions, whereas mode 2 will\n   *   batch them into fewer, larger operations. These modes will\n   *   have different performance profiles on different hardware and\n   *   for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this config field.\n   */\n  implementation?: number;\n}\n\nexport class LSTM extends RNN {\n  /** @nocollapse */\n  static override className = 'LSTM';\n  constructor(args: LSTMLayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(LSTM);\n\nexport declare interface StackedRNNCellsArgs extends LayerArgs {\n  /**\n   * An `Array` of `RNNCell` instances.\n   */\n  cells: RNNCell[];\n}\n\nexport class StackedRNNCells extends RNNCell {\n  /** @nocollapse */\n  static className = 'StackedRNNCells';\n  protected cells: RNNCell[];\n\n  constructor(args: StackedRNNCellsArgs) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize(): number[] {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize: number[] = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      let states = inputs.slice(1);\n\n      // Recover per-cell states.\n      const nestedStates: Tensor[][] = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n\n      // Call the cells in order and store the returned states.\n      const newNestedStates: Tensor[][] = [];\n      let callInputs: Tensor[];\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs) as Tensor[];\n        newNestedStates.push(callInputs.slice(1));\n      }\n\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n    let outputDim: number;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim] as Shape;\n      });\n    });\n    this.built = true;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const getCellConfig = (cell: RNNCell) => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig(),\n      };\n    };\n\n    const cellConfigs = this.cells.map(getCellConfig);\n\n    const config = {'cells': cellConfigs};\n\n    return {...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cells: RNNCell[] = [];\n    for (const cellConfig of (config['cells'] as serialization.ConfigDict[])) {\n      cells.push(deserialize(cellConfig, customObjects) as RNNCell);\n    }\n    return new cls({cells});\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  override getWeights(): Tensor[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  override setWeights(weights: Tensor[]): void {\n    const tuples: Array<[LayerVariable, Tensor]> = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n\n  // TODO(cais): Maybe implemnt `losses` and `getLossesFor`.\n}\nserialization.registerClass(StackedRNNCells);\n\nexport function generateDropoutMask(args: {\n  ones: () => tfc.Tensor,\n  rate: number,\n  training?: boolean,\n  count?: number,\n  dropoutFunc?: Function,\n}): tfc.Tensor|tfc.Tensor[] {\n  const {ones, rate, training = false, count = 1, dropoutFunc} = args;\n\n  const droppedInputs = () =>\n      dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n\n  // just in case count is provided with null or undefined\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n\n  const masks = Array(count).fill(undefined).map(createMask);\n\n  return masks.map(m => tfc.keep(m.clone()));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}