{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n  constructor(reduceInfo, reduceType) {\n    this.variableNames = ['x'];\n    const {\n      windowSize,\n      batchSize,\n      inSize,\n      outSize\n    } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    let initializationValue = '0.0';\n    let compareOp = ``;\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n    let vecType = `vec4`;\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}","map":{"version":3,"names":["ReduceProgram","constructor","reduceInfo","reduceType","variableNames","windowSize","batchSize","inSize","outSize","outputShape","initializationValue","compareOp","returnValue","windowSizeNearestVec4","Math","floor","windowSizeVec4Remainder","updateSnippet","vecType","checkOutOfBounds","userCode"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/reduce_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAOA,aAAa;EAKxBC,YACIC,UAAmC,EACnCC,UAAgD;IANpD,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAOnB,MAAM;MAACC,UAAU;MAAEC,SAAS;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGN,UAAU;IAC3D,IAAI,CAACO,WAAW,GAAG,CAACH,SAAS,EAAEE,OAAO,CAAC;IAEvC,IAAIE,mBAAmB,GAAG,KAAK;IAC/B,IAAIC,SAAS,GAAG,EAAE;IAElB,IAAIR,UAAU,KAAK,MAAM,EAAE;MACzBO,mBAAmB,GAAG,KAAK;KAC5B,MAAM,IAAIP,UAAU,KAAK,KAAK,EAAE;MAC/B;MACAO,mBAAmB,GAAG,aAAa;MACnCC,SAAS,GAAG,KAAK;KAClB,MAAM,IAAIR,UAAU,KAAK,KAAK,EAAE;MAC/B;MACAO,mBAAmB,GAAG,cAAc;MACpCC,SAAS,GAAG,KAAK;;IAGnB,IAAIC,WAAW,GAAG,GAAGT,UAAU,IAAIA,UAAU,IAAIA,UAAU,GAAG,GAC1D,mEAAmE;IAEvE,IAAIA,UAAU,KAAK,KAAK,EAAE;MACxBS,WAAW,GAAG,UAAU;KACzB,MAAM,IAAIT,UAAU,KAAK,MAAM,EAAE;MAChCS,WAAW,GAAG,WAAW;KAC1B,MAAM,IAAIT,UAAU,KAAK,KAAK,EAAE;MAC/BS,WAAW,GAAG,UAAU;KACzB,MAAM,IAAIT,UAAU,KAAK,KAAK,EAAE;MAC/BS,WAAW,GAAG,UAAU;;IAG1B,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,KAAK,CAACV,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;IAC5D,MAAMW,uBAAuB,GAAGX,UAAU,GAAG,CAAC;IAE9C,IAAIY,aAAa,GAAG;YACZd,UAAU,KAAK,KAAK;;mBAEbA,UAAU,KAAK,MAAM;;;;wBAIhBQ,SAAS;cACnBR,UAAU,KAAK,KAAK,OAAOA,UAAU,KAAK,KAAK;0BACnCQ,SAAS;;;;;;;KAO9B;IAED,IAAIO,OAAO,GAAG,MAAM;IAEpB,IAAIf,UAAU,KAAK,KAAK,EAAE;MACxBO,mBAAmB,GAAG,KAAK;MAC3BO,aAAa,GAAG;;;;OAIf;MACDC,OAAO,GAAG,OAAO;KAClB,MAAM,IAAIf,UAAU,KAAK,KAAK,EAAE;MAC/BO,mBAAmB,GAAG,KAAK;MAC3BO,aAAa,GAAG;;;;OAIf;MACDC,OAAO,GAAG,OAAO;;IAGnB,IAAIC,gBAAgB,GAAG,EAAE;IACzB,IAAIZ,MAAM,GAAGF,UAAU,GAAG,CAAC,EAAE;MAC3Bc,gBAAgB,GAAG;oCACWZ,MAAM;;;OAGnC;;IAEH,IAAI,CAACa,QAAQ,GAAG;0CACsBV,mBAAmB;;;;UAInDS,gBAAgB;;;;;;;;kCAQQd,UAAU;;kCAEVK,mBAAmB;;;;;;8BAMvBG,qBAAqB;;YAEvCK,OAAO,aAAaA,OAAO;;;;;;;YAO3BD,aAAa;;;iCAGQJ,qBAAqB;cACxCG,uBAAuB,KAAK,CAAC;YAC/BE,OAAO,aAAaA,OAAO;;;;;;;YAO3BD,aAAa;qBACJD,uBAAuB,KAAK,CAAC;YACtCE,OAAO,aAAaA,OAAO;;;;;;;YAO3BD,aAAa;qBACJD,uBAAuB,KAAK,CAAC;YACtCE,OAAO,aAAaA,OAAO;;;;;;;YAO3BD,aAAa;;oBAELL,WAAW;;KAE1B;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}