{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { assertNonNegativeIntegerDimensions, makeZerosTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros(shape, dtype = 'float32') {\n  assertNonNegativeIntegerDimensions(shape);\n  if (dtype === 'complex64') {\n    const real = zeros(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype);\n}","map":{"version":3,"names":["ENGINE","assertNonNegativeIntegerDimensions","makeZerosTypedArray","sizeFromShape","complex","zeros","shape","dtype","real","imag","values","makeTensor"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/zeros.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions, makeZerosTypedArray, sizeFromShape} from '../util';\n\nimport {complex} from './complex';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (dtype === 'complex64') {\n    const real = zeros(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAGhC,SAAQC,kCAAkC,EAAEC,mBAAmB,EAAEC,aAAa,QAAO,SAAS;AAE9F,SAAQC,OAAO,QAAO,WAAW;AAEjC;;;;;;;;;;;;;AAaA,OAAM,SAAUC,KAAKA,CACjBC,KAAkB,EAAEC,KAAA,GAAkB,SAAS;EACjDN,kCAAkC,CAACK,KAAK,CAAC;EACzC,IAAIC,KAAK,KAAK,WAAW,EAAE;IACzB,MAAMC,IAAI,GAAGH,KAAK,CAACC,KAAK,EAAE,SAAS,CAAC;IACpC,MAAMG,IAAI,GAAGJ,KAAK,CAACC,KAAK,EAAE,SAAS,CAAC;IACpC,OAAOF,OAAO,CAACI,IAAI,EAAEC,IAAI,CAAC;;EAE5B,MAAMC,MAAM,GAAGR,mBAAmB,CAACC,aAAa,CAACG,KAAK,CAAC,EAAEC,KAAK,CAAC;EAC/D,OAAOP,MAAM,CAACW,UAAU,CAACD,MAAM,EAAEJ,KAAK,EAAEC,KAAK,CAAc;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}