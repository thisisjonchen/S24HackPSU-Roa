{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  let x5D = x;\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n  let dy5D = dy;\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n  util.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` + `${x5D.shape}.`);\n  util.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` + `${dy5D.shape}.`);\n  util.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` + `${filterShape}.`);\n  util.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` + `match input depth in filter (${filterShape[3]}.`);\n  util.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` + `match output depth for filter (${filterShape[4]}).`);\n  const inputs = {\n    x: x5D,\n    dy: dy5D\n  };\n  const attrs = {\n    strides,\n    pad,\n    filterShape\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(Conv3DBackpropFilterV2, inputs, attrs);\n}\nexport const conv3DBackpropFilter = /* @__PURE__ */op({\n  conv3DBackpropFilter_\n});","map":{"version":3,"names":["ENGINE","Conv3DBackpropFilterV2","util","op","reshape","conv3DBackpropFilter_","x","dy","filterShape","strides","pad","x5D","rank","shape","dy5D","assert","length","inputs","attrs","runKernel","conv3DBackpropFilter"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/conv3d_backprop_filter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\nfunction conv3DBackpropFilter_<T extends Tensor4D|Tensor5D>(\n    x: T, dy: T, filterShape: [number, number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): Tensor5D {\n  let x5D = x as Tensor5D;\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n  let dy5D = dy as Tensor5D;\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +\n          `${x5D.shape}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +\n          `${dy5D.shape}.`);\n  util.assert(\n      filterShape.length === 5,\n      () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +\n          `${filterShape}.`);\n  util.assert(\n      x5D.shape[4] === filterShape[3],\n      () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +\n          `match input depth in filter (${filterShape[3]}.`);\n  util.assert(\n      dy5D.shape[4] === filterShape[4],\n      () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +\n          `match output depth for filter (${filterShape[4]}).`);\n\n  const inputs: Conv3DBackpropFilterV2Inputs = {x: x5D, dy: dy5D};\n\n  const attrs: Conv3DBackpropFilterV2Attrs = {strides, pad, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Conv3DBackpropFilterV2, inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as Tensor5D;\n}\n\nexport const conv3DBackpropFilter = /* @__PURE__ */ op({conv3DBackpropFilter_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,sBAAsB,QAAkE,iBAAiB;AAIjH,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AAEjC;;;;;;;;;;;;;;;;AAgBA,SAASC,qBAAqBA,CAC1BC,CAAI,EAAEC,EAAK,EAAEC,WAAqD,EAClEC,OAAwC,EAAEC,GAAmB;EAC/D,IAAIC,GAAG,GAAGL,CAAa;EACvB,IAAIA,CAAC,CAACM,IAAI,KAAK,CAAC,EAAE;IAChBD,GAAG,GAAGP,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,EAAEA,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEP,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEP,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC,EAAEP,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvE,IAAIC,IAAI,GAAGP,EAAc;EACzB,IAAIO,IAAI,CAACF,IAAI,KAAK,CAAC,EAAE;IACnBE,IAAI,GAAGV,OAAO,CAACG,EAAE,EAAE,CAAC,CAAC,EAAEA,EAAE,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEN,EAAE,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEN,EAAE,CAACM,KAAK,CAAC,CAAC,CAAC,EAAEN,EAAE,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE7EX,IAAI,CAACa,MAAM,CACPJ,GAAG,CAACC,IAAI,KAAK,CAAC,EACd,MAAM,gEAAgE,GAClE,GAAGD,GAAG,CAACE,KAAK,GAAG,CAAC;EACxBX,IAAI,CAACa,MAAM,CACPD,IAAI,CAACF,IAAI,KAAK,CAAC,EACf,MAAM,6DAA6D,GAC/D,GAAGE,IAAI,CAACD,KAAK,GAAG,CAAC;EACzBX,IAAI,CAACa,MAAM,CACPP,WAAW,CAACQ,MAAM,KAAK,CAAC,EACxB,MAAM,kEAAkE,GACpE,GAAGR,WAAW,GAAG,CAAC;EAC1BN,IAAI,CAACa,MAAM,CACPJ,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,KAAKL,WAAW,CAAC,CAAC,CAAC,EAC/B,MAAM,4CAA4CG,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,SAAS,GACnE,gCAAgCL,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;EAC1DN,IAAI,CAACa,MAAM,CACPD,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,KAAKL,WAAW,CAAC,CAAC,CAAC,EAChC,MAAM,0CAA0CM,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,SAAS,GAClE,kCAAkCL,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;EAE7D,MAAMS,MAAM,GAAiC;IAACX,CAAC,EAAEK,GAAG;IAAEJ,EAAE,EAAEO;EAAI,CAAC;EAE/D,MAAMI,KAAK,GAAgC;IAACT,OAAO;IAAEC,GAAG;IAAEF;EAAW,CAAC;EAEtE;EACA,OAAOR,MAAM,CAACmB,SAAS,CACZlB,sBAAsB,EAAEgB,MAAmC,EAC3DC,KAAgC,CAAa;AAC1D;AAEA,OAAO,MAAME,oBAAoB,GAAG,eAAgBjB,EAAE,CAAC;EAACE;AAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}