{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {\n    windowSize,\n    inSize,\n    batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}","map":{"version":3,"names":["backend_util","env","util","ArgMinMaxProgram","ArgMinMaxPackedProgram","reshape","argReduce","backend","x","reduceType","bestIndicesA","batchSize","shape","inSize","windowSize","computeOptimalWindowSize","reduceInfo","outSize","Math","ceil","program","inputs","push","output","runWebGLProgram","result","disposeIntermediateTensorInfo","argReducePacked","inShape","length","argMinMaxReduce","axis","axes","assertAxesAreInnerMostDims","charAt","toUpperCase","slice","getBool","intermediateTensorInfos","xtexData","texData","get","dataId","xIsPacked","isPacked","xUnPacked","unpackTensor","outShape","reduceShape","computeOutAndReduceShapes","sizeFromShape","a2D","attrs","reduced","reshaped","forEach","t"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}