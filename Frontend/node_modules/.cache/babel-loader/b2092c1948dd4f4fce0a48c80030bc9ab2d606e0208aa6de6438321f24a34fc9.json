{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n    if (aType !== bType) {\n      throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);\n    }\n  }\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n  const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  const expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n    if (!predicate(a, e)) {\n      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n    }\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\nexport function expectPromiseToFail(fn, done) {\n  fn().then(() => done.fail(), () => done());\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\nexport function expectArraysEqual(actual, expected) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\nfunction areClose(a, e, epsilon) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\nexport function expectValuesInRange(actual, low, high) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error('Expected ArrayBuffer to be of length ' + `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(`Expected ArrayBuffer value at ${i} to be ` + `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a) {\n  for (let i = 0; i < a.length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val);\n    }\n  }\n  return a;\n}\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source) {\n  const video = document.createElement('video');\n  if ('playsInline' in video) {\n    // tslint:disable-next-line:no-any\n    video.playsInline = true;\n  }\n  video.muted = true;\n  video.loop = true;\n  video.style.position = 'fixed';\n  video.style.left = '0px';\n  video.style.top = '0px';\n  video.preload = 'auto';\n  video.appendChild(source);\n  return new Promise(resolve => {\n    video.addEventListener('loadeddata', _ => resolve(video));\n    video.load();\n  });\n}\nexport async function play(video) {\n  await video.play();\n  if ('requestVideoFrameCallback' in video) {\n    await new Promise(resolve => {\n      // tslint:disable-next-line:no-any\n      video.requestVideoFrameCallback(resolve);\n    });\n  }\n}","map":{"version":3,"names":["ENGINE","inferShape","arraysEqual","encodeString","flatten","isString","isTypedArray","TEST_EPSILON_FLOAT32","TEST_EPSILON_FLOAT16","expectArraysClose","actual","expected","epsilon","testEpsilon","expectArraysPredicate","a","b","areClose","backend","floatPrecision","predicate","checkClassType","aType","constructor","name","bType","Error","Array","isArray","actualShape","expectedShape","actualFlat","expectedFlat","length","i","e","expect","nothing","expectPromiseToFail","fn","done","then","fail","expectArraysEqual","exp","expectNumbersClose","isFinite","isNaN","Math","abs","expectValuesInRange","low","high","expectArrayBuffersEqual","actualArray","Float32Array","expectedArray","encodeStrings","val","createVideoElement","source","video","document","createElement","playsInline","muted","loop","style","position","left","top","preload","appendChild","Promise","resolve","addEventListener","_","load","play","requestVideoFrameCallback"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/test_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, encodeString, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error(\n        'Expected ArrayBuffer to be of length ' +\n        `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(\n          `Expected ArrayBuffer value at ${i} to be ` +\n          `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a: RecursiveArray<{}>):\n    RecursiveArray<Uint8Array> {\n  for (let i = 0; i < (a as Array<{}>).length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val as string);\n    }\n  }\n  return a as RecursiveArray<Uint8Array>;\n}\n\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source: HTMLSourceElement):\n    Promise<HTMLVideoElement> {\n  const video = document.createElement('video');\n  if ('playsInline' in video) {\n    // tslint:disable-next-line:no-any\n    (video as any).playsInline = true;\n  }\n  video.muted = true;\n  video.loop = true;\n  video.style.position = 'fixed';\n  video.style.left = '0px';\n  video.style.top = '0px';\n\n  video.preload = 'auto';\n  video.appendChild(source);\n  return new Promise(resolve => {\n    video.addEventListener('loadeddata', _ => resolve(video));\n    video.load();\n  });\n}\n\nexport async function play(video: HTMLVideoElement) {\n  await video.play();\n  if ('requestVideoFrameCallback' in video) {\n    await new Promise(resolve => {\n      // tslint:disable-next-line:no-any\n      (video as any).requestVideoFrameCallback(resolve);\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}