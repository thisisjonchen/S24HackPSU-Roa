{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  backend.incRef(x.dataId);\n  const xData = backend.data.get(x.dataId);\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape\n};","map":{"version":3,"names":["Reshape","util","reshape","args","inputs","backend","attrs","x","shape","xSize","sizeFromShape","$shape","inferFromImplicitShape","$xSize","assert","incRef","dataId","xData","data","get","complexTensorInfos","real","imag","dtype","reshapeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Reshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAO,EAA2CC,IAAI,QAAO,uBAAuB;AAItH,OAAM,SAAUC,OAAOA,CACnBC,IACyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAK,CAAC,GAAGF,KAAK;EAErB,MAAMG,KAAK,GAAGR,IAAI,CAACS,aAAa,CAACH,CAAC,CAACC,KAAK,CAAC;EACzC,MAAMG,MAAM,GAAGV,IAAI,CAACW,sBAAsB,CAACJ,KAAK,EAAEC,KAAK,CAAC;EACxD,MAAMI,MAAM,GAAGZ,IAAI,CAACS,aAAa,CAACC,MAAM,CAAC;EAEzCV,IAAI,CAACa,MAAM,CACPL,KAAK,KAAKI,MAAM,EAChB,MAAM,kBAAkBF,MAAM,SAASE,MAAM,wBAAwB,GACjE,UAAUN,CAAC,CAACC,KAAK,SAASC,KAAK,mCAAmC,GAClE,8CAA8C,CAAC;EAEvDJ,OAAO,CAACU,MAAM,CAACR,CAAC,CAACS,MAAM,CAAC;EAExB,MAAMC,KAAK,GAAGZ,OAAO,CAACa,IAAI,CAACC,GAAG,CAACZ,CAAC,CAACS,MAAM,CAAC;EAExC,IAAIC,KAAK,CAACG,kBAAkB,IAAI,IAAI,EAAE;IACpC,MAAMC,IAAI,GAAGJ,KAAK,CAACG,kBAAkB,CAACC,IAAI;IAC1C,MAAMC,IAAI,GAAGL,KAAK,CAACG,kBAAkB,CAACE,IAAI;IAE1CD,IAAI,CAACb,KAAK,GAAGG,MAAM;IACnBW,IAAI,CAACd,KAAK,GAAGG,MAAM;;EAGrB,OAAO;IAACK,MAAM,EAAET,CAAC,CAACS,MAAM;IAAER,KAAK,EAAEG,MAAM;IAAEY,KAAK,EAAEhB,CAAC,CAACgB;EAAK,CAAC;AAC1D;AAEA,OAAO,MAAMC,aAAa,GAAiB;EACzCC,UAAU,EAAEzB,OAAO;EACnB0B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEzB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}