{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const axes = util.parseAxisParam([dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitsReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitsReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumExpReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const res = realDiv({\n    inputs: {\n      a: b,\n      b: sumExpReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n  return res;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax\n};","map":{"version":3,"names":["backend_util","Softmax","util","exp","max","realDiv","reshape","sub","sum","softmax","args","inputs","backend","attrs","logits","dim","axes","parseAxisParam","shape","maxLogit","x","reductionIndices","keepDims","expandedShape","expandShapeToKeepDim","maxLogitsReshaped","a","b","sumExp","axis","sumExpReshaped","res","disposeIntermediateTensorInfo","softmaxConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Softmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA4BC,OAAO,EAA2CC,IAAI,QAAO,uBAAuB;AAIpI,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,GAAG,QAAO,OAAO;AAEzB,OAAM,SAAUC,OAAOA,CAACC,IAIvB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAM,CAAC,GAAGH,MAAM;EACvB,MAAM;IAACI;EAAG,CAAC,GAAGF,KAAK;EAEnB,MAAMG,IAAI,GAAGd,IAAI,CAACe,cAAc,CAAC,CAACF,GAAG,CAAC,EAAED,MAAM,CAACI,KAAK,CAAC;EAErD,MAAMC,QAAQ,GAAGf,GAAG,CAAC;IACnBO,MAAM,EAAE;MAACS,CAAC,EAAEN;IAAM,CAAC;IACnBF,OAAO;IACPC,KAAK,EAAE;MAACQ,gBAAgB,EAAEL,IAAI;MAAEM,QAAQ,EAAE;IAAK;GAChD,CAAC;EAEF,MAAMC,aAAa,GAAGvB,YAAY,CAACwB,oBAAoB,CAACL,QAAQ,CAACD,KAAK,EAAEF,IAAI,CAAC;EAE7E,MAAMS,iBAAiB,GACnBnB,OAAO,CAAC;IAACK,MAAM,EAAE;MAACS,CAAC,EAAED;IAAQ,CAAC;IAAEP,OAAO;IAAEC,KAAK,EAAE;MAACK,KAAK,EAAEK;IAAa;EAAC,CAAC,CAAC;EAC5E,MAAMG,CAAC,GACHnB,GAAG,CAAC;IAACI,MAAM,EAAE;MAACe,CAAC,EAAEZ,MAAM;MAAEa,CAAC,EAAEF;IAAiB,CAAC;IAAEb;EAAO,CAAC,CAAe;EAC3E,MAAMe,CAAC,GAAGxB,GAAG,CAAC;IAACQ,MAAM,EAAE;MAACS,CAAC,EAAEM;IAAC,CAAC;IAAEd;EAAO,CAAC,CAAe;EACtD,MAAMgB,MAAM,GACRpB,GAAG,CAAC;IAACG,MAAM,EAAE;MAACS,CAAC,EAAEO;IAAC,CAAC;IAAEf,OAAO;IAAEC,KAAK,EAAE;MAACgB,IAAI,EAAEb,IAAI;MAAEM,QAAQ,EAAE;IAAK;EAAC,CAAC,CAAC;EACxE,MAAMQ,cAAc,GAChBxB,OAAO,CAAC;IAACK,MAAM,EAAE;MAACS,CAAC,EAAEQ;IAAM,CAAC;IAAEhB,OAAO;IAAEC,KAAK,EAAE;MAACK,KAAK,EAAEK;IAAa;EAAC,CAAC,CAAC;EAE1E,MAAMQ,GAAG,GACL1B,OAAO,CAAC;IAACM,MAAM,EAAE;MAACe,CAAC,EAAEC,CAAC;MAAEA,CAAC,EAAEG;IAAc,CAAC;IAAElB;EAAO,CAAC,CAAe;EAEvEA,OAAO,CAACoB,6BAA6B,CAACb,QAAQ,CAAC;EAC/CP,OAAO,CAACoB,6BAA6B,CAACP,iBAAiB,CAAC;EACxDb,OAAO,CAACoB,6BAA6B,CAACN,CAAC,CAAC;EACxCd,OAAO,CAACoB,6BAA6B,CAACL,CAAC,CAAC;EACxCf,OAAO,CAACoB,6BAA6B,CAACJ,MAAM,CAAC;EAC7ChB,OAAO,CAACoB,6BAA6B,CAACF,cAAc,CAAC;EAErD,OAAOC,GAAG;AACZ;AAEA,OAAO,MAAME,aAAa,GAAiB;EACzCC,UAAU,EAAEjC,OAAO;EACnBkC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}