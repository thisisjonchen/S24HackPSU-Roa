{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n    if (program.enableShapeUniforms) {\n      const {\n        uniformShape\n      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach(d => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  }\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape,\n    uniformShape,\n    keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","program","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","length","customUniforms","d","type","arrayIndex","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","userCode","getSamplerFromInInfo","inInfo","shape","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","offset","tNumR","tNumC","getUniformSampler","valuesPerRow","newShape","keptDims","squeezeShape","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}