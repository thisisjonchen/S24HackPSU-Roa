{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n  const values = backend.data.get(condition.dataId).values;\n  const tValues = backend.data.get(t.dataId).values;\n  const eValues = backend.data.get(e.dataId).values;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n  let index = 0;\n  const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select\n};","map":{"version":3,"names":["Select","upcastType","util","assertNotComplex","select","args","inputs","backend","condition","t","e","conditionRank","shape","length","values","data","get","dataId","tValues","eValues","resultDtype","dtype","newValues","makeZerosTypedArray","sizeFromShape","index","offset","slice","i","j","makeTensorInfo","selectConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Select.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAM,EAAwCC,UAAU,EAAEC,IAAI,QAAO,uBAAuB;AAG9H,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,MAAMA,CAACC,IAAqD;EAE1E,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,SAAS;IAAEC,CAAC;IAAEC;EAAC,CAAC,GAAGJ,MAAM;EAEhCH,gBAAgB,CAAC,CAACK,SAAS,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAE,QAAQ,CAAC;EAC7C,MAAMC,aAAa,GAAGH,SAAS,CAACI,KAAK,CAACC,MAAM;EAE5C,MAAMC,MAAM,GAAGP,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACR,SAAS,CAACS,MAAM,CAAC,CAACH,MAAoB;EACtE,MAAMI,OAAO,GAAGX,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACP,CAAC,CAACQ,MAAM,CAAC,CAACH,MAAoB;EAC/D,MAAMK,OAAO,GAAGZ,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACN,CAAC,CAACO,MAAM,CAAC,CAACH,MAAoB;EAC/D,MAAMM,WAAW,GAAGnB,UAAU,CAACQ,CAAC,CAACY,KAAK,EAAEX,CAAC,CAACW,KAAK,CAAC;EAChD,MAAMC,SAAS,GACXpB,IAAI,CAACqB,mBAAmB,CAACrB,IAAI,CAACsB,aAAa,CAACf,CAAC,CAACG,KAAK,CAAC,EAAEQ,WAAW,CAAC;EAEtE,IAAIK,KAAK,GAAG,CAAC;EACb,MAAMC,MAAM,GACRf,aAAa,KAAK,CAAC,IAAIA,aAAa,GAAG,CAAC,IAAIF,CAAC,CAACG,KAAK,CAACC,MAAM,KAAK,CAAC,GAChE,CAAC,GACDX,IAAI,CAACsB,aAAa,CAACf,CAAC,CAACG,KAAK,CAACe,KAAK,CAAC,CAAC,CAAC,CAAC;EAExC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,MAAM,CAACD,MAAM,EAAEe,CAAC,EAAE,EAAE;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC/B,IAAIf,MAAM,CAACc,CAAC,CAAC,KAAK,CAAC,EAAE;QACnBN,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGP,OAAO,CAACU,CAAC,CAAC;OAChC,MAAM;QACLN,SAAS,CAACG,KAAK,EAAE,CAAC,GAAGN,OAAO,CAACS,CAAC,CAAC;;;;EAKrC,OAAOrB,OAAO,CAACuB,cAAc,CAACrB,CAAC,CAACG,KAAK,EAAEQ,WAAW,EAAEE,SAAS,CAAC;AAChE;AAEA,OAAO,MAAMS,YAAY,GAAiB;EACxCC,UAAU,EAAEhC,MAAM;EAClBiC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE9B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}