{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      dilations,\n      strides,\n      pad,\n      dimRoundingMode\n    } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);\n    const [x, filter] = saved;\n    util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);\n    util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);\n    util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);\n    conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode)\n    };\n  }\n};","map":{"version":3,"names":["DepthwiseConv2dNative","conv_util","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInput","util","depthwiseConv2dNativeGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","dilations","strides","pad","dimRoundingMode","$dilations","assert","tupleValuesAreOne","x","filter","rank","shape","eitherStridesOrDilationsAreOne","checkPadOnDimRoundingMode"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/gradients/DepthwiseConv2dNative_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport * as conv_util from '../ops/conv_util';\nimport {depthwiseConv2dNativeBackpropFilter} from '../ops/depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../ops/depthwise_conv2d_native_backprop_input';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const depthwiseConv2dNativeGradConfig: GradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad, dimRoundingMode} =\n        attrs as unknown as DepthwiseConv2dNativeAttrs;\n    const $dilations = dilations == null ? [1, 1] as[number,number] : dilations;\n\n    util.assert(\n        conv_util.tupleValuesAreOne($dilations),\n        () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n\n    const [x, filter] = saved as [Tensor4D, Tensor4D];\n\n    util.assert(\n        x.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n    util.assert(\n        filter.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n    util.assert(\n        x.shape[3] === filter.shape[2],\n        () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n\n    util.assert(\n        conv_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n        () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n\n    conv_util.checkPadOnDimRoundingMode(\n        'depthwiseConv2d', pad, dimRoundingMode);\n\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(\n          x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(\n          x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode),\n    };\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,qBAAqB,QAAmC,iBAAiB;AAEjF,OAAO,KAAKC,SAAS,MAAM,kBAAkB;AAC7C,SAAQC,mCAAmC,QAAO,gDAAgD;AAClG,SAAQC,kCAAkC,QAAO,+CAA+C;AAEhG,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,OAAO,MAAMC,+BAA+B,GAAe;EACzDC,UAAU,EAAEN,qBAAqB;EACjCO,YAAY,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC;EAC7BC,QAAQ,EAAEA,CAACC,EAAY,EAAEC,KAAe,EAAEC,KAAmB,KAAI;IAC/D,MAAM;MAACC,SAAS;MAAEC,OAAO;MAAEC,GAAG;MAAEC;IAAe,CAAC,GAC5CJ,KAA8C;IAClD,MAAMK,UAAU,GAAGJ,SAAS,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAmB,GAAGA,SAAS;IAE3ER,IAAI,CAACa,MAAM,CACPhB,SAAS,CAACiB,iBAAiB,CAACF,UAAU,CAAC,EACvC,MAAM,6DAA6D,GAC/D,sDAAsD,GACtD,IAAIA,UAAU,GAAG,CAAC;IAE1B,MAAM,CAACG,CAAC,EAAEC,MAAM,CAAC,GAAGV,KAA6B;IAEjDN,IAAI,CAACa,MAAM,CACPE,CAAC,CAACE,IAAI,KAAK,CAAC,EACZ,MAAM,4DAA4D,GAC9D,wBAAwBF,CAAC,CAACE,IAAI,GAAG,CAAC;IAC1CjB,IAAI,CAACa,MAAM,CACPG,MAAM,CAACC,IAAI,KAAK,CAAC,EACjB,MAAM,6DAA6D,GAC/D,wBAAwBD,MAAM,CAACC,IAAI,GAAG,CAAC;IAC/CjB,IAAI,CAACa,MAAM,CACPE,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,KAAKF,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC,EAC9B,MAAM,wDAAwD,GAC1D,aAAaH,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,wCAAwC,GAC/D,aAAaF,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IAExClB,IAAI,CAACa,MAAM,CACPhB,SAAS,CAACsB,8BAA8B,CAACV,OAAO,EAAEG,UAAU,CAAC,EAC7D,MAAM,0DAA0D,GAC5D,qCAAqCH,OAAO,iBAAiB,GAC7D,IAAIG,UAAU,IAAI,CAAC;IAE3Bf,SAAS,CAACuB,yBAAyB,CAC/B,iBAAiB,EAAEV,GAAG,EAAEC,eAAe,CAAC;IAE5C,OAAO;MACLI,CAAC,EAAEA,CAAA,KAAMhB,kCAAkC,CACvCgB,CAAC,CAACG,KAAK,EAAEb,EAAE,EAAEW,MAAM,EAAEP,OAAO,EAAEC,GAAG,EAAEE,UAAU,EAAED,eAAe,CAAC;MACnEK,MAAM,EAAEA,CAAA,KAAMlB,mCAAmC,CAC7CiB,CAAC,EAAEV,EAAE,EAAEW,MAAM,CAACE,KAAK,EAAET,OAAO,EAAEC,GAAG,EAAEE,UAAU,EAAED,eAAe;KACnE;EACH;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}