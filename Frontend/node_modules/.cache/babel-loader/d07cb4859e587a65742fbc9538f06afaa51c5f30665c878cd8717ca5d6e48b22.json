{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1, t2) {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n  util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` + `${$t1.rank} and ${$t2.rank}.`);\n  const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];\n  const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];\n  util.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` + `${t1Inner} and ${t2Inner}.`);\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\nexport const dot = /* @__PURE__ */op({\n  dot_\n});","map":{"version":3,"names":["convertToTensor","util","matMul","op","reshape","dot_","t1","t2","$t1","$t2","assert","rank","t1Inner","size","shape","t2Inner","t12D","t22D","t1t2","dot"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/dot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor,} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1: Tensor|TensorLike, t2: Tensor|TensorLike): Tensor {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n\n  util.assert(\n      ($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2),\n      () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n          `${$t1.rank} and ${$t2.rank}.`);\n\n  const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n  const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n\n  util.assert(\n      t1Inner === t2Inner,\n      () => `Error in dot: inner dimensions of inputs must match, but got ` +\n          `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\n\nexport const dot = /* @__PURE__ */ op({dot_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AAEjC;;;;;;;;;;;;;;;;;AAiBA,SAASC,IAAIA,CAACC,EAAqB,EAAEC,EAAqB;EACxD,MAAMC,GAAG,GAAGR,eAAe,CAACM,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;EAC5C,MAAMG,GAAG,GAAGT,eAAe,CAACO,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;EAE5CN,IAAI,CAACS,MAAM,CACP,CAACF,GAAG,CAACG,IAAI,KAAK,CAAC,IAAIH,GAAG,CAACG,IAAI,KAAK,CAAC,MAAMF,GAAG,CAACE,IAAI,KAAK,CAAC,IAAIF,GAAG,CAACE,IAAI,KAAK,CAAC,CAAC,EACxE,MAAM,8DAA8D,GAChE,GAAGH,GAAG,CAACG,IAAI,QAAQF,GAAG,CAACE,IAAI,GAAG,CAAC;EAEvC,MAAMC,OAAO,GAAIJ,GAAG,CAACG,IAAI,KAAK,CAAC,GAAGH,GAAG,CAACK,IAAI,GAAGL,GAAG,CAACM,KAAK,CAAC,CAAC,CAAE;EAC1D,MAAMC,OAAO,GAAIN,GAAG,CAACE,IAAI,KAAK,CAAC,GAAGF,GAAG,CAACI,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAAC,CAAC,CAAE;EAE1Db,IAAI,CAACS,MAAM,CACPE,OAAO,KAAKG,OAAO,EACnB,MAAM,+DAA+D,GACjE,GAAGH,OAAO,QAAQG,OAAO,GAAG,CAAC;EAErC,IAAIP,GAAG,CAACG,IAAI,KAAK,CAAC,IAAIF,GAAG,CAACE,IAAI,KAAK,CAAC,EAAE;IACpC,MAAMK,IAAI,GAAGZ,OAAO,CAACI,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,MAAMS,IAAI,GAAGb,OAAO,CAACK,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,MAAMS,IAAI,GAAGhB,MAAM,CAACc,IAAI,EAAEC,IAAI,CAAC;IAC/B,OAAOb,OAAO,CAACc,IAAI,EAAE,EAAE,CAAC;GACzB,MAAM,IAAIV,GAAG,CAACG,IAAI,KAAK,CAAC,IAAIF,GAAG,CAACE,IAAI,KAAK,CAAC,EAAE;IAC3C,MAAMK,IAAI,GAAGZ,OAAO,CAACI,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,MAAMS,IAAI,GAAGb,OAAO,CAACK,GAAG,EAAE,CAACA,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEL,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMI,IAAI,GAAGhB,MAAM,CAACc,IAAI,EAAEC,IAAI,CAAC;IAC/B,OAAOb,OAAO,CAACc,IAAI,EAAE,CAACA,IAAI,CAACL,IAAI,CAAC,CAAC;GAClC,MAAM,IAAIL,GAAG,CAACG,IAAI,KAAK,CAAC,IAAIF,GAAG,CAACE,IAAI,KAAK,CAAC,EAAE;IAC3C,MAAMM,IAAI,GAAGb,OAAO,CAACK,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,MAAMS,IAAI,GAAGhB,MAAM,CAACM,GAAG,EAAES,IAAI,CAAC;IAC9B,OAAOb,OAAO,CAACc,IAAI,EAAE,CAACA,IAAI,CAACL,IAAI,CAAC,CAAC;GAClC,MAAM;IACL,MAAMI,IAAI,GAAGb,OAAO,CAACK,GAAG,EAAE,CAACA,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,EAAEL,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMI,IAAI,GAAGhB,MAAM,CAACM,GAAG,EAAES,IAAI,CAAC;IAC9B,OAAOC,IAAI;;AAEf;AAEA,OAAO,MAAMC,GAAG,GAAG,eAAgBhB,EAAE,CAAC;EAACE;AAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}