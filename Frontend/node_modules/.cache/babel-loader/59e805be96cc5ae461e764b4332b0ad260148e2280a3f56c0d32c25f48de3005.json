{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/ops';\nimport { square } from '../ops/square';\nimport { zerosLike } from '../ops/zeros_like';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adadelta';\n  }\n  constructor(learningRate, rho, epsilon = null) {\n    super();\n    this.learningRate = learningRate;\n    this.rho = rho;\n    this.epsilon = epsilon;\n    this.accumulatedGrads = [];\n    this.accumulatedUpdates = [];\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n      tidy(() => {\n        const newAccumulatedGrad = add(mul(accumulatedGrad, this.rho), mul(square(gradient), 1 - this.rho));\n        const updates = mul(div(sqrt(add(accumulatedUpdate, this.epsilon)), sqrt(add(accumulatedGrad, this.epsilon))), gradient);\n        const newAccumulatedUpdate = add(mul(accumulatedUpdate, this.rho), mul(square(updates), 1 - this.rho));\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n        const newValue = add(mul(updates, -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n      dispose(this.accumulatedUpdates.map(v => v.variable));\n    }\n  }\n  async getWeights() {\n    // Order matters for Python compatibility.\n    const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(variables.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads = weightValues.slice(0, variableCount).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedUpdates = weightValues.slice(variableCount, variableCount * 2).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'rho': this.rho,\n      'epsilon': this.epsilon\n    };\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['rho'], config['epsilon']);\n  }\n}","map":{"version":3,"names":["ENGINE","dispose","tidy","add","div","mul","sqrt","square","zerosLike","Optimizer","AdadeltaOptimizer","className","constructor","learningRate","rho","epsilon","accumulatedGrads","accumulatedUpdates","backend","applyGradients","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","forEach","i","value","registeredVariables","trainable","originalName","variable","gradient","tensor","accumulatedGrad","accumulatedUpdate","newAccumulatedGrad","updates","newAccumulatedUpdate","assign","newValue","incrementIterations","v","getWeights","variables","saveIterations","concat","setWeights","weightValues","extractIterations","variableCount","length","slice","getConfig","fromConfig","cls","config"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/optimizers/adadelta_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/ops';\nimport {square} from '../ops/square';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adadelta';\n  }\n  private accumulatedGrads: OptimizerVariable[] = [];\n  private accumulatedUpdates: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected rho: number,\n      protected epsilon: number = null) {\n    super();\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad =\n            add(mul(accumulatedGrad, this.rho),\n                mul(square(gradient), 1 - this.rho));\n\n        const updates =\n            mul(div(sqrt(add(accumulatedUpdate, this.epsilon)),\n                    sqrt(add(accumulatedGrad, this.epsilon))),\n                gradient);\n\n        const newAccumulatedUpdate =\n            add(mul(accumulatedUpdate, this.rho),\n                mul(square(updates), 1 - this.rho));\n\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n\n        const newValue = add(mul(updates, -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n      dispose(this.accumulatedUpdates.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedUpdates =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'rho': this.rho,\n      'epsilon': this.epsilon\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['rho'], config['epsilon']);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}