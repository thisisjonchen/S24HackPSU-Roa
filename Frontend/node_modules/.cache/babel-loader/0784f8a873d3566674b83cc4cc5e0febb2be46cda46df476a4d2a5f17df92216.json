{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, TensorScatterUpdate } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function tensorScatterUpdate(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    tensor,\n    indices,\n    updates\n  } = inputs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, tensor.shape);\n  const sumDupeIndices = false;\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n  const tensorBuf = backend.bufferSync(tensor);\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, tensor.shape, outputSize, sliceSize, numUpdates, sliceRank, strides, tensorBuf, sumDupeIndices);\n  return backend.makeTensorInfo(tensor.shape, outBuf.dtype, outBuf.values);\n}\nexport const tensorScatterUpdateConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'cpu',\n  kernelFunc: tensorScatterUpdate\n};","map":{"version":3,"names":["backend_util","TensorScatterUpdate","scatterImpl","tensorScatterUpdate","args","inputs","backend","tensor","indices","updates","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","shape","sumDupeIndices","indicesBuf","bufferSync","updatesBuf","tensorBuf","outBuf","makeTensorInfo","dtype","values","tensorScatterUpdateConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/TensorScatterUpdate.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {scatterImpl} from './Scatter_impl';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendCPU,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {tensor, indices, updates} = inputs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n  const tensorBuf = backend.bufferSync<Rank, 'int32'|'float32'>(tensor);\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, tensor.shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, tensorBuf, sumDupeIndices);\n  return backend.makeTensorInfo(tensor.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'cpu',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA8CC,mBAAmB,QAA4D,uBAAuB;AAIxK,SAAQC,WAAW,QAAO,gBAAgB;AAE1C,OAAM,SAAUC,mBAAmBA,CAACC,IAInC;EACC,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,MAAM;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAGJ,MAAM;EAEzC,MAAM;IAACK,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAU,CAAC,GACzDd,YAAY,CAACe,eAAe,CAACN,OAAO,EAAED,OAAO,EAAED,MAAM,CAACS,KAAK,CAAC;EAChE,MAAMC,cAAc,GAAG,KAAK;EAE5B,MAAMC,UAAU,GAAGZ,OAAO,CAACa,UAAU,CAAgBX,OAAO,CAAC;EAC7D,MAAMY,UAAU,GAAGd,OAAO,CAACa,UAAU,CAA0BV,OAAO,CAAC;EACvE,MAAMY,SAAS,GAAGf,OAAO,CAACa,UAAU,CAA0BZ,MAAM,CAAC;EACrE,MAAMe,MAAM,GAAGpB,WAAW,CACtBgB,UAAU,EAAEE,UAAU,EAAEb,MAAM,CAACS,KAAK,EAAEF,UAAU,EAAEF,SAAS,EAAED,UAAU,EACvED,SAAS,EAAEG,OAAO,EAAEQ,SAAS,EAAEJ,cAAc,CAAC;EAClD,OAAOX,OAAO,CAACiB,cAAc,CAAChB,MAAM,CAACS,KAAK,EAAEM,MAAM,CAACE,KAAK,EAAEF,MAAM,CAACG,MAAM,CAAC;AAC1E;AAEA,OAAO,MAAMC,yBAAyB,GAAiB;EACrDC,UAAU,EAAE1B,mBAAmB;EAC/B2B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}