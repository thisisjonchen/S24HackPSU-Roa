{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  const customValues = [[constantValue]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2\n};","map":{"version":3,"names":["env","PadV2","util","PadProgram","PadPackedProgram","fill","padV2","args","inputs","backend","attrs","x","paddings","constantValue","sizeFromShape","shape","outputShape","map","p","i","value","dtype","program","getBool","customValues","runWebGLProgram","padV2Config","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/PadV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,EAA4BC,KAAK,EAAuCC,IAAI,QAAO,uBAAuB;AAGrH,SAAQC,UAAU,QAAO,YAAY;AACrC,SAAQC,gBAAgB,QAAO,mBAAmB;AAClD,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAO,MAAMC,KAAK,GACbC,IAAyE,IACzD;EACX,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,QAAQ;IAAEC;EAAa,CAAC,GAAGH,KAAK;EAEvC,IAAIR,IAAI,CAACY,aAAa,CAACH,CAAC,CAACI,KAAK,CAAC,KAAK,CAAC,EAAE;IACrC;IACA;IACA,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,GAAG,CAC5B,CAACC,CAAC,EAAEC,CAAC,KACDD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBP,CAAC,CAACI,KAAK,CAACI,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;IAChE,OAAOb,IAAI,CAAC;MACVI,OAAO;MACPC,KAAK,EAAE;QAACK,KAAK,EAAEC,WAAW;QAAEI,KAAK,EAAEP,aAAa;QAAEQ,KAAK,EAAEV,CAAC,CAACU;MAAK;KACjE,CAAC;;EAGJ,MAAMC,OAAO,GAAGtB,GAAG,EAAE,CAACuB,OAAO,CAAC,6BAA6B,CAAC,GACxD,IAAInB,gBAAgB,CAACO,CAAC,CAACI,KAAK,EAAEH,QAAQ,EAAEC,aAAa,CAAC,GACtD,IAAIV,UAAU,CAACQ,CAAC,CAACI,KAAK,EAAEH,QAAQ,EAAEC,aAAa,CAAC;EACpD,MAAMW,YAAY,GAAG,CAAC,CAACX,aAAa,CAAC,CAAC;EACtC,OAAOJ,OAAO,CAACgB,eAAe,CAACH,OAAO,EAAE,CAACX,CAAC,CAAC,EAAEA,CAAC,CAACU,KAAK,EAAEG,YAAY,CAAC;AACrE,CAAC;AAET,OAAO,MAAME,WAAW,GAAiB;EACvCC,UAAU,EAAE1B,KAAK;EACjB2B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEvB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}