{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'min');\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n  const aVals = backend.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) || value < min) {\n        // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult = reshape({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        shape: expandedShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n  return result;\n}\nexport const minConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min\n};","map":{"version":3,"names":["backend_util","Min","util","assertNotComplex","reshape","transpose","min","args","inputs","backend","attrs","x","axis","keepDims","origAxes","parseAxisParam","shape","axes","permutedAxes","getAxesPermutation","length","$x","perm","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","reduceSize","sizeFromShape","vals","makeZerosTypedArray","dtype","aVals","data","get","dataId","values","i","offset","j","value","Number","isNaN","disposeIntermediateTensorInfo","result","makeTensorInfo","expandedShape","expandShapeToKeepDim","reshapedResult","minConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Min.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}