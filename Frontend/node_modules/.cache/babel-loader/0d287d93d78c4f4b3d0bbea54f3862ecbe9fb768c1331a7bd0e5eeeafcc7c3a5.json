{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n  delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n  contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion, customCanvas) {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n  return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n  canvas.addEventListener('webglcontextlost', ev => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n  if (webGLVersion === 1) {\n    return (\n      // tslint:disable-next-line\n      canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)\n    );\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}","map":{"version":3,"names":["env","contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","clearWebGLContext","webGLVersion","setWebGLContext","gl","getWebGLContext","customCanvas","newCtx","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","createCanvas","getBool","OffscreenCanvas","document","createElement","Error","canvas","addEventListener","ev","preventDefault","getContext"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/canvas_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' &&\n      webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (\n        // tslint:disable-next-line\n        canvas.getContext('webgl', WEBGL_ATTRIBUTES) as WebGLRenderingContext ||\n        (canvas as HTMLCanvasElement)\n            .getContext('experimental-webgl',\n                        WEBGL_ATTRIBUTES) as WebGLRenderingContext);\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}