{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values;\n    const weightsVals = backend.data.get(weights.dataId).values;\n    const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount\n};","map":{"version":3,"names":["DenseBincount","bincountImpl","bincountReduceImpl","denseBincount","args","inputs","backend","attrs","x","weights","size","binaryOutput","shape","length","xVals","data","get","dataId","values","weightsVals","outVals","dtype","makeTensorInfo","xBuf","bufferSync","weightsBuf","outBuf","Error","denseBincountConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/DenseBincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAa,QAAwG,uBAAuB;AAGpJ,SAAQC,YAAY,EAAEC,kBAAkB,QAAO,iBAAiB;AAEhE,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAO,CAAC,GAAGJ,MAAM;EAC3B,MAAM;IAACK,IAAI;IAAEC;EAAY,CAAC,GAAGJ,KAAK;EAElC,IAAIC,CAAC,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,MAAMC,KAAK,GAAGR,OAAO,CAACS,IAAI,CAACC,GAAG,CAACR,CAAC,CAACS,MAAM,CAAC,CAACC,MAAoB;IAC7D,MAAMC,WAAW,GAAGb,OAAO,CAACS,IAAI,CAACC,GAAG,CAACP,OAAO,CAACQ,MAAM,CAAC,CAACC,MAAoB;IAEzE,MAAME,OAAO,GACTnB,YAAY,CAACa,KAAK,EAAEK,WAAW,EAAEV,OAAO,CAACY,KAAK,EAAEZ,OAAO,CAACG,KAAK,EAAEF,IAAI,CAAC;IAExE,OAAOJ,OAAO,CAACgB,cAAc,CAAC,CAACZ,IAAI,CAAC,EAAED,OAAO,CAACY,KAAK,EAAED,OAAO,CAAC;GAC9D,MAAM,IAAIZ,CAAC,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAMU,IAAI,GAAGjB,OAAO,CAACkB,UAAU,CAAkBhB,CAAC,CAAC;IACnD,MAAMiB,UAAU,GAAGnB,OAAO,CAACkB,UAAU,CAAkBf,OAAO,CAAC;IAE/D,MAAMiB,MAAM,GAAGxB,kBAAkB,CAACqB,IAAI,EAAEE,UAAU,EAAEf,IAAI,EAAEC,YAAY,CAAC;IAEvE,OAAOL,OAAO,CAACgB,cAAc,CAACI,MAAM,CAACd,KAAK,EAAEH,OAAO,CAACY,KAAK,EAAEK,MAAM,CAACR,MAAM,CAAC;;EAG3E,MAAM,IAAIS,KAAK,CACX,oEAAoE,GACpE,GAAGnB,CAAC,CAACI,KAAK,CAACC,MAAM,GAAG,CAAC;AAC3B;AAEA,OAAO,MAAMe,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE7B,aAAa;EACzB8B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE5B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}