{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      varianceEpsilon\n    } = attrs;\n    const [x, mean, variance, scale] = saved;\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape);\n    };\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};","map":{"version":3,"names":["FusedBatchNorm","add","getReductionAxes","mul","reshape","rsqrt","scalar","sub","sum","tile","fusedBatchNormGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","varianceEpsilon","x","mean","variance","scale","scaleValue","reductionAxes","shape","tileShape","rank","i","length","push","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","derX","derMean","meanDer","derVariance","varianceDer","derScale","xMinusMean2TimesRsqrt","scaleDer","derOffset","offsetDer","offset"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/gradients/FusedBatchNorm_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {FusedBatchNorm, FusedBatchNormAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {getReductionAxes} from '../ops/broadcast_util';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {rsqrt} from '../ops/rsqrt';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {tile} from '../ops/tile';\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nexport const fusedBatchNormGradConfig: GradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: <R extends Rank>(\n      dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const [x, mean, variance, scale] = saved;\n\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape: number[] = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(\n        mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance),\n        scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(\n            mul(mul(dy,\n                    tile(\n                        reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]),\n                        tileShape)),\n                scaleValue),\n            x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer =\n          mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape as ShapeMap[R]);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}