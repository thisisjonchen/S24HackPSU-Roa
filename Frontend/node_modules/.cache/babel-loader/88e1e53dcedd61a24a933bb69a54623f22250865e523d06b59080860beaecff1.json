{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values;\n    const {\n      outVals,\n      outShape,\n      outDtype\n    } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};","map":{"version":3,"names":["backend_util","Prod","sumOutType","util","reduce","prodImplCPU","reshape","transpose","prod","args","inputs","backend","attrs","x","axis","keepDims","xRank","shape","length","toDispose","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","permutedX","perm","getInnerMostAxes","push","assertAxesAreInnerMostDims","res","shouldExecuteOnCPU","xVals","texData","get","dataId","values","outVals","outShape","outDtype","dtype","makeTensorInfo","reduceShape","computeOutAndReduceShapes","inSize","sizeFromShape","a2D","outputDType","reduced","newShape","expandShapeToKeepDim","forEach","t","disposeIntermediateTensorInfo","prodConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Prod.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}