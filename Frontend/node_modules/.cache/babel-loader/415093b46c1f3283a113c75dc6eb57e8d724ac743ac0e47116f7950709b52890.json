{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport class PlatformNode {\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n  fetch(path, requestInits) {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n  now() {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n  encode(text, encoding) {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes, encoding) {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n  isTypedArray(a) {\n    return this.util.types.isFloat32Array(a) || this.util.types.isInt32Array(a) || this.util.types.isUint8Array(a) || this.util.types.isUint8ClampedArray(a);\n  }\n}\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":{"version":3,"names":["env","getNodeFetch","importFetch","require","systemFetch","resetSystemFetch","setSystemFetch","fetchFn","getSystemFetch","PlatformNode","constructor","util","textEncoder","TextEncoder","fetch","path","requestInits","global","now","time","process","hrtime","encode","text","encoding","Error","decode","bytes","length","TextDecoder","isTypedArray","a","types","isFloat32Array","isInt32Array","isUint8Array","isUint8ClampedArray","get","setPlatform"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/platforms/platform_node.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n  isTypedArray(a: unknown): a is Float32Array | Int32Array | Uint8Array\n    | Uint8ClampedArray {\n    return this.util.types.isFloat32Array(a)\n      || this.util.types.isInt32Array(a)\n      || this.util.types.isUint8Array(a)\n      || this.util.types.isUint8ClampedArray(a);\n  }\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,GAAG,QAAO,gBAAgB;AAGlC;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1B;EACAC,WAAW,EAAEA,CAAA,KAAMC,OAAO,CAAC,YAAY;CACxC;AAGD,IAAIC,WAAoB;AACxB;AACA;AACA,OAAM,SAAUC,gBAAgBA,CAAA;EAC9BD,WAAW,GAAG,IAAI;AACpB;AACA,OAAM,SAAUE,cAAcA,CAACC,OAAgB;EAC7CH,WAAW,GAAGG,OAAO;AACvB;AACA,OAAM,SAAUC,cAAcA,CAAA;EAC5B,OAAOJ,WAAW;AACpB;AAEA,OAAM,MAAOK,YAAY;EAKvBC,YAAA;IACE;IACA,IAAI,CAACC,IAAI,GAAGR,OAAO,CAAC,MAAM,CAAC;IAC3B;IACA;IACA,IAAI,CAACS,WAAW,GAAG,IAAI,IAAI,CAACD,IAAI,CAACE,WAAW,EAAE;EAChD;EAEAC,KAAKA,CAACC,IAAY,EAAEC,YAA0B;IAC5C,IAAIhB,GAAG,EAAE,CAACiB,MAAM,CAACH,KAAK,IAAI,IAAI,EAAE;MAC9B,OAAOd,GAAG,EAAE,CAACiB,MAAM,CAACH,KAAK,CAACC,IAAI,EAAEC,YAAY,CAAC;;IAG/C,IAAIZ,WAAW,IAAI,IAAI,EAAE;MACvBA,WAAW,GAAGH,YAAY,CAACC,WAAW,EAAE;;IAE1C,OAAOE,WAAW,CAACW,IAAI,EAAEC,YAAY,CAAC;EACxC;EAEAE,GAAGA,CAAA;IACD,MAAMC,IAAI,GAAGC,OAAO,CAACC,MAAM,EAAE;IAC7B,OAAOF,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO;EAC3C;EAEAG,MAAMA,CAACC,IAAY,EAAEC,QAAgB;IACnC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;MAC/C,MAAM,IAAIC,KAAK,CACX,sDAAsDD,QAAQ,EAAE,CAAC;;IAEvE,OAAO,IAAI,CAACZ,WAAW,CAACU,MAAM,CAACC,IAAI,CAAC;EACtC;EACAG,MAAMA,CAACC,KAAiB,EAAEH,QAAgB;IACxC,IAAIG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,EAAE;;IAEX,OAAO,IAAI,IAAI,CAACjB,IAAI,CAACkB,WAAW,CAACL,QAAQ,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAC1D;EACAG,YAAYA,CAACC,CAAU;IAErB,OAAO,IAAI,CAACpB,IAAI,CAACqB,KAAK,CAACC,cAAc,CAACF,CAAC,CAAC,IACnC,IAAI,CAACpB,IAAI,CAACqB,KAAK,CAACE,YAAY,CAACH,CAAC,CAAC,IAC/B,IAAI,CAACpB,IAAI,CAACqB,KAAK,CAACG,YAAY,CAACJ,CAAC,CAAC,IAC/B,IAAI,CAACpB,IAAI,CAACqB,KAAK,CAACI,mBAAmB,CAACL,CAAC,CAAC;EAC7C;;AAGF,IAAI/B,GAAG,EAAE,CAACqC,GAAG,CAAC,SAAS,CAAC,IAAI,CAACrC,GAAG,EAAE,CAACqC,GAAG,CAAC,YAAY,CAAC,EAAE;EACpDrC,GAAG,EAAE,CAACsC,WAAW,CAAC,MAAM,EAAE,IAAI7B,YAAY,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}