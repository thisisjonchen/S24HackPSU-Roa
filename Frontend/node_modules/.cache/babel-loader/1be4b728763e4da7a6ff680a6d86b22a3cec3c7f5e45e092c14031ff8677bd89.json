{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    const values = cpuBackend.data.get(x.dataId).values;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":{"version":3,"names":["MaxPoolWithArgmax","backend_util","assertNotComplex","maxPoolWithArgmaxImpl","maxPoolWithArgmaxConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","filterSize","strides","pad","includeBatchInIndex","cpuBackend","values","data","get","dataId","convInfo","computePool2DInfo","shape","pooled","indexes","dtype","pooledDataId","write","outShape","indexesDataId"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,QAAwD,uBAAuB;AACxG,SAAQC,YAAY,QAAiC,uBAAuB;AAE5E,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,SAAQC,qBAAqB,QAAO,0BAA0B;AAE9D,OAAO,MAAMC,uBAAuB,GAAiB;EACnDC,UAAU,EAAEL,iBAAiB;EAC7BM,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEA,CAAC;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAI;IACvC,MAAM;MAACC;IAAC,CAAC,GAAGH,MAAiC;IAC7C,MAAM;MAACI,UAAU;MAAEC,OAAO;MAAEC,GAAG;MAAEC;IAAmB,CAAC,GACjDN,KAA0C;IAC9C,MAAMO,UAAU,GAAGN,OAAyB;IAC5CR,gBAAgB,CAACS,CAAC,EAAE,mBAAmB,CAAC;IAExC,MAAMM,MAAM,GAAGD,UAAU,CAACE,IAAI,CAACC,GAAG,CAACR,CAAC,CAACS,MAAM,CAAC,CAACH,MAAoB;IACjE,MAAMI,QAAQ,GAAGpB,YAAY,CAACqB,iBAAiB,CAC3CX,CAAC,CAACY,KAAyC,EAAEX,UAAU,EAAEC,OAAO,EAChE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,GAAG,CAAC;IAChB,MAAM,CAACU,MAAM,EAAEC,OAAO,CAAC,GAAGtB,qBAAqB,CAC3Cc,MAAM,EAAEN,CAAC,CAACY,KAAK,EAAEZ,CAAC,CAACe,KAAK,EAAEX,mBAAmB,EAAEM,QAAQ,CAAC;IAE5D,MAAMM,YAAY,GACdX,UAAU,CAACY,KAAK,CAACJ,MAAsB,EAAEH,QAAQ,CAACQ,QAAQ,EAAElB,CAAC,CAACe,KAAK,CAAC;IACxE,MAAMI,aAAa,GACfd,UAAU,CAACY,KAAK,CAACH,OAAqB,EAAEJ,QAAQ,CAACQ,QAAQ,EAAElB,CAAC,CAACe,KAAK,CAAC;IACvE,OAAO,CACL;MAACN,MAAM,EAAEO,YAAY;MAAEJ,KAAK,EAAEF,QAAQ,CAACQ,QAAQ;MAAEH,KAAK,EAAEf,CAAC,CAACe;IAAK,CAAC,EAChE;MAACN,MAAM,EAAEU,aAAa;MAAEP,KAAK,EAAEF,QAAQ,CAACQ,QAAQ;MAAEH,KAAK,EAAE;IAAO,CAAC,CAClE;EACH;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}