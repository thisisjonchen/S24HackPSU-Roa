{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { cast } from './cast';\nimport { mean } from './mean';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { square } from './square';\nimport { sub } from './sub';\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction moments_(x, axis = null, keepDims = false) {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {\n    mean: xMean,\n    variance\n  };\n}\nexport const moments = /* @__PURE__ */op({\n  moments_\n});","map":{"version":3,"names":["convertToTensor","parseAxisParam","expandShapeToKeepDim","cast","mean","op","reshape","square","sub","moments_","x","axis","keepDims","axes","shape","xMean","keepDimsShape","devSquared","variance","moments"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/moments.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {expandShapeToKeepDim} from './axis_util';\nimport {cast} from './cast';\nimport {mean} from './mean';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {square} from './square';\nimport {sub} from './sub';\n\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction moments_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): {mean: Tensor, variance: Tensor} {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared =\n      square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {mean: xMean, variance};\n}\n\nexport const moments = /* @__PURE__ */ op({moments_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAe,QAAO,oBAAoB;AAElD,SAAQC,cAAc,QAAO,SAAS;AAEtC,SAAQC,oBAAoB,QAAO,aAAa;AAChD,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,MAAM,QAAO,UAAU;AAC/B,SAAQC,GAAG,QAAO,OAAO;AAEzB;;;;;;;;;;;;;;AAcA,SAASC,QAAQA,CACbC,CAAoB,EAAEC,IAAA,GAAwB,IAAI,EAClDC,QAAQ,GAAG,KAAK;EAClBF,CAAC,GAAGV,eAAe,CAACU,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC;EACtC,MAAMG,IAAI,GAAGZ,cAAc,CAACU,IAAI,EAAED,CAAC,CAACI,KAAK,CAAC;EAC1C,MAAMC,KAAK,GAAGX,IAAI,CAACM,CAAC,EAAEG,IAAI,EAAED,QAAQ,CAAC;EACrC,IAAII,aAAa,GAAGD,KAAK,CAACD,KAAK;EAC/B,IAAI,CAACF,QAAQ,EAAE;IACbI,aAAa,GAAGd,oBAAoB,CAACa,KAAK,CAACD,KAAK,EAAED,IAAI,CAAC;;EAEzD,MAAMI,UAAU,GACZV,MAAM,CAACC,GAAG,CAACL,IAAI,CAACO,CAAC,EAAE,SAAS,CAAC,EAAEJ,OAAO,CAACS,KAAK,EAAEC,aAAa,CAAC,CAAC,CAAC;EAClE,MAAME,QAAQ,GAAGd,IAAI,CAACa,UAAU,EAAEJ,IAAI,EAAED,QAAQ,CAAC;EACjD,OAAO;IAACR,IAAI,EAAEW,KAAK;IAAEG;EAAQ,CAAC;AAChC;AAEA,OAAO,MAAMC,OAAO,GAAG,eAAgBd,EAAE,CAAC;EAACI;AAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}