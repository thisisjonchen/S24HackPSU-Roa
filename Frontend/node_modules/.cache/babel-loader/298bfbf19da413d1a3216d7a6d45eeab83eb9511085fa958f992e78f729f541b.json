{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n  get id() {\n    return this.idTensor.id;\n  }\n  get closed() {\n    return this.closed_;\n  }\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n    }\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);\n    }\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices) {\n    return indices.map(index => this.read(index));\n  }\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index, tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n    const t = this.tensors[index] || {};\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n    if (t.read) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n    }\n    if (t.written) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n    }\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n    this.tensors[index] = t;\n  }\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices, tensors) {\n    if (indices.length !== tensors.length) {\n      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n    }\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices, dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n    }\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n    return stack(tensors, 0);\n  }\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n    }\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n    return concat(tensors, 0);\n  }\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');\n    }\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}","map":{"version":3,"names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","TensorArray","constructor","name","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","tensors","closed_","idTensor","id","closed","clearAndClose","keepIds","forEach","has","dispose","size","length","read","index","Error","tensorWithState","cleared","readMany","indices","map","write","t","shape","written","writeMany","i","gather","push","scatter","maxIndex","Math","max","split","totalLength","cumulativeLengths","len","elementPerRow","previousLength","sizes"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-converter/src/executor/tensor_array.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}