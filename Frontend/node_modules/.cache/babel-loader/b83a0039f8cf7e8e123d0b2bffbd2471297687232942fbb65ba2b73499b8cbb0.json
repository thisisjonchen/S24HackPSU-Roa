{"ast":null,"code":"/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { image, serialization, tidy } from '@tensorflow/tfjs-core'; // mul, add\nimport { Layer } from '../../engine/topology';\nimport { ValueError } from '../../errors';\nimport { getExactlyOneShape } from '../../utils/types_utils'; //, getExactlyOneTensor\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nconst INTERPOLATION_KEYS = ['bilinear', 'nearest'];\nconst INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\nclass Resizing extends Layer {\n  constructor(args) {\n    super(args);\n    this.height = args.height;\n    this.width = args.width;\n    if (args.interpolation) {\n      if (INTERPOLATION_METHODS.has(args.interpolation)) {\n        this.interpolation = args.interpolation;\n      } else {\n        throw new ValueError(`Invalid interpolation parameter: ${args.interpolation} is not implemented`);\n      }\n    } else {\n      this.interpolation = 'bilinear';\n    }\n    this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const numChannels = inputShape[2];\n    return [this.height, this.width, numChannels];\n  }\n  getConfig() {\n    const config = {\n      'height': this.height,\n      'width': this.width,\n      'interpolation': this.interpolation,\n      'cropToAspectRatio': this.cropToAspectRatio\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const size = [this.height, this.width];\n      if (this.interpolation === 'bilinear') {\n        return image.resizeBilinear(inputs, size, !this.cropToAspectRatio);\n      } else if (this.interpolation === 'nearest') {\n        return image.resizeNearestNeighbor(inputs, size, !this.cropToAspectRatio);\n      } else {\n        throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`);\n      }\n    });\n  }\n}\n/** @nocollapse */\nResizing.className = 'Resizing';\nexport { Resizing };\nserialization.registerClass(Resizing);","map":{"version":3,"names":["image","serialization","tidy","Layer","ValueError","getExactlyOneShape","INTERPOLATION_KEYS","INTERPOLATION_METHODS","Set","Resizing","constructor","args","height","width","interpolation","has","cropToAspectRatio","Boolean","computeOutputShape","inputShape","numChannels","getConfig","config","baseConfig","Object","assign","call","inputs","kwargs","size","resizeBilinear","resizeNearestNeighbor","Error","className","registerClass"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/layers/preprocessing/image_resizing.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {image, Rank, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';  // mul, add\n\nimport {Layer, LayerArgs} from '../../engine/topology';\nimport {ValueError} from '../../errors';\nimport {Shape} from '../../keras_format/common';\nimport {Kwargs} from '../../types';\nimport {getExactlyOneShape} from '../../utils/types_utils';  //, getExactlyOneTensor\n\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nconst INTERPOLATION_KEYS = ['bilinear', 'nearest'] as const;\nconst INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\ntype InterpolationType = typeof INTERPOLATION_KEYS[number];\n\nexport declare interface ResizingArgs extends LayerArgs {\n  height: number;\n  width: number;\n  interpolation?: InterpolationType; // default = 'bilinear';\n  cropToAspectRatio?: boolean;       // default = false;\n}\n\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\n\nexport class Resizing extends Layer {\n  /** @nocollapse */\n  static className = 'Resizing';\n  private readonly height: number;\n  private readonly width: number;\n  // method of interpolation to be used; default = \"bilinear\";\n  private readonly interpolation: InterpolationType;\n  // toggle whether the aspect ratio should be preserved; default = false;\n  private readonly cropToAspectRatio: boolean;\n\n  constructor(args: ResizingArgs) {\n    super(args);\n\n    this.height = args.height;\n    this.width = args.width;\n\n    if (args.interpolation) {\n      if (INTERPOLATION_METHODS.has(args.interpolation)) {\n        this.interpolation = args.interpolation;\n      } else {\n        throw new ValueError(`Invalid interpolation parameter: ${\n            args.interpolation} is not implemented`);\n      }\n    } else {\n      this.interpolation = 'bilinear';\n    }\n    this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const numChannels = inputShape[2];\n    return [this.height, this.width, numChannels];\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'height': this.height,\n      'width': this.width,\n      'interpolation': this.interpolation,\n      'cropToAspectRatio': this.cropToAspectRatio\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor<Rank.R3>|Tensor<Rank.R4>, kwargs: Kwargs):\n      Tensor[]|Tensor {\n    return tidy(() => {\n      const size: [number, number] = [this.height, this.width];\n      if (this.interpolation === 'bilinear') {\n        return image.resizeBilinear(inputs, size, !this.cropToAspectRatio);\n      } else if (this.interpolation === 'nearest') {\n        return image.resizeNearestNeighbor(\n            inputs, size, !this.cropToAspectRatio);\n      } else {\n        throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`);\n      }\n    });\n  }\n}\n\nserialization.registerClass(Resizing);\n"],"mappings":"AAAA;;;;;;;;;AAUA,SAAQA,KAAK,EAAQC,aAAa,EAAUC,IAAI,QAAO,uBAAuB,CAAC,CAAE;AAEjF,SAAQC,KAAK,QAAkB,uBAAuB;AACtD,SAAQC,UAAU,QAAO,cAAc;AAGvC,SAAQC,kBAAkB,QAAO,yBAAyB,CAAC,CAAE;AAE7D;AACA;AACA,MAAMC,kBAAkB,GAAG,CAAC,UAAU,EAAE,SAAS,CAAU;AAC3D,MAAMC,qBAAqB,GAAG,IAAIC,GAAG,CAACF,kBAAkB,CAAC;AAUzD;;;;;AAMA,MAAaG,QAAS,SAAQN,KAAK;EAUjCO,YAAYC,IAAkB;IAC5B,KAAK,CAACA,IAAI,CAAC;IAEX,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACzB,IAAI,CAACC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAEvB,IAAIF,IAAI,CAACG,aAAa,EAAE;MACtB,IAAIP,qBAAqB,CAACQ,GAAG,CAACJ,IAAI,CAACG,aAAa,CAAC,EAAE;QACjD,IAAI,CAACA,aAAa,GAAGH,IAAI,CAACG,aAAa;OACxC,MAAM;QACL,MAAM,IAAIV,UAAU,CAAC,oCACjBO,IAAI,CAACG,aAAa,qBAAqB,CAAC;;KAE/C,MAAM;MACL,IAAI,CAACA,aAAa,GAAG,UAAU;;IAEjC,IAAI,CAACE,iBAAiB,GAAGC,OAAO,CAACN,IAAI,CAACK,iBAAiB,CAAC;EAC1D;EAESE,kBAAkBA,CAACC,UAAyB;IACnDA,UAAU,GAAGd,kBAAkB,CAACc,UAAU,CAAC;IAC3C,MAAMC,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC;IACjC,OAAO,CAAC,IAAI,CAACP,MAAM,EAAE,IAAI,CAACC,KAAK,EAAEO,WAAW,CAAC;EAC/C;EAESC,SAASA,CAAA;IAChB,MAAMC,MAAM,GAA6B;MACvC,QAAQ,EAAE,IAAI,CAACV,MAAM;MACrB,OAAO,EAAE,IAAI,CAACC,KAAK;MACnB,eAAe,EAAE,IAAI,CAACC,aAAa;MACnC,mBAAmB,EAAE,IAAI,CAACE;KAC3B;IAED,MAAMO,UAAU,GAAG,KAAK,CAACF,SAAS,EAAE;IACpCG,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;IACjC,OAAOD,MAAM;EACf;EAESI,IAAIA,CAACC,MAAuC,EAAEC,MAAc;IAEnE,OAAO1B,IAAI,CAAC,MAAK;MACf,MAAM2B,IAAI,GAAqB,CAAC,IAAI,CAACjB,MAAM,EAAE,IAAI,CAACC,KAAK,CAAC;MACxD,IAAI,IAAI,CAACC,aAAa,KAAK,UAAU,EAAE;QACrC,OAAOd,KAAK,CAAC8B,cAAc,CAACH,MAAM,EAAEE,IAAI,EAAE,CAAC,IAAI,CAACb,iBAAiB,CAAC;OACnE,MAAM,IAAI,IAAI,CAACF,aAAa,KAAK,SAAS,EAAE;QAC3C,OAAOd,KAAK,CAAC+B,qBAAqB,CAC9BJ,MAAM,EAAEE,IAAI,EAAE,CAAC,IAAI,CAACb,iBAAiB,CAAC;OAC3C,MAAM;QACL,MAAM,IAAIgB,KAAK,CAAC,oBAAoB,IAAI,CAAClB,aAAa,aAAa,CAAC,GAAGP,qBAAqB,CAAC,gBAAgB,CAAC;;IAElH,CAAC,CAAC;EACJ;;AA5DA;AACOE,QAAA,CAAAwB,SAAS,GAAG,UAAU;SAFlBxB,QAAQ;AAgErBR,aAAa,CAACiC,aAAa,CAACzB,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}