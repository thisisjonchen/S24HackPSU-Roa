{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNativeBackpropFilter } from '../kernel_names';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nfunction depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad, dilations = [1, 1], dimRoundingMode) {\n  let x4D = x;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  const inputs = {\n    x: x4D,\n    dy: dy4D\n  };\n  const attrs = {\n    strides,\n    pad,\n    dimRoundingMode,\n    dilations,\n    filterShape\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(DepthwiseConv2dNativeBackpropFilter, inputs, attrs);\n}\nexport const depthwiseConv2dNativeBackpropFilter = op({\n  depthwiseConv2dNativeBackpropFilter_\n});","map":{"version":3,"names":["ENGINE","DepthwiseConv2dNativeBackpropFilter","op","reshape","depthwiseConv2dNativeBackpropFilter_","x","dy","filterShape","strides","pad","dilations","dimRoundingMode","x4D","rank","shape","dy4D","inputs","attrs","runKernel","depthwiseConv2dNativeBackpropFilter"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/depthwise_conv2d_native_backprop_filter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nfunction depthwiseConv2dNativeBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs: DepthwiseConv2dNativeBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: DepthwiseConv2dNativeBackpropFilterAttrs =\n      {strides, pad, dimRoundingMode, dilations, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             DepthwiseConv2dNativeBackpropFilter,\n             inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as Tensor4D;\n}\n\nexport const depthwiseConv2dNativeBackpropFilter =\n    op({depthwiseConv2dNativeBackpropFilter_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,mCAAmC,QAA4F,iBAAiB;AAMxJ,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AAEjC,SAASC,oCAAoCA,CACzCC,CAAI,EAAEC,EAAK,EAAEC,WAA6C,EAC1DC,OAAgC,EAChCC,GAA0C,EAC1CC,SAAA,GAAqC,CAAC,CAAC,EAAE,CAAC,CAAC,EAC3CC,eAAwC;EAC1C,IAAIC,GAAG,GAAGP,CAAa;EACvB,IAAIA,CAAC,CAACQ,IAAI,KAAK,CAAC,EAAE;IAChBD,GAAG,GAAGT,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,EAAEA,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,EAAET,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,EAAET,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE3D,IAAIC,IAAI,GAAGT,EAAc;EACzB,IAAIS,IAAI,CAACF,IAAI,KAAK,CAAC,EAAE;IACnBE,IAAI,GAAGZ,OAAO,CAACG,EAAE,EAAE,CAAC,CAAC,EAAEA,EAAE,CAACQ,KAAK,CAAC,CAAC,CAAC,EAAER,EAAE,CAACQ,KAAK,CAAC,CAAC,CAAC,EAAER,EAAE,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;EAGhE,MAAME,MAAM,GAA8C;IAACX,CAAC,EAAEO,GAAG;IAAEN,EAAE,EAAES;EAAI,CAAC;EAC5E,MAAME,KAAK,GACP;IAACT,OAAO;IAAEC,GAAG;IAAEE,eAAe;IAAED,SAAS;IAAEH;EAAW,CAAC;EAE3D;EACA,OAAOP,MAAM,CAACkB,SAAS,CACZjB,mCAAmC,EACnCe,MAAmC,EACnCC,KAAgC,CAAa;AAC1D;AAEA,OAAO,MAAME,mCAAmC,GAC5CjB,EAAE,CAAC;EAACE;AAAoC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}