{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n  const $data = backend.readSync(data.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean\n};","map":{"version":3,"names":["SparseSegmentMean","sparseSegmentReductionImplCPU","sparseSegmentMean","args","inputs","backend","data","indices","segmentIds","shape","length","Error","$data","readSync","dataId","$indices","$segmentIds","outputData","outputDataShape","dtype","makeTensorInfo","sparseSegmentMeanConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,iBAAiB,QAAwD,uBAAuB;AAGlI,SAAQC,6BAA6B,QAAO,wBAAwB;AAEpE,OAAM,SAAUC,iBAAiBA,CAC7BC,IAAkE;EAEpE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,IAAI;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAGJ,MAAM;EAC1C,IAAIE,IAAI,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,CACX,2DAA2D,CAAC;;EAElE,IAAIJ,OAAO,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC;gBACJJ,OAAO,CAACE,KAAK,EAAE,CAAC;;EAE9B,IAAID,UAAU,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC;gBACJH,UAAU,CAACC,KAAK,EAAE,CAAC;;EAGjC,MAAMG,KAAK,GAAGP,OAAO,CAACQ,QAAQ,CAACP,IAAI,CAACQ,MAAM,CAAe;EACzD,MAAMC,QAAQ,GAAGV,OAAO,CAACQ,QAAQ,CAACN,OAAO,CAACO,MAAM,CAAe;EAC/D,MAAME,WAAW,GAAGX,OAAO,CAACQ,QAAQ,CAACL,UAAU,CAACM,MAAM,CAAe;EAErE,MAAM,CAACG,UAAU,EAAEC,eAAe,CAAC,GAAGjB,6BAA6B,CAC/DW,KAAK,EAAEN,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACa,KAAK,EAAEJ,QAAQ,EAAEC,WAAW,EAAE,IAAI,CAAC;EAC/D,OAAOX,OAAO,CAACe,cAAc,CAACF,eAAe,EAAEZ,IAAI,CAACa,KAAK,EAAEF,UAAU,CAAC;AACxE;AAEA,OAAO,MAAMI,uBAAuB,GAAiB;EACnDC,UAAU,EAAEtB,iBAAiB;EAC7BuB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEtB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}