{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty, result) {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n  const batchSize = input.length;\n  // Empty delimiter means split the input character by character.\n  const tokens = [];\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n  const indices = util.getArrayFromDType('int32', outputSize * 2);\n  const values = new Array(outputSize);\n  const shape = [batchSize, maxNumEntries];\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n  return [indices, values, shape];\n}","map":{"version":3,"names":["util","split","str","delimiters","skipEmpty","result","length","i","push","subarray","delimiter","f","indexOf","token","tokenStart","stringSplitImpl","input","batchSize","tokens","outputSize","maxNumEntries","numIndices","Array","prevTokensLength","nEntries","Math","max","indices","getArrayFromDType","values","shape","c","j"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/StringSplit_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAoBA,IAAI,QAAO,uBAAuB;AAEtD,SAASC,KAAKA,CACVC,GAAe,EAAEC,UAAsB,EAAEC,SAAkB,EAC3DC,MAAoB;EACtB,IAAI,CAACH,GAAG,CAACI,MAAM,EAAE;IACf;;EAEF;EACA,IAAIH,UAAU,CAACG,MAAM,KAAK,CAAC,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACI,MAAM,EAAE,EAAEC,CAAC,EAAE;MACnCF,MAAM,CAACG,IAAI,CAACN,GAAG,CAACO,QAAQ,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;;IAErC;;EAEF;EACA,IAAIJ,UAAU,CAACG,MAAM,KAAK,CAAC,EAAE;IAC3B,MAAMI,SAAS,GAAGP,UAAU,CAAC,CAAC,CAAC;IAC/B,IAAIQ,CAAC,GAAGT,GAAG,CAACU,OAAO,CAACF,SAAS,CAAC;IAC9B,OAAOC,CAAC,KAAK,CAAC,CAAC,EAAE;MACf,MAAME,KAAK,GAAGX,GAAG,CAACO,QAAQ,CAAC,CAAC,EAAEE,CAAC,CAAC;MAChC,IAAI,CAACP,SAAS,IAAIS,KAAK,CAACP,MAAM,KAAK,CAAC,EAAE;QACpCD,MAAM,CAACG,IAAI,CAACK,KAAK,CAAC;;MAEpBX,GAAG,GAAGA,GAAG,CAACO,QAAQ,CAACE,CAAC,GAAG,CAAC,CAAC;MACzBA,CAAC,GAAGT,GAAG,CAACU,OAAO,CAACF,SAAS,CAAC;;IAE5B,IAAI,CAACN,SAAS,IAAIF,GAAG,CAACI,MAAM,KAAK,CAAC,EAAE;MAClCD,MAAM,CAACG,IAAI,CAACN,GAAG,CAAC;;IAElB;;EAEF;EACA;EACA,IAAIY,UAAU,GAAG,CAAC;EAClB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACI,MAAM,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;IACvC,IAAKA,CAAC,KAAKL,GAAG,CAACI,MAAM,IAAMH,UAAU,CAACS,OAAO,CAACV,GAAG,CAACK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAE,EAAE;MAC7D,MAAMM,KAAK,GAAGX,GAAG,CAACO,QAAQ,CAACK,UAAU,EAAEP,CAAC,CAAC;MACzC,IAAI,CAACH,SAAS,IAAIS,KAAK,CAACP,MAAM,KAAK,CAAC,EAAE;QACpCD,MAAM,CAACG,IAAI,CAACK,KAAK,CAAC;;MAEpBC,UAAU,GAAGP,CAAC,GAAG,CAAC;;;AAGxB;AAEA,OAAM,SAAUQ,eAAeA,CAC3BC,KAAmB,EAAEN,SAAqB,EAC1CN,SAAkB;EACpB,MAAMa,SAAS,GAAGD,KAAK,CAACV,MAAM;EAE9B;EACA,MAAMY,MAAM,GAAiB,EAAE;EAE/B,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,aAAa,GAAG,CAAC;EACrB,MAAMC,UAAU,GAAa,IAAIC,KAAK,CAACL,SAAS,CAAC;EACjD,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,SAAS,EAAE,EAAEV,CAAC,EAAE;IAClC,MAAMgB,gBAAgB,GAAGL,MAAM,CAACZ,MAAM;IACtCL,KAAK,CAACe,KAAK,CAACT,CAAC,CAAC,EAAEG,SAAS,EAAEN,SAAS,EAAEc,MAAM,CAAC;IAC7C,MAAMM,QAAQ,GAAGN,MAAM,CAACZ,MAAM,GAAGiB,gBAAgB;IACjDF,UAAU,CAACd,CAAC,CAAC,GAAGiB,QAAQ;IACxBL,UAAU,IAAIK,QAAQ;IACtBJ,aAAa,GAAGK,IAAI,CAACC,GAAG,CAACN,aAAa,EAAEI,QAAQ,CAAC;;EAGnD,MAAMG,OAAO,GAAG3B,IAAI,CAAC4B,iBAAiB,CAAC,OAAO,EAAET,UAAU,GAAG,CAAC,CAAe;EAC7E,MAAMU,MAAM,GAAiB,IAAIP,KAAK,CAACH,UAAU,CAAC;EAClD,MAAMW,KAAK,GAAqB,CAACb,SAAS,EAAEG,aAAa,CAAC;EAE1D,IAAIW,CAAC,GAAG,CAAC;EACT,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,SAAS,EAAE,EAAEV,CAAC,EAAE;IAClC,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,UAAU,CAACd,CAAC,CAAC,EAAE,EAAEyB,CAAC,EAAE;MACtC;MACAL,OAAO,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGxB,CAAC;MAClBoB,OAAO,CAACI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGC,CAAC;MACtBH,MAAM,CAACE,CAAC,CAAC,GAAGb,MAAM,CAACa,CAAC,CAAC;MACrB,EAAEA,CAAC;;;EAIP,OAAO,CAACJ,OAAO,EAAEE,MAAM,EAAEC,KAAK,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}