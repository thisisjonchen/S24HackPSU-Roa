{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n  assertNotComplex(inputs, 'addN');\n  const vals = tensors.map(t => backend.data.get(t.dataId).values);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN\n};","map":{"version":3,"names":["AddN","buffer","assertNotComplex","addN","args","inputs","backend","tensors","vals","map","t","data","get","dataId","values","outBuf","shape","dtype","outVals","i","length","currVals","j","makeTensorInfo","addNConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/AddN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,EAAcC,MAAM,QAAiE,uBAAuB;AAGxH,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,IAAIA,CAACC,IAAmD;EAEtE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAMG,OAAO,GAAGF,MAAkB;EAElCH,gBAAgB,CAACG,MAAM,EAAE,MAAM,CAAC;EAEhC,MAAMG,IAAI,GACND,OAAO,CAACE,GAAG,CAACC,CAAC,IAAIJ,OAAO,CAACK,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,MAAoB,CAAC;EACrE,MAAMC,MAAM,GAAGd,MAAM,CAACM,OAAO,CAAC,CAAC,CAAC,CAACS,KAAK,EAAET,OAAO,CAAC,CAAC,CAAC,CAACU,KAAkB,CAAC;EACtE,MAAMC,OAAO,GAAGH,MAAM,CAACD,MAAM;EAC7B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,OAAO,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,MAAME,QAAQ,GAAGb,IAAI,CAACW,CAAC,CAAC;IACxB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;MACvCJ,OAAO,CAACI,CAAC,CAAC,IAAID,QAAQ,CAACC,CAAC,CAAC;;;EAI7B,OAAOhB,OAAO,CAACiB,cAAc,CAACR,MAAM,CAACC,KAAK,EAAED,MAAM,CAACE,KAAK,EAAEF,MAAM,CAACD,MAAM,CAAC;AAC1E;AAEA,OAAO,MAAMU,UAAU,GAAiB;EACtCC,UAAU,EAAEzB,IAAI;EAChB0B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAExB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}