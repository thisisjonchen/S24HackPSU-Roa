{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const modImpl = createSimpleBinaryKernelImpl((aValue, bValue) => {\n  const rem = aValue % bValue;\n  if (aValue < 0 && bValue < 0 || aValue >= 0 && bValue >= 0) {\n    return rem;\n  } else {\n    return (rem + bValue) % bValue;\n  }\n});\nexport const mod = binaryKernelFunc(Mod, modImpl);\nexport const modConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};","map":{"version":3,"names":["Mod","createSimpleBinaryKernelImpl","binaryKernelFunc","modImpl","aValue","bValue","rem","mod","modConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Mod.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,GAAG,QAAO,uBAAuB;AAEvD,SAAQC,4BAA4B,QAAO,sBAAsB;AACjE,SAAQC,gBAAgB,QAAO,uBAAuB;AAEtD,OAAO,MAAMC,OAAO,GAChBF,4BAA4B,CAAE,CAACG,MAAc,EAAEC,MAAc,KAAI;EAC/D,MAAMC,GAAG,GAAGF,MAAM,GAAGC,MAAM;EAC3B,IAAKD,MAAM,GAAG,CAAC,IAAIC,MAAM,GAAG,CAAC,IAAMD,MAAM,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAE,EAAE;IAC9D,OAAOC,GAAG;GACX,MAAM;IACL,OAAO,CAACA,GAAG,GAAGD,MAAM,IAAIA,MAAM;;AAElC,CAAE,CAAC;AAEP,OAAO,MAAME,GAAG,GAAGL,gBAAgB,CAACF,GAAG,EAAEG,OAAO,CAAC;AAEjD,OAAO,MAAMK,SAAS,GAAiB;EACrCC,UAAU,EAAET,GAAG;EACfU,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEJ;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}