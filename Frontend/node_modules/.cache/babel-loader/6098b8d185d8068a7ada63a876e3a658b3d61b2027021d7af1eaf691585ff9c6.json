{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n  const stages = [];\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n  return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n  const reductionStages = getReductionStages(x.shape);\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {\n      inSize,\n      windowSize,\n      outSize\n    } = reductionStages[i];\n    let program;\n    let previousResult;\n    if (reductionType === 'mean') {\n      program = i === 0 ? new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, inSize) : new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      });\n    } else {\n      program = new ReduceProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, reductionType);\n    }\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["backend_util","MeanProgram","ReduceProgram","getReductionStages","inShape","stages","length","outSize","windowSize","computeOptimalWindowSize","push","inSize","Math","ceil","reduce","x","dtype","reductionType","backend","reductionStages","shape","result","i","program","previousResult","batchSize","runWebGLProgram","dataId","disposeIntermediateTensorInfo"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernel_utils/reduce.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAA6B,uBAAuB;AAGxE,SAAQC,WAAW,QAAO,aAAa;AACvC,SAAQC,aAAa,QAAO,eAAe;AAI3C;AACA;AACA,SAASC,kBAAkBA,CAACC,OAAiB;EAE3C,MAAMC,MAAM,GAAG,EAAE;EAEjB,OAAOA,MAAM,CAACC,MAAM,KAAK,CAAC,IAAID,MAAM,CAACA,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAACC,OAAO,KAAK,CAAC,EAAE;IACrE,MAAMA,OAAO,GACTF,MAAM,CAACC,MAAM,GAAGD,MAAM,CAACA,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAACC,OAAO,GAAGH,OAAO,CAAC,CAAC,CAAC;IAClE,MAAMI,UAAU,GAAGR,YAAY,CAACS,wBAAwB,CAACF,OAAO,CAAC;IACjEF,MAAM,CAACK,IAAI,CAAC;MACVC,MAAM,EAAEJ,OAAO;MACfC,UAAU;MACVD,OAAO,EAAEK,IAAI,CAACC,IAAI,CAACN,OAAO,GAAGC,UAAU;KACxC,CAAC;;EAGJ,OAAOH,MAAM;AACf;AAEA,OAAM,SAAUS,MAAMA,CAClBC,CAAa,EAAEC,KAAe,EAAEC,aAA0B,EAC1DC,OAAyB;EAC3B,MAAMC,eAAe,GAAGhB,kBAAkB,CAACY,CAAC,CAACK,KAAK,CAAC;EAEnD,IAAIC,MAAM,GAAGN,CAAC;EACd,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,eAAe,CAACb,MAAM,EAAEgB,CAAC,EAAE,EAAE;IAC/C,MAAM;MAACX,MAAM;MAAEH,UAAU;MAAED;IAAO,CAAC,GAAGY,eAAe,CAACG,CAAC,CAAC;IAExD,IAAIC,OAAkC;IACtC,IAAIC,cAA0B;IAC9B,IAAIP,aAAa,KAAK,MAAM,EAAE;MAC5BM,OAAO,GAAGD,CAAC,KAAK,CAAC,GACb,IAAIrB,WAAW,CACX;QAACO,UAAU;QAAEG,MAAM;QAAEc,SAAS,EAAEV,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;QAAEb;MAAO,CAAC,EAAEI,MAAM,CAAC,GACjE,IAAIV,WAAW,CAAC;QAACO,UAAU;QAAEG,MAAM;QAAEc,SAAS,EAAEV,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;QAAEb;MAAO,CAAC,CAAC;KAC1E,MAAM;MACLgB,OAAO,GAAG,IAAIrB,aAAa,CACvB;QAACM,UAAU;QAAEG,MAAM;QAAEc,SAAS,EAAEV,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;QAAEb;MAAO,CAAC,EAAEU,aAAa,CAAC;;IAG1EO,cAAc,GAAGH,MAAM;IACvBA,MAAM,GAAGH,OAAO,CAACQ,eAAe,CAACH,OAAO,EAAE,CAACF,MAAM,CAAC,EAAEL,KAAK,CAAC;IAE1D,IAAIQ,cAAc,CAACG,MAAM,KAAKZ,CAAC,CAACY,MAAM,EAAE;MACtCT,OAAO,CAACU,6BAA6B,CAACJ,cAAc,CAAC;;;EAIzD,OAAOH,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}