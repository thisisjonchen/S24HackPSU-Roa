{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MirrorPad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_(x, paddings, mode) {\n  util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` + `Got ${mode}.`);\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n  if ($x.rank === 0) {\n    throw new Error('mirrorPad(scalar) is not defined. ' + 'Pass non-scalar to mirrorPad');\n  }\n  util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` + `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` + `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` + `shape ${$x.shape}`);\n  }\n  const attrs = {\n    paddings,\n    mode\n  };\n  const inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\nexport const mirrorPad = /* @__PURE__ */op({\n  mirrorPad_\n});","map":{"version":3,"names":["ENGINE","MirrorPad","convertToTensor","util","op","mirrorPad_","x","paddings","mode","assert","$x","rank","Error","length","shapeOffset","i","shape","attrs","inputs","runKernel","mirrorPad"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/mirror_pad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>,\n    mode: 'reflect'|'symmetric'): T {\n  util.assert(\n      mode === 'reflect' || mode === 'symmetric',\n      () => `Invalid mode. Mode must be either reflect or symmetric. ` +\n          `Got ${mode}.`);\n\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n  if ($x.rank === 0) {\n    throw new Error(\n        'mirrorPad(scalar) is not defined. ' +\n        'Pass non-scalar to mirrorPad');\n  }\n  util.assert(\n      paddings.length === $x.rank,\n      () => `Padding doesn't match input. Must be ${$x.rank}. ` +\n          `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(\n        paddings[i].length === 2,\n        () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(\n        paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&\n            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset,\n        () => `Padding in dimension ${i} cannot be greater than or equal ` +\n            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +\n            `shape ${$x.shape}`);\n  }\n\n  const attrs: MirrorPadAttrs = {paddings, mode};\n  const inputs: MirrorPadInputs = {x: $x};\n  return ENGINE.runKernel(\n      MirrorPad, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const mirrorPad = /* @__PURE__ */ op({mirrorPad_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,SAAS,QAAwC,iBAAiB;AAI1E,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA,SAASC,UAAUA,CACfC,CAAe,EAAEC,QAAiC,EAClDC,IAA2B;EAC7BL,IAAI,CAACM,MAAM,CACPD,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,WAAW,EAC1C,MAAM,0DAA0D,GAC5D,OAAOA,IAAI,GAAG,CAAC;EAEvB,MAAME,EAAE,GAAGR,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;EAC/C,IAAII,EAAE,CAACC,IAAI,KAAK,CAAC,EAAE;IACjB,MAAM,IAAIC,KAAK,CACX,oCAAoC,GACpC,8BAA8B,CAAC;;EAErCT,IAAI,CAACM,MAAM,CACPF,QAAQ,CAACM,MAAM,KAAKH,EAAE,CAACC,IAAI,EAC3B,MAAM,wCAAwCD,EAAE,CAACC,IAAI,IAAI,GACrD,OAAOJ,QAAQ,CAACM,MAAM,GAAG,CAAC;EAClC,MAAMC,WAAW,GAAGN,IAAI,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;EAC9C,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,CAACC,IAAI,EAAEI,CAAC,EAAE,EAAE;IAChCZ,IAAI,CAACM,MAAM,CACPF,QAAQ,CAACQ,CAAC,CAAC,CAACF,MAAM,KAAK,CAAC,EACxB,MAAM,uDAAuD,CAAC;IAClEV,IAAI,CAACM,MAAM,CACPF,QAAQ,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIR,QAAQ,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIL,EAAE,CAACM,KAAK,CAACD,CAAC,CAAC,GAAGD,WAAW,IAC9DP,QAAQ,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIR,QAAQ,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIL,EAAE,CAACM,KAAK,CAACD,CAAC,CAAC,GAAGD,WAAW,EACtE,MAAM,wBAAwBC,CAAC,mCAAmC,GAC9D,MAAML,EAAE,CAACM,KAAK,CAACD,CAAC,CAAC,GAAGD,WAAW,+BAA+B,GAC9D,SAASJ,EAAE,CAACM,KAAK,EAAE,CAAC;;EAG9B,MAAMC,KAAK,GAAmB;IAACV,QAAQ;IAAEC;EAAI,CAAC;EAC9C,MAAMU,MAAM,GAAoB;IAACZ,CAAC,EAAEI;EAAE,CAAC;EACvC,OAAOV,MAAM,CAACmB,SAAS,CACnBlB,SAAS,EAAEiB,MAAmC,EAC9CD,KAAgC,CAAC;AACvC;AAEA,OAAO,MAAMG,SAAS,GAAG,eAAgBhB,EAAE,CAAC;EAACC;AAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}