{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function castImpl(values, shape, inputType, dtype) {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0)(shape, [], values, zero, 'bool');\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensorInfo\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n  const values = backend.data.get(x.dataId).values;\n  const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast\n};","map":{"version":3,"names":["Cast","util","createSimpleBinaryKernelImpl","zeros","complex","identity","real","castImpl","values","shape","inputType","dtype","resultValues","Int32Array","from","zero","toTypedArray","resultData","resultShape","a","b","Error","cast","args","inputs","backend","attrs","x","zerosTensorInfo","floatX","result","imag","disposeIntermediateTensorInfo","realPart","input","hasEncodingLoss","dataId","data","get","resultType","makeTensorInfo","castConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Cast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}