{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BitwiseAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { arraysEqual } from '../util_base';\nimport { op } from './operation';\n/**\n * Bitwise `AND` operation for input tensors.\n *\n * Given two input tensors, returns a new tensor\n * with the `AND` calculated values.\n *\n * The method supports int32 values\n *\n *\n * ```js\n * const x = tf.tensor1d([0, 5, 3, 14], 'int32');\n * const y = tf.tensor1d([5, 0, 7, 11], 'int32');\n * tf.bitwiseAnd(x, y).print();\n * ```\n *\n * @param x The input tensor to be calculated.\n * @param y The input tensor to be calculated.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction bitwiseAnd_(x, y) {\n  const $x = convertToTensor(x, 'x', 'bitwiseAnd');\n  const $y = convertToTensor(y, 'y', 'bitwiseAnd');\n  if (!arraysEqual($x.shape, $y.shape)) {\n    throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${$x.shape}, y: ${$y.shape}`);\n  }\n  if ($x.dtype !== 'int32' || $y.dtype !== 'int32') {\n    throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${$x.dtype} and type of y: ${$y.dtype}`);\n  }\n  const inputs = {\n    a: $x,\n    b: $y\n  };\n  return ENGINE.runKernel(BitwiseAnd, inputs);\n}\nexport const bitwiseAnd = /* @__PURE__ */op({\n  bitwiseAnd_\n});","map":{"version":3,"names":["ENGINE","BitwiseAnd","convertToTensor","arraysEqual","op","bitwiseAnd_","x","y","$x","$y","shape","Error","dtype","inputs","a","b","runKernel","bitwiseAnd"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/bitwise_and.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {BitwiseAnd, BitwiseAndInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank} from '../types';\nimport {arraysEqual} from '../util_base';\n\nimport {op} from './operation';\n\n/**\n * Bitwise `AND` operation for input tensors.\n *\n * Given two input tensors, returns a new tensor\n * with the `AND` calculated values.\n *\n * The method supports int32 values\n *\n *\n * ```js\n * const x = tf.tensor1d([0, 5, 3, 14], 'int32');\n * const y = tf.tensor1d([5, 0, 7, 11], 'int32');\n * tf.bitwiseAnd(x, y).print();\n * ```\n *\n * @param x The input tensor to be calculated.\n * @param y The input tensor to be calculated.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction bitwiseAnd_<R extends Rank>(x: Tensor, y: Tensor): Tensor<R> {\n  const $x = convertToTensor(x, 'x', 'bitwiseAnd');\n  const $y = convertToTensor(y, 'y', 'bitwiseAnd');\n\n  if (!arraysEqual($x.shape, $y.shape)) {\n    throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${\n        $x.shape}, y: ${$y.shape}`);\n  }\n  if ($x.dtype !== 'int32' || $y.dtype !== 'int32') {\n    throw new Error(\n        `BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${\n            $x.dtype} and type of y: ${$y.dtype}`);\n  }\n\n  const inputs: BitwiseAndInputs = {a: $x, b: $y};\n  return ENGINE.runKernel(BitwiseAnd, inputs as unknown as NamedTensorMap);\n}\nexport const bitwiseAnd = /* @__PURE__ */ op({bitwiseAnd_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,UAAU,QAAyB,iBAAiB;AAG5D,SAAQC,eAAe,QAAO,oBAAoB;AAElD,SAAQC,WAAW,QAAO,cAAc;AAExC,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,WAAWA,CAAiBC,CAAS,EAAEC,CAAS;EACvD,MAAMC,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC;EAChD,MAAMG,EAAE,GAAGP,eAAe,CAACK,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC;EAEhD,IAAI,CAACJ,WAAW,CAACK,EAAE,CAACE,KAAK,EAAED,EAAE,CAACC,KAAK,CAAC,EAAE;IACpC,MAAM,IAAIC,KAAK,CAAC,oDACZH,EAAE,CAACE,KAAK,QAAQD,EAAE,CAACC,KAAK,EAAE,CAAC;;EAEjC,IAAIF,EAAE,CAACI,KAAK,KAAK,OAAO,IAAIH,EAAE,CAACG,KAAK,KAAK,OAAO,EAAE;IAChD,MAAM,IAAID,KAAK,CACX,wEACIH,EAAE,CAACI,KAAK,mBAAmBH,EAAE,CAACG,KAAK,EAAE,CAAC;;EAGhD,MAAMC,MAAM,GAAqB;IAACC,CAAC,EAAEN,EAAE;IAAEO,CAAC,EAAEN;EAAE,CAAC;EAC/C,OAAOT,MAAM,CAACgB,SAAS,CAACf,UAAU,EAAEY,MAAmC,CAAC;AAC1E;AACA,OAAO,MAAMI,UAAU,GAAG,eAAgBb,EAAE,CAAC;EAACC;AAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}