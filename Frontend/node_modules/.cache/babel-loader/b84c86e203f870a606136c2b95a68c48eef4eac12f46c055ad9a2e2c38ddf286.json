{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { add, div, keep, mul, nextFrame, tidy, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nimport * as generic_utils from './utils/generic_utils';\n/** Verbosity logging level when fitting a model. */\nexport var ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n  ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n  ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport class BaseCallback {\n  constructor() {\n    // TODO(michaelterry): This type is a best guess.\n    this.validationData = null;\n  }\n  setParams(params) {\n    this.params = params;\n  }\n  async onEpochBegin(epoch, logs) {}\n  async onEpochEnd(epoch, logs) {}\n  async onBatchBegin(batch, logs) {}\n  async onBatchEnd(batch, logs) {}\n  async onTrainBegin(logs) {}\n  async onTrainEnd(logs) {}\n  // LayersModel needs to call Callback.setModel(), but cannot actually depend\n  // on Callback because that creates a cyclic dependency.  Providing this no-op\n  // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n  // BaseCallback but not on Callback.  The argument is typed as `Container`\n  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n  // overrides this method and enforces that the argument is really a\n  // LayersModel.\n  setModel(model) {\n    // Do nothing. Use Callback instead of BaseCallback to track the model.\n  }\n}\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n  // TODO(cais): When the need arises, uncomment the following lines and\n  // implement the queue for time values.\n  // private deltaTBatch: number;\n  // private deltaTsBatchBegin: Array<number>;\n  // private deltaTsBatchEnd: Array<number>;\n  /**\n   * Constructor of CallbackList.\n   * @param callbacks Array of `Callback` instances.\n   * @param queueLength Queue length for keeping running statistics over\n   *   callback execution time.\n   */\n  constructor(callbacks, queueLength = 10) {\n    // TODO(cais): Make use of queueLength when implementing the queue for time\n    // values.\n    if (callbacks == null) {\n      callbacks = [];\n    }\n    this.callbacks = callbacks;\n    this.queueLength = queueLength;\n  }\n  append(callback) {\n    this.callbacks.push(callback);\n  }\n  setParams(params) {\n    for (const callback of this.callbacks) {\n      callback.setParams(params);\n    }\n  }\n  setModel(model) {\n    for (const callback of this.callbacks) {\n      callback.setModel(model);\n    }\n  }\n  /**\n   * Called at the start of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochBegin(epoch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochBegin(epoch, logs);\n    }\n  }\n  /**\n   * Called at the end of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochEnd(epoch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochEnd(epoch, logs);\n    }\n  }\n  /**\n   * Called  right before processing a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchBegin(batch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchBegin(batch, logs);\n    }\n  }\n  /**\n   * Called at the end of a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchEnd(batch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchEnd(batch, logs);\n    }\n  }\n  /**\n   * Called at the beginning of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainBegin(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainBegin(logs);\n    }\n  }\n  /**\n   * Called at the end of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainEnd(logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainEnd(logs);\n    }\n  }\n}\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n  constructor() {\n    super();\n  }\n  async onEpochBegin(epoch) {\n    this.seen = 0;\n    this.totals = {};\n  }\n  async onBatchEnd(batch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const batchSize = logs['size'] == null ? 0 : logs['size'];\n    this.seen += batchSize;\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value === 'number') {\n        if (!this.totals.hasOwnProperty(key)) {\n          this.totals[key] = 0;\n        }\n        this.totals[key] = this.totals[key] + value * batchSize;\n      } else {\n        let oldTotalsToDispose;\n        if (key in this.totals) {\n          oldTotalsToDispose = this.totals[key];\n        } else {\n          this.totals[key] = 0;\n        }\n        const total = tidy(() => add(this.totals[key], mul(value, batchSize)));\n        this.totals[key] = total;\n        if (oldTotalsToDispose != null) {\n          oldTotalsToDispose.dispose();\n        }\n      }\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    if (logs != null) {\n      for (const key of this.params['metrics']) {\n        if (this.totals[key] == null) {\n          continue;\n        }\n        if (typeof this.totals[key] === 'number') {\n          logs[key] = this.totals[key] / this.seen;\n        } else {\n          tidy(() => {\n            const log = mul(div(1, this.seen), this.totals[key]);\n            logs[key] = log;\n            this.totals[key].dispose();\n            keep(logs[key]);\n          });\n        }\n      }\n    }\n  }\n}\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n  async onTrainBegin(logs) {\n    this.epoch = [];\n    this.history = {};\n  }\n  async onEpochEnd(epoch, logs) {\n    if (logs == null) {\n      logs = {};\n    }\n    this.epoch.push(epoch);\n    for (const key in logs) {\n      if (this.history[key] == null) {\n        this.history[key] = [];\n      }\n      this.history[key].push(logs[key]);\n    }\n  }\n  /**\n   * Await the values of all losses and metrics.\n   */\n  async syncData() {\n    const promises = [];\n    const keys = [];\n    const indices = [];\n    for (const key in this.history) {\n      const valueArray = this.history[key];\n      for (let i = 0; i < valueArray.length; ++i) {\n        if (typeof valueArray[i] !== 'number') {\n          const valueScalar = valueArray[i];\n          promises.push(valueScalar.data());\n          keys.push(key);\n          indices.push(i);\n        }\n      }\n    }\n    const values = await Promise.all(promises);\n    for (let n = 0; n < values.length; ++n) {\n      const tensorToDispose = this.history[keys[n]][indices[n]];\n      tensorToDispose.dispose();\n      this.history[keys[n]][indices[n]] = values[n][0];\n    }\n  }\n}\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n  constructor(args, yieldEvery) {\n    super();\n    this.currentEpoch = 0;\n    this.nowFunc = args.nowFunc;\n    this.nextFrameFunc = args.nextFrameFunc || nextFrame;\n    this.yieldEvery = yieldEvery || 'auto';\n    if (this.yieldEvery === 'auto') {\n      this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n    }\n    if (this.yieldEvery === 'never' && args.onYield != null) {\n      throw new Error('yieldEvery is `never` but you provided an `onYield` callback. ' + 'Either change `yieldEvery` or remove the callback');\n    }\n    if (util.isNumber(this.yieldEvery)) {\n      // Decorate `maybeWait` so it will be called at most once every\n      // `yieldEvery` ms.\n      this.maybeWait = generic_utils.debounce(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc);\n    }\n    this.trainBegin = args.onTrainBegin;\n    this.trainEnd = args.onTrainEnd;\n    this.epochBegin = args.onEpochBegin;\n    this.epochEnd = args.onEpochEnd;\n    this.batchBegin = args.onBatchBegin;\n    this.batchEnd = args.onBatchEnd;\n    this.yield = args.onYield;\n  }\n  async maybeWait(epoch, batch, logs) {\n    const ps = [];\n    if (this.yield != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.yield(epoch, batch, logs));\n    }\n    ps.push(this.nextFrameFunc());\n    await Promise.all(ps);\n  }\n  async onEpochBegin(epoch, logs) {\n    this.currentEpoch = epoch;\n    if (this.epochBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochBegin(epoch, logs);\n    }\n  }\n  async onEpochEnd(epoch, logs) {\n    const ps = [];\n    if (this.epochEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.epochEnd(epoch, logs));\n    }\n    if (this.yieldEvery === 'epoch') {\n      ps.push(this.nextFrameFunc());\n    }\n    await Promise.all(ps);\n  }\n  async onBatchBegin(batch, logs) {\n    if (this.batchBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchBegin(batch, logs);\n    }\n  }\n  async onBatchEnd(batch, logs) {\n    const ps = [];\n    if (this.batchEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.batchEnd(batch, logs));\n    }\n    if (this.yieldEvery === 'batch') {\n      ps.push(this.nextFrameFunc());\n    } else if (util.isNumber(this.yieldEvery)) {\n      ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n    }\n    await Promise.all(ps);\n  }\n  async onTrainBegin(logs) {\n    if (this.trainBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainBegin(logs);\n    }\n  }\n  async onTrainEnd(logs) {\n    if (this.trainEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainEnd(logs);\n    }\n  }\n}\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(callbacks, yieldEvery) {\n  if (callbacks == null) {\n    callbacks = {};\n  }\n  if (callbacks instanceof BaseCallback) {\n    return [callbacks];\n  }\n  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n    return callbacks;\n  }\n  // Convert custom callback configs to custom callback objects.\n  const callbackConfigs = generic_utils.toList(callbacks);\n  return callbackConfigs.map(callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nclass CallbackConstructorRegistry {\n  /**\n   * Blocks public access to constructor.\n   */\n  constructor() {}\n  /**\n   * Register a tf.LayersModel.fit() callback constructor.\n   *\n   * The registered callback constructor will be used to instantiate\n   * callbacks for every tf.LayersModel.fit() call afterwards.\n   *\n   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n   *   is to be reigstered.\n   * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n   * @throws Error, if the same callbackConstructor has been registered before,\n   *   either at the same or a different `verbosityLevel`.\n   */\n  static registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n    util.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), () => `Verbosity level is expected to be an integer >= 0, ` + `but got ${verbosityLevel}`);\n    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n      CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n    }\n    CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);\n  }\n  static checkForDuplicate(callbackConstructor) {\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const constructors = CallbackConstructorRegistry.constructors[+levelName];\n      constructors.forEach(ctor => {\n        if (ctor === callbackConstructor) {\n          throw new ValueError('Duplicate callback constructor.');\n        }\n      });\n    }\n  }\n  /**\n   * Clear all registered callback constructors.\n   */\n  static clear() {\n    CallbackConstructorRegistry.constructors = {};\n  }\n  /**\n   * Create callbacks using the registered callback constructors.\n   *\n   * Given `verbosityLevel`, all constructors registered at that level or above\n   * will be called and the instantiated callbacks will be used.\n   *\n   * @param verbosityLevel: Level of verbosity.\n   */\n  static createCallbacks(verbosityLevel) {\n    const constructors = [];\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const level = +levelName;\n      if (verbosityLevel >= level) {\n        constructors.push(...CallbackConstructorRegistry.constructors[level]);\n      }\n    }\n    return constructors.map(ctor => new ctor());\n  }\n}\nCallbackConstructorRegistry.constructors = {};\nexport { CallbackConstructorRegistry };\nexport function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {\n  const history = new History();\n  const actualCallbacks = [new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)];\n  if (callbacks != null) {\n    actualCallbacks.push(...callbacks);\n  }\n  actualCallbacks.push(history);\n  const callbackList = new CallbackList(actualCallbacks);\n  // TODO(cais): Figure out when this LayersModel instance can have a\n  // dynamically\n  //   set property called 'callback_model' as in PyKeras.\n  callbackList.setParams({\n    epochs,\n    initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize,\n    verbose,\n    doValidation,\n    metrics: callbackMetrics\n  });\n  return {\n    callbackList,\n    history\n  };\n}","map":{"version":3,"names":["add","div","keep","mul","nextFrame","tidy","util","ValueError","resolveScalarsInLogs","generic_utils","ModelLoggingVerbosity","DEFAULT_YIELD_EVERY_MS","BaseCallback","constructor","validationData","setParams","params","onEpochBegin","epoch","logs","onEpochEnd","onBatchBegin","batch","onBatchEnd","onTrainBegin","onTrainEnd","setModel","model","CallbackList","callbacks","queueLength","append","callback","push","BaseLogger","seen","totals","batchSize","key","value","hasOwnProperty","oldTotalsToDispose","total","dispose","log","History","history","syncData","promises","keys","indices","valueArray","i","length","valueScalar","data","values","Promise","all","n","tensorToDispose","CustomCallback","args","yieldEvery","currentEpoch","nowFunc","nextFrameFunc","onYield","Error","isNumber","maybeWait","debounce","bind","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","yield","ps","standardizeCallbacks","Array","isArray","callbackConfigs","toList","map","callbackConfig","CallbackConstructorRegistry","registerCallbackConstructor","verbosityLevel","callbackConstructor","assert","Number","isInteger","checkForDuplicate","constructors","levelName","forEach","ctor","clear","createCallbacks","level","configureCallbacks","verbose","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","callbackList","samples","steps","metrics"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/base_callbacks.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\n\nimport {add, div, keep, mul, nextFrame, Scalar, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Container} from './engine/container';\nimport {ValueError} from './errors';\nimport {Logs, resolveScalarsInLogs, UnresolvedLogs} from './logs';\nimport * as generic_utils from './utils/generic_utils';\n\n/** Verbosity logging level when fitting a model. */\nexport enum ModelLoggingVerbosity {\n  SILENT = 0,\n  VERBOSE = 1\n}\n\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n\nexport type Params = {\n  [key: string]: number|string|boolean|number[]|string[]|boolean[];\n};\n\nexport type YieldEveryOptions = 'auto'|'batch'|'epoch'|'never'|number;\n\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport abstract class BaseCallback {\n  // TODO(michaelterry): This type is a best guess.\n  validationData: Tensor|Tensor[] = null;\n  /**\n   * Training parameters (eg. verbosity, batch size, number of epochs...).\n   */\n  params: Params;\n\n  setParams(params: Params): void {\n    this.params = params;\n  }\n\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {}\n\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {}\n\n  async onTrainBegin(logs?: UnresolvedLogs) {}\n\n  async onTrainEnd(logs?: UnresolvedLogs) {}\n\n  // LayersModel needs to call Callback.setModel(), but cannot actually depend\n  // on Callback because that creates a cyclic dependency.  Providing this no-op\n  // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n  // BaseCallback but not on Callback.  The argument is typed as `Container`\n  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n  // overrides this method and enforces that the argument is really a\n  // LayersModel.\n  setModel(model: Container): void {\n    // Do nothing. Use Callback instead of BaseCallback to track the model.\n  }\n}\n\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n  callbacks: BaseCallback[];\n  queueLength: number;\n\n  // TODO(cais): When the need arises, uncomment the following lines and\n  // implement the queue for time values.\n  // private deltaTBatch: number;\n  // private deltaTsBatchBegin: Array<number>;\n  // private deltaTsBatchEnd: Array<number>;\n\n  /**\n   * Constructor of CallbackList.\n   * @param callbacks Array of `Callback` instances.\n   * @param queueLength Queue length for keeping running statistics over\n   *   callback execution time.\n   */\n  constructor(callbacks?: BaseCallback[], queueLength = 10) {\n    // TODO(cais): Make use of queueLength when implementing the queue for time\n    // values.\n    if (callbacks == null) {\n      callbacks = [];\n    }\n    this.callbacks = callbacks;\n    this.queueLength = queueLength;\n  }\n\n  append(callback: BaseCallback): void {\n    this.callbacks.push(callback);\n  }\n\n  setParams(params: Params): void {\n    for (const callback of this.callbacks) {\n      callback.setParams(params);\n    }\n  }\n\n  setModel(model: Container): void {\n    for (const callback of this.callbacks) {\n      callback.setModel(model);\n    }\n  }\n\n  /**\n   * Called at the start of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochBegin(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochBegin(epoch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of an epoch.\n   * @param epoch Index of epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onEpochEnd(epoch, logs);\n    }\n  }\n\n  /**\n   * Called  right before processing a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchBegin(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchBegin(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the end of a batch.\n   * @param batch Index of batch within the current epoch.\n   * @param logs Dictionary of logs.\n   */\n  async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onBatchEnd(batch, logs);\n    }\n  }\n\n  /**\n   * Called at the beginning of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainBegin(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainBegin(logs);\n    }\n  }\n\n  /**\n   * Called at the end of training.\n   * @param logs Dictionary of logs.\n   */\n  async onTrainEnd(logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    for (const callback of this.callbacks) {\n      await callback.onTrainEnd(logs);\n    }\n  }\n}\n\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n  private seen: number;\n  private totals: UnresolvedLogs;\n\n  constructor() {\n    super();\n  }\n\n  override async onEpochBegin(epoch: number) {\n    this.seen = 0;\n    this.totals = {};\n  }\n\n  override async onBatchEnd(batch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    const batchSize = logs['size'] == null ? 0 : logs['size'] as number;\n    this.seen += batchSize;\n    for (const key in logs) {\n      const value = logs[key];\n      if (typeof value === 'number') {\n        if (!this.totals.hasOwnProperty(key)) {\n          this.totals[key] = 0;\n        }\n        this.totals[key] = this.totals[key] as number + value * batchSize;\n      } else {\n        let oldTotalsToDispose: Scalar;\n        if (key in this.totals) {\n          oldTotalsToDispose = this.totals[key] as Scalar;\n        } else {\n          this.totals[key] = 0;\n        }\n        const total: Scalar =\n            tidy(() => add((this.totals[key]), mul(value, batchSize)));\n        this.totals[key] = total;\n        if (oldTotalsToDispose != null) {\n          oldTotalsToDispose.dispose();\n        }\n      }\n    }\n  }\n\n  override async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs != null) {\n      for (const key of this.params['metrics'] as string[]) {\n        if (this.totals[key] == null) {\n          continue;\n        }\n        if (typeof this.totals[key] === 'number') {\n          logs[key] = this.totals[key] as number / this.seen;\n        } else {\n          tidy(() => {\n            const log: Scalar = mul(div(1, this.seen), this.totals[key]);\n            logs[key] = log;\n            (this.totals[key] as Tensor).dispose();\n            keep(logs[key] as Scalar);\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n  epoch: number[];\n  history: {[key: string]: Array<number|Tensor>};\n\n  override async onTrainBegin(logs?: UnresolvedLogs) {\n    this.epoch = [];\n    this.history = {};\n  }\n\n  override async onEpochEnd(epoch: number, logs?: UnresolvedLogs) {\n    if (logs == null) {\n      logs = {};\n    }\n    this.epoch.push(epoch);\n    for (const key in logs) {\n      if (this.history[key] == null) {\n        this.history[key] = [];\n      }\n      this.history[key].push(logs[key]);\n    }\n  }\n\n  /**\n   * Await the values of all losses and metrics.\n   */\n  async syncData() {\n    const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n    const keys: string[] = [];\n    const indices: number[] = [];\n    for (const key in this.history) {\n      const valueArray = this.history[key];\n      for (let i = 0; i < valueArray.length; ++i) {\n        if (typeof valueArray[i] !== 'number') {\n          const valueScalar = valueArray[i] as Tensor;\n          promises.push(valueScalar.data());\n          keys.push(key);\n          indices.push(i);\n        }\n      }\n    }\n    const values = await Promise.all(promises);\n    for (let n = 0; n < values.length; ++n) {\n      const tensorToDispose = this.history[keys[n]][indices[n]] as Tensor;\n      tensorToDispose.dispose();\n      this.history[keys[n]][indices[n]] = values[n][0];\n    }\n  }\n}\n\nexport interface CustomCallbackArgs {\n  onTrainBegin?: (logs?: Logs) => void | Promise<void>;\n  onTrainEnd?: (logs?: Logs) => void | Promise<void>;\n  onEpochBegin?: (epoch: number, logs?: Logs) => void | Promise<void>;\n  onEpochEnd?: (epoch: number, logs?: Logs) => void | Promise<void>;\n  onBatchBegin?: (batch: number, logs?: Logs) => void | Promise<void>;\n  onBatchEnd?: (batch: number, logs?: Logs) => void | Promise<void>;\n  onYield?: (epoch: number, batch: number, logs: Logs) => void | Promise<void>;\n  // Used for test DI mocking.\n  nowFunc?: Function;\n  nextFrameFunc?: Function;\n}\n\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n  protected readonly trainBegin: (logs?: Logs) => void | Promise<void>;\n  protected readonly trainEnd: (logs?: Logs) => void | Promise<void>;\n  protected readonly epochBegin:\n      (epoch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly epochEnd:\n      (epoch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly batchBegin:\n      (batch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly batchEnd:\n      (batch: number, logs?: Logs) => void | Promise<void>;\n  protected readonly yield:\n      (epoch: number, batch: number, logs: Logs) => void | Promise<void>;\n\n  private yieldEvery: YieldEveryOptions;\n  private currentEpoch = 0;\n  public nowFunc: Function;\n  public nextFrameFunc: Function;\n\n  constructor(args: CustomCallbackArgs, yieldEvery?: YieldEveryOptions) {\n    super();\n    this.nowFunc = args.nowFunc;\n    this.nextFrameFunc = args.nextFrameFunc || nextFrame;\n    this.yieldEvery = yieldEvery || 'auto';\n    if (this.yieldEvery === 'auto') {\n      this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n    }\n    if (this.yieldEvery === 'never' && args.onYield != null) {\n      throw new Error(\n          'yieldEvery is `never` but you provided an `onYield` callback. ' +\n          'Either change `yieldEvery` or remove the callback');\n    }\n    if (util.isNumber(this.yieldEvery)) {\n      // Decorate `maybeWait` so it will be called at most once every\n      // `yieldEvery` ms.\n      this.maybeWait = generic_utils.debounce(\n          this.maybeWait.bind(this), this.yieldEvery as number, this.nowFunc);\n    }\n    this.trainBegin = args.onTrainBegin;\n    this.trainEnd = args.onTrainEnd;\n    this.epochBegin = args.onEpochBegin;\n    this.epochEnd = args.onEpochEnd;\n    this.batchBegin = args.onBatchBegin;\n    this.batchEnd = args.onBatchEnd;\n    this.yield = args.onYield;\n  }\n\n  async maybeWait(epoch: number, batch: number, logs: UnresolvedLogs) {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.yield != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.yield(epoch, batch, logs as Logs));\n    }\n    ps.push(this.nextFrameFunc());\n    await Promise.all(ps);\n  }\n\n  override async onEpochBegin(epoch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    this.currentEpoch = epoch;\n    if (this.epochBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.epochBegin(epoch, logs as Logs);\n    }\n  }\n\n  override async onEpochEnd(epoch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.epochEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.epochEnd(epoch, logs as Logs));\n    }\n    if (this.yieldEvery === 'epoch') {\n      ps.push(this.nextFrameFunc());\n    }\n    await Promise.all(ps);\n  }\n\n  override async onBatchBegin(batch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    if (this.batchBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.batchBegin(batch, logs as Logs);\n    }\n  }\n\n  override async onBatchEnd(batch: number, logs?: UnresolvedLogs):\n      Promise<void> {\n    const ps: Array<void|Promise<void>> = [];\n    if (this.batchEnd != null) {\n      await resolveScalarsInLogs(logs);\n      ps.push(this.batchEnd(batch, logs as Logs));\n    }\n    if (this.yieldEvery === 'batch') {\n      ps.push(this.nextFrameFunc());\n    } else if (util.isNumber(this.yieldEvery)) {\n      ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n    }\n    await Promise.all(ps);\n  }\n\n  override async onTrainBegin(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainBegin != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainBegin(logs as Logs);\n    }\n  }\n\n  override async onTrainEnd(logs?: UnresolvedLogs): Promise<void> {\n    if (this.trainEnd != null) {\n      await resolveScalarsInLogs(logs);\n      await this.trainEnd(logs as Logs);\n    }\n  }\n}\n\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(\n    callbacks: BaseCallback|BaseCallback[]|CustomCallbackArgs|\n    CustomCallbackArgs[],\n    yieldEvery: YieldEveryOptions): BaseCallback[] {\n  if (callbacks == null) {\n    callbacks = {} as BaseCallback;\n  }\n  if (callbacks instanceof BaseCallback) {\n    return [callbacks];\n  }\n  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n    return callbacks as BaseCallback[];\n  }\n  // Convert custom callback configs to custom callback objects.\n  const callbackConfigs =\n      generic_utils.toList<BaseCallback | CustomCallbackArgs>(\n        callbacks) as CustomCallbackArgs[];\n  return callbackConfigs.map(\n      callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n\nexport declare type BaseCallbackConstructor = {\n  new (): BaseCallback\n};\n\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nexport class CallbackConstructorRegistry {\n  private static constructors:\n      {[verbosityLevel: number]: BaseCallbackConstructor[]} = {};\n\n  /**\n   * Blocks public access to constructor.\n   */\n  private constructor() {}\n\n  /**\n   * Register a tf.LayersModel.fit() callback constructor.\n   *\n   * The registered callback constructor will be used to instantiate\n   * callbacks for every tf.LayersModel.fit() call afterwards.\n   *\n   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n   *   is to be reigstered.\n   * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n   * @throws Error, if the same callbackConstructor has been registered before,\n   *   either at the same or a different `verbosityLevel`.\n   */\n  static registerCallbackConstructor(\n      verbosityLevel: number, callbackConstructor: BaseCallbackConstructor) {\n    util.assert(\n        verbosityLevel >= 0 && Number.isInteger(verbosityLevel),\n        () => `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n      CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n    }\n    CallbackConstructorRegistry.constructors[verbosityLevel].push(\n        callbackConstructor);\n  }\n\n  private static checkForDuplicate(callbackConstructor:\n                                       BaseCallbackConstructor) {\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const constructors = CallbackConstructorRegistry.constructors[+levelName];\n      constructors.forEach(ctor => {\n        if (ctor === callbackConstructor) {\n          throw new ValueError('Duplicate callback constructor.');\n        }\n      });\n    }\n  }\n\n  /**\n   * Clear all registered callback constructors.\n   */\n  protected static clear() {\n    CallbackConstructorRegistry.constructors = {};\n  }\n\n  /**\n   * Create callbacks using the registered callback constructors.\n   *\n   * Given `verbosityLevel`, all constructors registered at that level or above\n   * will be called and the instantiated callbacks will be used.\n   *\n   * @param verbosityLevel: Level of verbosity.\n   */\n  static createCallbacks(verbosityLevel: number): BaseCallback[] {\n    const constructors: BaseCallbackConstructor[] = [];\n    for (const levelName in CallbackConstructorRegistry.constructors) {\n      const level = +levelName;\n      if (verbosityLevel >= level) {\n        constructors.push(...CallbackConstructorRegistry.constructors[level]);\n      }\n    }\n    return constructors.map(ctor => new ctor());\n  }\n}\n\nexport function configureCallbacks(\n    callbacks: BaseCallback[], verbose: ModelLoggingVerbosity, epochs: number,\n    initialEpoch: number, numTrainSamples: number, stepsPerEpoch: number,\n    batchSize: number, doValidation: boolean,\n    callbackMetrics: string[]): {callbackList: CallbackList, history: History} {\n  const history = new History();\n  const actualCallbacks: BaseCallback[] = [\n    new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)\n  ];\n  if (callbacks != null) {\n    actualCallbacks.push(...callbacks);\n  }\n  actualCallbacks.push(history);\n  const callbackList = new CallbackList(actualCallbacks);\n\n  // TODO(cais): Figure out when this LayersModel instance can have a\n  // dynamically\n  //   set property called 'callback_model' as in PyKeras.\n\n  callbackList.setParams({\n    epochs,\n    initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize,\n    verbose,\n    doValidation,\n    metrics: callbackMetrics,\n  });\n  return {callbackList, history};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}