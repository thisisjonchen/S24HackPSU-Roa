{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\nexport class LruCache {\n  constructor(maxEntries) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map();\n  }\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  get(key) {\n    let entry;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  put(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  getMaxEntries() {\n    return this.maxEntries;\n  }\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  setMaxEntries(maxEntries) {\n    if (maxEntries < 0) {\n      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${maxEntries}.`);\n    }\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n    this.maxEntries = maxEntries;\n  }\n}","map":{"version":3,"names":["LruCache","constructor","maxEntries","cache","Map","get","key","entry","has","delete","set","put","value","size","keyToDelete","keys","next","getMaxEntries","setMaxEntries","Error","i"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/utils/executor_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\n\nexport class LruCache<T> {\n  private cache: Map<string, T>;\n  private maxEntries: number;\n\n  constructor(maxEntries?: number) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map<string, T>();\n  }\n\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  public get(key: string): T {\n    let entry: T;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  public put(key: string, value: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries;\n  }\n\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  public setMaxEntries(maxEntries: number): void {\n    if (maxEntries < 0) {\n      throw new Error(\n          `The maxEntries of LRU caches must be at least 0, but got ${\n              maxEntries}.`);\n    }\n\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n\n    this.maxEntries = maxEntries;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;AASA;;;;;AAMA,OAAM,MAAOA,QAAQ;EAInBC,YAAYC,UAAmB;IAC7B,IAAI,CAACA,UAAU,GAAGA,UAAU,IAAI,GAAG;IACnC,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAAa;EACnC;EAEA;;;EAGOC,GAAGA,CAACC,GAAW;IACpB,IAAIC,KAAQ;IACZ,IAAI,IAAI,CAACJ,KAAK,CAACK,GAAG,CAACF,GAAG,CAAC,EAAE;MACvBC,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACE,GAAG,CAACC,GAAG,CAAC;MAC3B,IAAI,CAACH,KAAK,CAACM,MAAM,CAACH,GAAG,CAAC;MACtB,IAAI,CAACH,KAAK,CAACO,GAAG,CAACJ,GAAG,EAAEC,KAAK,CAAC;;IAE5B,OAAOA,KAAK;EACd;EAEA;;;;EAIOI,GAAGA,CAACL,GAAW,EAAEM,KAAQ;IAC9B,IAAI,IAAI,CAACT,KAAK,CAACK,GAAG,CAACF,GAAG,CAAC,EAAE;MACvB,IAAI,CAACH,KAAK,CAACM,MAAM,CAACH,GAAG,CAAC;KACvB,MAAM,IAAI,IAAI,CAACH,KAAK,CAACU,IAAI,IAAI,IAAI,CAACX,UAAU,EAAE;MAC7C,MAAMY,WAAW,GAAG,IAAI,CAACX,KAAK,CAACY,IAAI,EAAE,CAACC,IAAI,EAAE,CAACJ,KAAK;MAClD,IAAI,CAACT,KAAK,CAACM,MAAM,CAACK,WAAW,CAAC;;IAEhC,IAAI,CAACX,KAAK,CAACO,GAAG,CAACJ,GAAG,EAAEM,KAAK,CAAC;EAC5B;EAEA;;;EAGOK,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACf,UAAU;EACxB;EAEA;;;;EAIOgB,aAAaA,CAAChB,UAAkB;IACrC,IAAIA,UAAU,GAAG,CAAC,EAAE;MAClB,MAAM,IAAIiB,KAAK,CACX,4DACIjB,UAAU,GAAG,CAAC;;IAGxB,IAAI,IAAI,CAACA,UAAU,GAAGA,UAAU,EAAE;MAChC,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClB,UAAU,GAAGA,UAAU,EAAEkB,CAAC,EAAE,EAAE;QACrD,MAAMN,WAAW,GAAG,IAAI,CAACX,KAAK,CAACY,IAAI,EAAE,CAACC,IAAI,EAAE,CAACJ,KAAK;QAClD,IAAI,CAACT,KAAK,CAACM,MAAM,CAACK,WAAW,CAAC;;;IAIlC,IAAI,CAACZ,UAAU,GAAGA,UAAU;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}