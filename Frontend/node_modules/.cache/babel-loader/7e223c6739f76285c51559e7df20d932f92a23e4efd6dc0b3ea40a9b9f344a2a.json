{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(array, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array) {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array) {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array) {\n  return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array) {\n  const meanValue = mean(array);\n  const demeaned = array.map(value => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array) {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin, end) {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}","map":{"version":3,"names":["ValueError","isInteger","x","parseInt","toString","arrayProd","array","begin","end","length","prod","i","min","Number","NaN","POSITIVE_INFINITY","value","max","NEGATIVE_INFINITY","sum","mean","variance","meanValue","demeaned","map","sumSquare","median","arraySorted","slice","sort","a","b","lowIdx","Math","floor","highIdx","ceil","range","out","push"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/utils/math_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array|Int32Array|Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n    array: number[]|ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[]|Float32Array): number {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[]|Float32Array): number {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[]|Float32Array): number {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[]|Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[]|Float32Array): number {\n  const meanValue = mean(array);\n  const demeaned = array.map((value: number) => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[]|Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}