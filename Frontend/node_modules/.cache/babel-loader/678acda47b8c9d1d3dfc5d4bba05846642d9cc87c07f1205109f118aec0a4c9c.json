{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { abs } from '../ops/abs';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { maximum } from '../ops/maximum';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adamax';\n  }\n  constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon;\n    this.decay = decay;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedWeightedInfNorm = [];\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr = div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n        const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n        const newWeightedInfNorm = maximum(ut0, ut1);\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n        const newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))), value);\n        value.assign(newValue);\n      });\n      this.iteration.assign(add(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n  async getWeights() {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n  async setWeights(weightValues) {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n  }\n}","map":{"version":3,"names":["ENGINE","dispose","tidy","abs","add","div","maximum","mul","scalar","sub","zerosLike","Optimizer","AdamaxOptimizer","className","constructor","learningRate","beta1","beta2","epsilon","decay","accumulatedFirstMoment","accumulatedWeightedInfNorm","iteration","variable","accBeta1","backend","applyGradients","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","oneMinusAccBeta1","lr","forEach","i","value","registeredVariables","trainable","originalName","gradient","tensor","firstMoment","weightedInfNorm","newFirstMoment","ut0","ut1","newWeightedInfNorm","assign","newValue","incrementIterations","v","getWeights","Error","setWeights","weightValues","getConfig","fromConfig","cls","config"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/optimizers/adamax_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {abs} from '../ops/abs';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {maximum} from '../ops/maximum';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adamax';\n  }\n  private accBeta1: Variable;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedWeightedInfNorm: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null,\n      protected decay = 0.0) {\n    super();\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr =\n          div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n\n        const newWeightedInfNorm = maximum(ut0, ut1);\n\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n\n        const newValue =\n            add(mul(div(lr, oneMinusAccBeta1),\n                    div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))),\n                value);\n\n        value.assign(newValue);\n      });\n\n      this.iteration.assign(add(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon'], config['decay']);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,OAAO,EAAEC,IAAI,QAAO,YAAY;AACxC,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,OAAO,QAAO,gBAAgB;AACtC,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,SAAS,QAAO,mBAAmB;AAK3C,SAAQC,SAAS,QAA0B,aAAa;AAExD,OAAM,MAAOC,eAAgB,SAAQD,SAAS;EAC5C;EACA,WAAWE,SAASA,CAAA;IAClB;IACA;IACA;IACA,OAAO,QAAQ;EACjB;EAOAC,YACcC,YAAoB,EAAYC,KAAa,EAC7CC,KAAa,EAAYC,OAAA,GAAkB,IAAI,EAC/CC,KAAA,GAAQ,GAAG;IACvB,KAAK,EAAE;IAHK,KAAAJ,YAAY,GAAZA,YAAY;IAAoB,KAAAC,KAAK,GAALA,KAAK;IACrC,KAAAC,KAAK,GAALA,KAAK;IAAoB,KAAAC,OAAO,GAAPA,OAAO;IAChC,KAAAC,KAAK,GAALA,KAAK;IANX,KAAAC,sBAAsB,GAAwB,EAAE;IAChD,KAAAC,0BAA0B,GAAwB,EAAE;IAQ1DnB,IAAI,CAAC,MAAK;MACR,IAAI,CAACoB,SAAS,GAAGd,MAAM,CAAC,CAAC,CAAC,CAACe,QAAQ,EAAE;MACrC,IAAI,CAACC,QAAQ,GAAGhB,MAAM,CAACQ,KAAK,CAAC,CAACO,QAAQ,EAAE;IAC1C,CAAC,CAAC;IAEF,IAAIL,OAAO,IAAI,IAAI,EAAE;MACnB,IAAI,CAACA,OAAO,GAAGlB,MAAM,CAACyB,OAAO,CAACP,OAAO,EAAE;;EAE3C;EAEAQ,cAAcA,CAACC,iBAAiD;IAC9D,MAAMC,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACH,iBAAiB,CAAC,GAClDA,iBAAiB,CAACI,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,GACxCC,MAAM,CAACC,IAAI,CAACR,iBAAiB,CAAC;IAElCzB,IAAI,CAAC,MAAK;MACR,MAAMkC,gBAAgB,GAAG3B,GAAG,CAAC,CAAC,EAAE,IAAI,CAACe,QAAQ,CAAC;MAC9C,MAAMa,EAAE,GACJhC,GAAG,CAAC,CAAC,IAAI,CAACU,YAAY,EAAEX,GAAG,CAACG,GAAG,CAAC,IAAI,CAACe,SAAS,EAAE,IAAI,CAACH,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;MAEpES,aAAa,CAACU,OAAO,CAAC,CAACL,IAAI,EAAEM,CAAC,KAAI;QAChC,MAAMC,KAAK,GAAGxC,MAAM,CAACyC,mBAAmB,CAACR,IAAI,CAAC;QAC9C,MAAMS,SAAS,GAAG,KAAK;QACvB,IAAI,IAAI,CAACtB,sBAAsB,CAACmB,CAAC,CAAC,IAAI,IAAI,EAAE;UAC1C,IAAI,CAACnB,sBAAsB,CAACmB,CAAC,CAAC,GAAG;YAC/BI,YAAY,EAAE,GAAGV,IAAI,IAAI;YACzBV,QAAQ,EAAEb,SAAS,CAAC8B,KAAK,CAAC,CAACjB,QAAQ,CAACmB,SAAS;WAC9C;;QAEH,IAAI,IAAI,CAACrB,0BAA0B,CAACkB,CAAC,CAAC,IAAI,IAAI,EAAE;UAC9C,IAAI,CAAClB,0BAA0B,CAACkB,CAAC,CAAC,GAAG;YACnCI,YAAY,EAAE,GAAGV,IAAI,IAAI;YACzBV,QAAQ,EAAEb,SAAS,CAAC8B,KAAK,CAAC,CAACjB,QAAQ,CAACmB,SAAS;WAC9C;;QAGH,MAAME,QAAQ,GAAGf,KAAK,CAACC,OAAO,CAACH,iBAAiB,CAAC,GAC7CA,iBAAiB,CAACY,CAAC,CAAC,CAACM,MAAM,GAC3BlB,iBAAiB,CAACM,IAAI,CAAC;QAC3B,IAAIW,QAAQ,IAAI,IAAI,EAAE;UACpB;;QAGF,MAAME,WAAW,GAAG,IAAI,CAAC1B,sBAAsB,CAACmB,CAAC,CAAC,CAAChB,QAAQ;QAC3D,MAAMwB,eAAe,GAAG,IAAI,CAAC1B,0BAA0B,CAACkB,CAAC,CAAC,CAAChB,QAAQ;QAEnE,MAAMyB,cAAc,GAChB5C,GAAG,CAACG,GAAG,CAACuC,WAAW,EAAE,IAAI,CAAC9B,KAAK,CAAC,EAAET,GAAG,CAACqC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAAC,CAAC;QAEpE,MAAMiC,GAAG,GAAG1C,GAAG,CAACwC,eAAe,EAAE,IAAI,CAAC9B,KAAK,CAAC;QAC5C,MAAMiC,GAAG,GAAG/C,GAAG,CAACyC,QAAQ,CAAC;QAEzB,MAAMO,kBAAkB,GAAG7C,OAAO,CAAC2C,GAAG,EAAEC,GAAG,CAAC;QAE5CJ,WAAW,CAACM,MAAM,CAACJ,cAAc,CAAC;QAClCD,eAAe,CAACK,MAAM,CAACD,kBAAkB,CAAC;QAE1C,MAAME,QAAQ,GACVjD,GAAG,CAACG,GAAG,CAACF,GAAG,CAACgC,EAAE,EAAED,gBAAgB,CAAC,EACzB/B,GAAG,CAAC2C,cAAc,EAAE5C,GAAG,CAAC+C,kBAAkB,EAAE,IAAI,CAACjC,OAAO,CAAC,CAAC,CAAC,EAC/DsB,KAAK,CAAC;QAEdA,KAAK,CAACY,MAAM,CAACC,QAAQ,CAAC;MACxB,CAAC,CAAC;MAEF,IAAI,CAAC/B,SAAS,CAAC8B,MAAM,CAAChD,GAAG,CAAC,IAAI,CAACkB,SAAS,EAAE,CAAC,CAAC,CAAC;MAC7C,IAAI,CAACE,QAAQ,CAAC4B,MAAM,CAAC7C,GAAG,CAAC,IAAI,CAACiB,QAAQ,EAAE,IAAI,CAACR,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC;IACF,IAAI,CAACsC,mBAAmB,EAAE;EAC5B;EAESrD,OAAOA,CAAA;IACd,IAAI,CAACuB,QAAQ,CAACvB,OAAO,EAAE;IACvB,IAAI,CAACqB,SAAS,CAACrB,OAAO,EAAE;IAExB,IAAI,IAAI,CAACmB,sBAAsB,IAAI,IAAI,EAAE;MACvCnB,OAAO,CAAC,IAAI,CAACmB,sBAAsB,CAACW,GAAG,CAACwB,CAAC,IAAIA,CAAC,CAAChC,QAAQ,CAAC,CAAC;;IAE3D,IAAI,IAAI,CAACF,0BAA0B,IAAI,IAAI,EAAE;MAC3CpB,OAAO,CAAC,IAAI,CAACoB,0BAA0B,CAACU,GAAG,CAACwB,CAAC,IAAIA,CAAC,CAAChC,QAAQ,CAAC,CAAC;;EAEjE;EAES,MAAMiC,UAAUA,CAAA;IACvB,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACpE;EAES,MAAMC,UAAUA,CAACC,YAA2B;IACnD,MAAM,IAAIF,KAAK,CAAC,iDAAiD,CAAC;EACpE;EAEAG,SAASA,CAAA;IACP,OAAO;MACL,cAAc,EAAE,IAAI,CAAC7C,YAAY;MACjC,OAAO,EAAE,IAAI,CAACC,KAAK;MACnB,OAAO,EAAE,IAAI,CAACC,KAAK;MACnB,SAAS,EAAE,IAAI,CAACC,OAAO;MACvB,OAAO,EAAE,IAAI,CAACC;KACf;EACH;EAEA;EACA,OAAgB0C,UAAUA,CACtBC,GAA+B,EAAEC,MAAkB;IACrD,OAAO,IAAID,GAAG,CACVC,MAAM,CAAC,cAAc,CAAC,EAAEA,MAAM,CAAC,OAAO,CAAC,EAAEA,MAAM,CAAC,OAAO,CAAC,EACxDA,MAAM,CAAC,SAAS,CAAC,EAAEA,MAAM,CAAC,OAAO,CAAC,CAAC;EACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}