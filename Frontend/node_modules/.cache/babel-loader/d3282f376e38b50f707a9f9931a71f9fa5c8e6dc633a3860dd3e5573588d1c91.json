{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropFilterV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    filterShape\n  } = attrs;\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nexport const conv3DBackpropFilterV2Config = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2\n};","map":{"version":3,"names":["backend_util","Conv3DBackpropFilterV2","TensorBuffer","util","assertNotComplex","conv3DBackpropFilterV2","args","inputs","backend","attrs","x","dy","strides","pad","filterShape","xStrides","computeStrides","shape","dyStrides","convInfo","computeConv3DInfo","strideDepth","strideHeight","strideWidth","filterDepth","filterHeight","filterWidth","dw","dwValues","values","dwS0","dwS1","dwS2","dwS3","dyValues","data","get","dataId","dyS0","dyS1","dyS2","dyS3","xValues","xS0","xS1","xS2","xS3","frontPad","padInfo","front","leftPad","left","topPad","top","wF","yFMin","Math","max","ceil","yFMax","min","outDepth","inDepth","wOffset1","wR","yRMin","yRMax","outHeight","inHeight","wOffset2","wC","yCMin","yCMax","outWidth","inWidth","wOffset3","d1","inChannels","wOffset4","d2","outChannels","dotProd","b","batchSize","xOffset1","yOffset1","yF","xF","xOffset2","yOffset2","yR","xR","xOffset3","yOffset3","yC","xC","xOffset4","yOffset4","makeTensorInfo","dtype","conv3DBackpropFilterV2Config","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}