{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n  const $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res = add(weighted, $lstmBias);\n  // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n  const newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n  const newH = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\nexport const basicLSTMCell = /* @__PURE__ */op({\n  basicLSTMCell_\n});","map":{"version":3,"names":["convertToTensor","add","concat","matMul","mul","op","sigmoid","slice","tanh","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","data","c","h","$forgetBias","$lstmKernel","$lstmBias","$data","$c","$h","combined","weighted","res","batchSize","shape","sliceCols","sliceSize","i","j","f","o","newC","newH","basicLSTMCell"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/basic_lstm_cell.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {add} from './add';\nimport {concat} from './concat';\nimport {matMul} from './mat_mul';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {sigmoid} from './sigmoid';\nimport {slice} from './slice';\nimport {tanh} from './tanh';\n\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(\n    forgetBias: Scalar|TensorLike, lstmKernel: Tensor2D|TensorLike,\n    lstmBias: Tensor1D|TensorLike, data: Tensor2D|TensorLike,\n    c: Tensor2D|TensorLike, h: Tensor2D|TensorLike): [Tensor2D, Tensor2D] {\n  const $forgetBias =\n      convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel =\n      convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res: Tensor2D = add(weighted, $lstmBias);\n\n  // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize: [number, number] = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n\n  const newC: Tensor2D =\n      add(mul(sigmoid(i), tanh(j)),\n          mul($c, sigmoid(add($forgetBias, f)) as Tensor2D));\n  const newH: Tensor2D = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = /* @__PURE__ */ op({basicLSTMCell_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,MAAM,QAAO,UAAU;AAC/B,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,IAAI,QAAO,QAAQ;AAE3B;;;;;;;;;;;;;;;;AAgBA,SAASC,cAAcA,CACnBC,UAA6B,EAAEC,UAA+B,EAC9DC,QAA6B,EAAEC,IAAyB,EACxDC,CAAsB,EAAEC,CAAsB;EAChD,MAAMC,WAAW,GACbhB,eAAe,CAACU,UAAU,EAAE,YAAY,EAAE,eAAe,CAAC;EAC9D,MAAMO,WAAW,GACbjB,eAAe,CAACW,UAAU,EAAE,YAAY,EAAE,eAAe,CAAC;EAC9D,MAAMO,SAAS,GAAGlB,eAAe,CAACY,QAAQ,EAAE,UAAU,EAAE,eAAe,CAAC;EACxE,MAAMO,KAAK,GAAGnB,eAAe,CAACa,IAAI,EAAE,MAAM,EAAE,eAAe,CAAC;EAC5D,MAAMO,EAAE,GAAGpB,eAAe,CAACc,CAAC,EAAE,GAAG,EAAE,eAAe,CAAC;EACnD,MAAMO,EAAE,GAAGrB,eAAe,CAACe,CAAC,EAAE,GAAG,EAAE,eAAe,CAAC;EAEnD,MAAMO,QAAQ,GAAGpB,MAAM,CAAC,CAACiB,KAAK,EAAEE,EAAE,CAAC,EAAE,CAAC,CAAC;EACvC,MAAME,QAAQ,GAAGpB,MAAM,CAACmB,QAAQ,EAAEL,WAAW,CAAC;EAC9C,MAAMO,GAAG,GAAavB,GAAG,CAACsB,QAAQ,EAAEL,SAAS,CAAC;EAE9C;EACA,MAAMO,SAAS,GAAGD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;EAC9B,MAAMC,SAAS,GAAGH,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;EAClC,MAAME,SAAS,GAAqB,CAACH,SAAS,EAAEE,SAAS,CAAC;EAC1D,MAAME,CAAC,GAAGtB,KAAK,CAACiB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEI,SAAS,CAAC;EACvC,MAAME,CAAC,GAAGvB,KAAK,CAACiB,GAAG,EAAE,CAAC,CAAC,EAAEG,SAAS,CAAC,EAAEC,SAAS,CAAC;EAC/C,MAAMG,CAAC,GAAGxB,KAAK,CAACiB,GAAG,EAAE,CAAC,CAAC,EAAEG,SAAS,GAAG,CAAC,CAAC,EAAEC,SAAS,CAAC;EACnD,MAAMI,CAAC,GAAGzB,KAAK,CAACiB,GAAG,EAAE,CAAC,CAAC,EAAEG,SAAS,GAAG,CAAC,CAAC,EAAEC,SAAS,CAAC;EAEnD,MAAMK,IAAI,GACNhC,GAAG,CAACG,GAAG,CAACE,OAAO,CAACuB,CAAC,CAAC,EAAErB,IAAI,CAACsB,CAAC,CAAC,CAAC,EACxB1B,GAAG,CAACgB,EAAE,EAAEd,OAAO,CAACL,GAAG,CAACe,WAAW,EAAEe,CAAC,CAAC,CAAa,CAAC,CAAC;EAC1D,MAAMG,IAAI,GAAa9B,GAAG,CAACI,IAAI,CAACyB,IAAI,CAAC,EAAE3B,OAAO,CAAC0B,CAAC,CAAC,CAAC;EAClD,OAAO,CAACC,IAAI,EAAEC,IAAI,CAAC;AACrB;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAgB9B,EAAE,CAAC;EAACI;AAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}