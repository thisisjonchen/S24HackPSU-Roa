{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values;\n  const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, 'float32');\n  const dyData = backend.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, 'float32', dyData);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);\n              const curPos = wR * effectiveFilterWidth + wC;\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"names":["backend_util","buffer","MaxPoolGrad","assertNotComplex","maxPoolPositions","maxPoolGrad","args","inputs","backend","attrs","dy","input","output","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","xValues","data","get","dataId","values","maxPosBuf","outShape","dtype","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padLeft","padInfo","left","padTop","top","dx","dyData","dyBuf","b","batchSize","d","inChannels","dxR","inHeight","dxC","inWidth","dyRCorner","dyCCorner","dotProd","wR","dyR","outHeight","Math","floor","wC","dyC","outWidth","maxPos","curPos","mask","pixel","set","makeTensorInfo","maxPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAY,EAAEC,MAAM,EAA4BC,WAAW,QAA0E,uBAAuB;AAGpK,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAUC,WAAWA,CAACC,IAI3B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,EAAE;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGL,MAAM;EAClC,MAAMM,CAAC,GAAGF,KAAK;EACfR,gBAAgB,CAAC,CAACQ,KAAK,EAAEC,MAAM,CAAC,EAAE,aAAa,CAAC;EAChD,MAAM;IAACE,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC,GAAGR,KAAK;EAEzD,MAAMS,QAAQ,GAAGlB,YAAY,CAACmB,iBAAiB,CAC3CN,CAAC,CAACO,KAAyC,EAAEN,UAAU,EAAEC,OAAO,EAChE,CAAC,CAAC,iBAAiBC,GAAG,EAAEC,eAAe,CAAC;EAC5C,MAAMI,OAAO,GAAGb,OAAO,CAACc,IAAI,CAACC,GAAG,CAACV,CAAC,CAACW,MAAM,CAAC,CAACC,MAAoB;EAC/D,MAAMC,SAAS,GAAGzB,MAAM,CACpBiB,QAAQ,CAACS,QAAQ,EAAEd,CAAC,CAACe,KAAK,EAC1BxB,gBAAgB,CAACiB,OAAO,EAAER,CAAC,CAACO,KAAK,EAAEP,CAAC,CAACe,KAAK,EAAEV,QAAQ,CAAC,CAACO,MAAM,CAAC;EACjE,MAAMI,YAAY,GAAGX,QAAQ,CAACW,YAAY;EAC1C,MAAMC,WAAW,GAAGZ,QAAQ,CAACY,WAAW;EACxC,MAAMC,cAAc,GAAGb,QAAQ,CAACa,cAAc;EAC9C,MAAMC,aAAa,GAAGd,QAAQ,CAACc,aAAa;EAC5C,MAAMC,qBAAqB,GAAGf,QAAQ,CAACe,qBAAqB;EAC5D,MAAMC,oBAAoB,GAAGhB,QAAQ,CAACgB,oBAAoB;EAC1D,MAAMC,OAAO,GAAGD,oBAAoB,GAAG,CAAC,GAAGhB,QAAQ,CAACkB,OAAO,CAACC,IAAI;EAChE,MAAMC,MAAM,GAAGL,qBAAqB,GAAG,CAAC,GAAGf,QAAQ,CAACkB,OAAO,CAACG,GAAG;EAC/D,MAAMC,EAAE,GACJvC,MAAM,CAAUY,CAAC,CAACO,KAAyC,EAAE,SAAS,CAAC;EAE3E,MAAMqB,MAAM,GAAGjC,OAAO,CAACc,IAAI,CAACC,GAAG,CAACb,EAAE,CAACc,MAAM,CAAC,CAACC,MAAsB;EACjE,MAAMiB,KAAK,GAAGzC,MAAM,CAChBS,EAAE,CAACU,KAAyC,EAAE,SAAS,EAAEqB,MAAM,CAAC;EAEpE,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,QAAQ,CAAC0B,SAAS,EAAE,EAAED,CAAC,EAAE;IAC3C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,QAAQ,CAAC4B,UAAU,EAAE,EAAED,CAAC,EAAE;MAC5C,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG7B,QAAQ,CAAC8B,QAAQ,EAAE,EAAED,GAAG,EAAE;QAChD,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG/B,QAAQ,CAACgC,OAAO,EAAE,EAAED,GAAG,EAAE;UAC/C;UACA,MAAME,SAAS,GAAGJ,GAAG,GAAGT,MAAM;UAC9B,MAAMc,SAAS,GAAGH,GAAG,GAAGd,OAAO;UAC/B,IAAIkB,OAAO,GAAG,CAAC;UACf,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGrB,qBAAqB,EAAEqB,EAAE,IAAIvB,cAAc,EAAE;YACjE,MAAMwB,GAAG,GAAG,CAACJ,SAAS,GAAGG,EAAE,IAAIzB,YAAY;YAC3C,IAAI0B,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAIrC,QAAQ,CAACsC,SAAS,IACpCC,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,KAAKA,GAAG,EAAE;cAC3B;;YAEF,KAAK,IAAII,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGzB,oBAAoB,EAAEyB,EAAE,IAAI3B,aAAa,EAAE;cAC/D,MAAM4B,GAAG,GAAG,CAACR,SAAS,GAAGO,EAAE,IAAI7B,WAAW;cAC1C,IAAI8B,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI1C,QAAQ,CAAC2C,QAAQ,IACnCJ,IAAI,CAACC,KAAK,CAACE,GAAG,CAAC,KAAKA,GAAG,EAAE;gBAC3B;;cAEF,MAAME,MAAM,GAAG7B,qBAAqB,GAAGC,oBAAoB,GAAG,CAAC,GAC1DR,SAAS,CAACH,GAAG,CAACoB,CAAC,EAAEY,GAAG,EAAEK,GAAG,EAAEf,CAAC,CAAY;cAC7C,MAAMkB,MAAM,GAAGT,EAAE,GAAGpB,oBAAoB,GAAGyB,EAAE;cAE7C,MAAMK,IAAI,GAAGF,MAAM,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;cACtC,IAAIC,IAAI,KAAK,CAAC,EAAE;gBACd;;cAGF,MAAMC,KAAK,GAAGvB,KAAK,CAACnB,GAAG,CAACoB,CAAC,EAAEY,GAAG,EAAEK,GAAG,EAAEf,CAAC,CAAC;cACvCQ,OAAO,IAAIY,KAAK,GAAGD,IAAI;;;UAG3BxB,EAAE,CAAC0B,GAAG,CAACb,OAAO,EAAEV,CAAC,EAAEI,GAAG,EAAEE,GAAG,EAAEJ,CAAC,CAAC;;;;;EAKvC,OAAOrC,OAAO,CAAC2D,cAAc,CAAC3B,EAAE,CAACpB,KAAK,EAAEoB,EAAE,CAACZ,KAAK,EAAEY,EAAE,CAACf,MAAM,CAAC;AAC9D;AAEA,OAAO,MAAM2C,iBAAiB,GAAiB;EAC7CC,UAAU,EAAEnE,WAAW;EACvBoE,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAElE;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}