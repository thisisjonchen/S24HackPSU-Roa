{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  const $x = cast({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      dtype: 'float32'\n    }\n  });\n  toDispose.push($x);\n  const res = div({\n    inputs: {\n      a: $x,\n      b: reduceSizeScalar\n    },\n    backend\n  });\n  toDispose.push(res);\n  const result = sum({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      axis,\n      keepDims\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean\n};","map":{"version":3,"names":["backend_util","Mean","util","cast","div","sum","mean","args","inputs","backend","attrs","x","axis","keepDims","axes","parseAxisParam","shape","shapes","computeOutAndReduceShapes","reduceShape","reduceSize","sizeFromShape","toDispose","reduceSizeScalar","makeTensorInfo","Float32Array","push","$x","dtype","res","a","b","result","forEach","t","disposeIntermediateTensorInfo","meanConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Mean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA4BC,IAAI,EAAqCC,IAAI,QAAO,uBAAuB;AAG3H,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,GAAG,QAAO,WAAW;AAC7B,SAAQC,GAAG,QAAO,OAAO;AAEzB,OAAM,SAAUC,IAAIA,CAChBC,IAAqE;EAEvE,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,IAAI;IAAEC;EAAQ,CAAC,GAAGH,KAAK;EAE9B,MAAMI,IAAI,GAAGZ,IAAI,CAACa,cAAc,CAACH,IAAI,EAAED,CAAC,CAACK,KAAK,CAAC;EAC/C,MAAMC,MAAM,GAAGjB,YAAY,CAACkB,yBAAyB,CAACP,CAAC,CAACK,KAAK,EAAEF,IAAI,CAAC;EACpE,MAAMK,WAAW,GAAGF,MAAM,CAAC,CAAC,CAAC;EAC7B,MAAMG,UAAU,GAAGlB,IAAI,CAACmB,aAAa,CAACF,WAAW,CAAC;EAClD,MAAMG,SAAS,GAAG,EAAE;EACpB,MAAMC,gBAAgB,GAClBd,OAAO,CAACe,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE,IAAIC,YAAY,CAAC,CAACL,UAAU,CAAC,CAAC,CAAC;EACzEE,SAAS,CAACI,IAAI,CAACH,gBAAgB,CAAC;EAEhC,MAAMI,EAAE,GAAGxB,IAAI,CAAC;IAACK,MAAM,EAAE;MAACG;IAAC,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACkB,KAAK,EAAE;IAAS;EAAC,CAAC,CAAC;EAClEN,SAAS,CAACI,IAAI,CAACC,EAAE,CAAC;EAElB,MAAME,GAAG,GACLzB,GAAG,CAAC;IAACI,MAAM,EAAE;MAACsB,CAAC,EAAEH,EAAE;MAAEI,CAAC,EAAER;IAAgB,CAAC;IAAEd;EAAO,CAAC,CAAe;EACtEa,SAAS,CAACI,IAAI,CAACG,GAAG,CAAC;EAEnB,MAAMG,MAAM,GAAG3B,GAAG,CAAC;IAACG,MAAM,EAAE;MAACG,CAAC,EAAEkB;IAAG,CAAC;IAAEpB,OAAO;IAAEC,KAAK,EAAE;MAACE,IAAI;MAAEC;IAAQ;EAAC,CAAC,CAAC;EAExES,SAAS,CAACW,OAAO,CAACC,CAAC,IAAIzB,OAAO,CAAC0B,6BAA6B,CAACD,CAAC,CAAC,CAAC;EAEhE,OAAOF,MAAM;AACf;AAEA,OAAO,MAAMI,UAAU,GAAiB;EACtCC,UAAU,EAAEpC,IAAI;EAChBqC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEjC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}