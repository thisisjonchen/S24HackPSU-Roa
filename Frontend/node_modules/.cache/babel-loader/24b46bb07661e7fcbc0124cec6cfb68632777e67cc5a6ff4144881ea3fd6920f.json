{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { Optimizer } from './optimizer';\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adam';\n  }\n  constructor(learningRate, beta1, beta2, epsilon = null) {\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedSecondMoment = [];\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n  applyGradients(variableGradients) {\n    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n        const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment = add(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n        const newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n        value.assign(newValue);\n      });\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n  async getWeights() {\n    // Order matters for Python compatibility.\n    const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(variables.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon\n    };\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n  }\n}","map":{"version":3,"names":["ENGINE","dispose","tidy","add","div","mul","pow","scalar","sqrt","square","sub","zerosLike","Optimizer","AdamOptimizer","className","constructor","learningRate","beta1","beta2","epsilon","accumulatedFirstMoment","accumulatedSecondMoment","accBeta1","variable","accBeta2","backend","applyGradients","variableGradients","varNames","Array","isArray","map","v","name","Object","keys","oneMinusAccBeta1","oneMinusAccBeta2","forEach","i","value","registeredVariables","trainable","originalName","gradient","tensor","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","assign","newValue","incrementIterations","getWeights","variables","saveIterations","concat","setWeights","weightValues","extractIterations","iterations_","variableCount","length","slice","getConfig","fromConfig","cls","config"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/optimizers/adam_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adam';\n  }\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment =\n            add(mul(secondMoment, this.beta2),\n                mul(square(gradient), 1 - this.beta2));\n\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment =\n            div(newSecondMoment, oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            add(mul(div(biasCorrectedFirstMoment,\n                        add(sqrt(biasCorrectedSecondMoment), this.epsilon)),\n                    -this.learningRate),\n                value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}