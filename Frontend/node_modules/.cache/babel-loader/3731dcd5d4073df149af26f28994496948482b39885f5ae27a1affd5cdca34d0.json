{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({\n        kernelMs: util.now() - start\n      });\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n}","map":{"version":3,"names":["env","util","Profiler","constructor","backendTimer","logger","Logger","profileKernel","kernelName","inputs","f","outputs","holdResultWrapperFn","timer","start","now","timerAvailable","time","output","dataSync","Promise","resolve","kernelMs","getBool","i","length","data","then","tensorVals","checkComputationForErrors","dtype","kernelProfile","timeMs","timing","extraInfo","getExtraProfileInfo","logKernelProfile","forEach","result","all","valueContainer","vals","num","isNaN","isFinite","console","warn","name","rightPad","paddedName","rank","size","shape","toString","inputShapesDescription","input","inputShape","inputRank","log"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/profiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}