{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRNGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    y,\n    dy\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  assertNotComplex(dy, 'LRNGrad');\n  const dySize = util.sizeFromShape(dy.shape);\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values;\n  const xValues = backend.data.get(x.dataId).values;\n  const yValues = backend.data.get(y.dataId).values;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad\n};","map":{"version":3,"names":["LRNGrad","util","assertNotComplex","lRNGrad","args","inputs","backend","attrs","x","y","dy","depthRadius","bias","alpha","beta","dySize","sizeFromShape","shape","channels","dyValues","data","get","dataId","values","xValues","yValues","result","Float32Array","size","offset","currentChannel","depthBegin","Math","max","depthEnd","min","norm","k","pow","dyi","makeTensorInfo","dtype","LRNGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/LRNGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAO,EAAuDC,IAAI,QAAO,uBAAuB;AAGlI,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,OAAOA,CACnBC,IACyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGL,MAAM;EACzB,MAAM;IAACM,WAAW;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAI,CAAC,GAAGP,KAAK;EAE9CL,gBAAgB,CAACQ,EAAE,EAAE,SAAS,CAAC;EAE/B,MAAMK,MAAM,GAAGd,IAAI,CAACe,aAAa,CAACN,EAAE,CAACO,KAAK,CAAC;EAE3C,MAAMC,QAAQ,GAAGR,EAAE,CAACO,KAAK,CAAC,CAAC,CAAC;EAC5B,MAAME,QAAQ,GAAGb,OAAO,CAACc,IAAI,CAACC,GAAG,CAACX,EAAE,CAACY,MAAM,CAAC,CAACC,MAAoB;EACjE,MAAMC,OAAO,GAAGlB,OAAO,CAACc,IAAI,CAACC,GAAG,CAACb,CAAC,CAACc,MAAM,CAAC,CAACC,MAAoB;EAC/D,MAAME,OAAO,GAAGnB,OAAO,CAACc,IAAI,CAACC,GAAG,CAACZ,CAAC,CAACa,MAAM,CAAC,CAACC,MAAoB;EAC/D,MAAMG,MAAM,GAAG,IAAIC,YAAY,CAACZ,MAAM,CAAC;EACvC,MAAMa,IAAI,GAAGb,MAAM;EAEnB,KAAK,IAAIc,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGD,IAAI,EAAEC,MAAM,EAAE,EAAE;IAC5C,MAAMC,cAAc,GAAGD,MAAM,GAAGX,QAAQ;IACxC,MAAMa,UAAU,GACXF,MAAM,GAAGC,cAAc,GAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,cAAc,GAAGnB,WAAW,CAAC;IACzE,MAAMuB,QAAQ,GAAIL,MAAM,GAAGC,cAAc,GACrCE,IAAI,CAACG,GAAG,CAACjB,QAAQ,EAAEY,cAAc,GAAGnB,WAAW,GAAG,CAAC,CAAC;IAExD,IAAIyB,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIC,CAAC,GAAGN,UAAU,EAAEM,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MAC1CD,IAAI,IAAIJ,IAAI,CAACM,GAAG,CAACd,OAAO,CAACa,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEjCD,IAAI,GAAGvB,KAAK,GAAGuB,IAAI,GAAGxB,IAAI;IAE1B,KAAK,IAAIyB,CAAC,GAAGN,UAAU,EAAEM,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MAC1C,IAAIE,GAAG,GAAG,CAAC,CAAC,GAAG1B,KAAK,GAAGC,IAAI,GAAGU,OAAO,CAACa,CAAC,CAAC,GAAGZ,OAAO,CAACI,MAAM,CAAC,GAAGO,IAAI;MACjE,IAAIP,MAAM,KAAKQ,CAAC,EAAE;QAChBE,GAAG,IAAIP,IAAI,CAACM,GAAG,CAACF,IAAI,EAAE,CAACtB,IAAI,CAAC;;MAE9ByB,GAAG,IAAIpB,QAAQ,CAACU,MAAM,CAAC;MACvBH,MAAM,CAACW,CAAC,CAAC,IAAIE,GAAG;;;EAIpB,OAAOjC,OAAO,CAACkC,cAAc,CAAC9B,EAAE,CAACO,KAAK,EAAET,CAAC,CAACiC,KAAK,EAAEf,MAAM,CAAC;AAC1D;AAEA;AACA,OAAO,MAAMgB,aAAa,GAAiB;EACzCC,UAAU,EAAE3C,OAAO;EACnB4C,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE1C;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}