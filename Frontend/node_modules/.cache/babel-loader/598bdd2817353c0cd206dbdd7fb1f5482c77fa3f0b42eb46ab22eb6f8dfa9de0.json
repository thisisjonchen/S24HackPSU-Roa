{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = zerosLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill({\n      backend,\n      attrs: {\n        shape: x.shape,\n        value: 0,\n        dtype: x.dtype\n      }\n    });\n  }\n}\nexport const zerosLikeConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike\n};","map":{"version":3,"names":["ZerosLike","complex","fill","imag","real","zerosLike","args","inputs","backend","x","dtype","Error","realPart","input","r","imagPart","i","result","disposeIntermediateTensorInfo","attrs","shape","value","zerosLikeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/ZerosLike.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,SAAS,QAAwB,uBAAuB;AAItG,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,IAAI,QAAO,QAAQ;AAE3B,OAAM,SAAUC,SAASA,CACrBC,IAAwD;EAC1D,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElB,IAAIE,CAAC,CAACC,KAAK,KAAK,QAAQ,EAAE;IACxB,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;GACjE,MAAM,IAAIF,CAAC,CAACC,KAAK,KAAK,WAAW,EAAE;IAClC,MAAME,QAAQ,GAAGR,IAAI,CAAC;MAACG,MAAM,EAAE;QAACM,KAAK,EAAEJ;MAAC,CAAC;MAAED;IAAO,CAAC,CAAC;IACpD,MAAMM,CAAC,GAAGT,SAAS,CAAC;MAACE,MAAM,EAAE;QAACE,CAAC,EAAEG;MAAQ,CAAC;MAAEJ;IAAO,CAAC,CAAC;IACrD,MAAMO,QAAQ,GAAGZ,IAAI,CAAC;MAACI,MAAM,EAAE;QAACM,KAAK,EAAEJ;MAAC,CAAC;MAAED;IAAO,CAAC,CAAC;IACpD,MAAMQ,CAAC,GAAGX,SAAS,CAAC;MAACE,MAAM,EAAE;QAACE,CAAC,EAAEM;MAAQ,CAAC;MAAEP;IAAO,CAAC,CAAC;IAErD,MAAMS,MAAM,GAAGhB,OAAO,CAAC;MAACM,MAAM,EAAE;QAACH,IAAI,EAAEU,CAAC;QAAEX,IAAI,EAAEa;MAAC,CAAC;MAAER;IAAO,CAAC,CAAC;IAE7DA,OAAO,CAACU,6BAA6B,CAACN,QAAQ,CAAC;IAC/CJ,OAAO,CAACU,6BAA6B,CAACJ,CAAC,CAAC;IACxCN,OAAO,CAACU,6BAA6B,CAACH,QAAQ,CAAC;IAC/CP,OAAO,CAACU,6BAA6B,CAACF,CAAC,CAAC;IAExC,OAAOC,MAAM;GACd,MAAM;IACL,OAAOf,IAAI,CAAC;MAACM,OAAO;MAAEW,KAAK,EAAE;QAACC,KAAK,EAAEX,CAAC,CAACW,KAAK;QAAEC,KAAK,EAAE,CAAC;QAAEX,KAAK,EAAED,CAAC,CAACC;MAAK;IAAC,CAAC,CAAC;;AAE7E;AAEA,OAAO,MAAMY,eAAe,GAAiB;EAC3CC,UAAU,EAAEvB,SAAS;EACrBwB,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEpB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}