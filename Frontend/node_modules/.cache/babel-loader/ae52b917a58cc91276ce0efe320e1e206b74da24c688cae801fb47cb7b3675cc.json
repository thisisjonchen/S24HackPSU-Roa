{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    inputShape\n  } = attrs;\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNativeBackpropInput","TensorBuffer","util","assertNotComplex","depthwiseConv2dNativeBackpropInput","args","inputs","backend","attrs","dy","filter","strides","dilations","pad","dimRoundingMode","inputShape","dyStrides","computeStrides","shape","filterStrides","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","dxS0","dxS1","dxS2","dyValues","data","get","dataId","dyS0","dyS1","dyS2","fltValues","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","chMul","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","dm","d2","pixel","weight","makeTensorInfo","dtype","depthwiseConv2dNativeBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}