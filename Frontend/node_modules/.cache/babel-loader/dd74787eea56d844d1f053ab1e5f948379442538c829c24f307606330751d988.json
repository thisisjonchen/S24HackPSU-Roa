{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImpl } from './RaggedGather_impl';\nexport function raggedGather(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    paramsNestedSplits,\n    paramsDenseValues,\n    indices\n  } = inputs;\n  const {\n    outputRaggedRank\n  } = attrs;\n  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.data.get(t.dataId).values);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;\n  const $indices = backend.data.get(indices.dataId).values;\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImpl($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));\n  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather\n};","map":{"version":3,"names":["RaggedGather","raggedGatherImpl","raggedGather","args","inputs","backend","attrs","paramsNestedSplits","paramsDenseValues","indices","outputRaggedRank","$paramsNestedSplits","map","t","data","get","dataId","values","$paramsNestedSplitsShapes","shape","$paramsDenseValues","$indices","outputNestedSplits","outputDenseValues","outputDenseValuesShape","dtype","outputNestedSplitsTensors","splits","makeTensorInfo","length","outputDenseValuesTensor","concat","raggedGatherConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/RaggedGather.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAY,QAAsE,uBAAuB;AAI3I,SAAQC,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAUC,YAAYA,CAACC,IAI5B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,kBAAkB;IAAEC,iBAAiB;IAAEC;EAAO,CAAC,GAAGL,MAAM;EAC/D,MAAM;IAACM;EAAgB,CAAC,GAAGJ,KAAK;EAEhC,MAAMK,mBAAmB,GAAGJ,kBAAkB,CAACK,GAAG,CAC9CC,CAAC,IAAIR,OAAO,CAACS,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,MAAM,CAAC,CAACC,MAAoB,CAAC;EACzD,MAAMC,yBAAyB,GAAGX,kBAAkB,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACM,KAAK,CAAC;EACtE,MAAMC,kBAAkB,GACpBf,OAAO,CAACS,IAAI,CAACC,GAAG,CAACP,iBAAiB,CAACQ,MAAM,CAAC,CAACC,MAAoB;EACnE,MAAMI,QAAQ,GAAGhB,OAAO,CAACS,IAAI,CAACC,GAAG,CAACN,OAAO,CAACO,MAAM,CAAC,CAACC,MAAoB;EAEtE,MAAM,CAACK,kBAAkB,EAAEC,iBAAiB,EAAEC,sBAAsB,CAAC,GACjEvB,gBAAgB,CACZU,mBAAmB,EAAEO,yBAAyB,EAAEE,kBAAkB,EAClEZ,iBAAiB,CAACW,KAAK,EAAEX,iBAAiB,CAACiB,KAAK,EAAEJ,QAAQ,EAC1DZ,OAAO,CAACU,KAAK,EAAET,gBAAgB,CAAC;EAExC,MAAMgB,yBAAyB,GAAGJ,kBAAkB,CAACV,GAAG,CACnDe,MAAM,IAAKtB,OAAO,CAACuB,cAAc,CAAC,CAACD,MAAM,CAACE,MAAM,CAAC,EAAE,OAAO,EAAEF,MAAM,CAAC,CAAC;EAEzE,MAAMG,uBAAuB,GAAGzB,OAAO,CAACuB,cAAc,CAClDJ,sBAAsB,EAAEhB,iBAAiB,CAACiB,KAAK,EAAEF,iBAAiB,CAAC;EAEvE,OAAOG,yBAAyB,CAACK,MAAM,CAAC,CAACD,uBAAuB,CAAC,CAAC;AACpE;AAEA,OAAO,MAAME,kBAAkB,GAAiB;EAC9CC,UAAU,EAAEjC,YAAY;EACxBkC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEjC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}