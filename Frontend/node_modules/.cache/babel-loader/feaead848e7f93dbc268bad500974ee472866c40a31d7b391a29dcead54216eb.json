{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { singletonOrArray, toList } from '../utils/generic_utils';\nimport { standardizeClassWeights, standardizeWeights } from './training_utils';\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, iteratorOut) {\n  let xs;\n  let ys;\n  const iteratorOutObj = iteratorOut;\n  xs = iteratorOutObj['xs'];\n  ys = iteratorOutObj['ys'];\n  tfc.util.assert(xs != null && ys != null, () => 'A Dataset iterator for fitDataset() is expected to generate ' + 'objects of the form `{xs: xVal, ys: yVal}`, where the two ' + 'values may be `tf.Tensor`, an array of Tensors, or a map of ' + 'string to Tensor.  The provided Dataset instead generates ' + `${iteratorOut}`);\n  const flattenedXs = flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n  const flattenedYs = flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n  const batchSize = flattenedXs[0].shape[0];\n  tfc.util.assert(flattenedXs.length === model.inputs.length, () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` + `provides ${flattenedXs.length} inputs.  (Expected input keys: ` + `${JSON.stringify(model.inputNames)})`);\n  tfc.util.assert(flattenedYs.length === model.outputs.length, () => `LayersModel has ${model.outputs.length} outputs, but the dataset ` + `provides ${flattenedYs.length} outputs.  (Expected output keys: ` + `${JSON.stringify(model.outputNames)})`);\n  for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n    tfc.util.assert(flattenedXs[xIndex].shape[0] === batchSize, () => `Batch size mismatch: input ` + `${model.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; ` + `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n  for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n    tfc.util.assert(flattenedYs[yIndex].shape[0] === batchSize, () => `Batch size mismatch: output ` + `${model.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; ` + `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n  return {\n    xs: flattenedXs,\n    ys: flattenedYs\n  };\n}\nfunction flattenTensorOrArrayOrMap(inputOrOutput, names, values) {\n  if (values instanceof tfc.Tensor) {\n    return [values];\n  } else if (Array.isArray(values)) {\n    tfc.util.assert(values.length === names.length, () => `Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);\n    return values;\n  } else {\n    const result = [];\n    // Check that all the required keys are available.\n    for (const name of names) {\n      if (values[name] == null) {\n        throw new ValueError(`The feature data generated by the dataset lacks the required ` + `${inputOrOutput} key '${name}'.`);\n      }\n      result.push(values[name]);\n    }\n    return result;\n  }\n}\nfunction standardizeTensorValidationData(data) {\n  if (data.length === 3) {\n    throw new NotImplementedError('Validation with sample weights is not implemented yet.');\n  }\n  return {\n    xs: data[0],\n    ys: data[1]\n  };\n}\nexport async function fitDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n  const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n  tfc.util.assert(model.optimizer != null, () => 'You must compile a model before training/testing. Use ' + 'LayersModel.compile(modelCompileConfig).');\n  tfc.util.assert(args != null, () => `For fitDataset(), the 2nd argument (config) is required, ` + `but it is not provided in this call.`);\n  tfc.util.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), () => `For fitDataset(), config.epochs is expected to be a positive ` + `integer, but got ${args.epochs}`);\n  tfc.util.assert(!hasBatchesPerEpoch || args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` + `positive integer if specified, but got ${args.batchesPerEpoch}`);\n  tfc.util.assert(\n  // tslint:disable-next-line:no-any\n  args['validationSplit'] == null, () => '`validationSplit` is not supported by `fitDataset()`. ' + 'Use validationData instead.');\n  if (model.isTraining) {\n    throw new Error('Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n  try {\n    const doValidation = args.validationData != null;\n    let valXs;\n    let valYs;\n    if (doValidation) {\n      if (isDatasetObject(args.validationData)) {\n        tfc.util.assert(args.validationBatches == null || args.validationBatches > 0 && Number.isInteger(args.validationBatches), () => `For fitDataset() with dataset-based validation, ` + `config.validationBatches is expected not to be provided, ` + `or to be a positive integer, ` + `but got ${args.validationBatches}`);\n      } else {\n        const validationData = standardizeTensorValidationData(args.validationData);\n        valXs = validationData.xs;\n        valYs = validationData.ys;\n      }\n    }\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames();\n    let callbackMetrics;\n    if (doValidation) {\n      callbackMetrics = outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      callbackMetrics = outLabels.slice();\n    }\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const verbose = args.verbose == null ? 1 : args.verbose;\n    const {\n      callbackList,\n      history\n    } = configureCallbacks(callbacks, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null,\n    // Batch size determined by the dataset itself.\n    doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n    let dataIterator = await dataset.iterator();\n    while (epoch < args.epochs) {\n      const epochLogs = {};\n      await callbackList.onEpochBegin(epoch);\n      let stepsDone = 0;\n      let batchIndex = 0;\n      if (!hasBatchesPerEpoch) {\n        dataIterator = await dataset.iterator();\n      }\n      while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n        const iteratorOut = await dataIterator.next();\n        // If `batchesPerEpoch` is specified, the dataset should not be\n        // exhausted until all epoches are done.\n        if (hasBatchesPerEpoch && iteratorOut.done) {\n          console.warn('You provided `batchesPerEpoch` as ' + `${args.batchesPerEpoch}, ` + 'but your dataset iterator ran out of data after ' + `${stepsDone} batches; ` + 'interrupting training. Make sure that your ' + 'dataset can generate at least `batchesPerEpoch * epochs` ' + 'batches (in this case, ' + `${args.batchesPerEpoch * args.epochs} batches). ` + 'You may need to use the repeat() function when building ' + 'your dataset.');\n          break;\n        }\n        if (iteratorOut.value != null) {\n          const {\n            xs,\n            ys\n          } = standardizeDataIteratorOutput(model, iteratorOut.value);\n          const batchLogs = {};\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = xs[0].shape[0];\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n          const sampleWeights = [];\n          if (args.classWeight != null) {\n            const standardClassWeights = standardizeClassWeights(args.classWeight, model.outputNames);\n            for (let i = 0; i < standardClassWeights.length; ++i) {\n              sampleWeights.push(await standardizeWeights(ys[i], null, standardClassWeights[i]));\n            }\n          }\n          // Train on batch.\n          const ins = xs.concat(ys).concat(sampleWeights);\n          const outs = trainFunction(ins);\n          tfc.dispose(ins);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n          }\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n          batchIndex++;\n          stepsDone++;\n        }\n        if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch : iteratorOut.done) {\n          // Epoch finished. Perform validation.\n          if (doValidation) {\n            let valOuts;\n            if (isDatasetObject(args.validationData)) {\n              valOuts = toList(await model.evaluateDataset(args.validationData, {\n                batches: args.validationBatches\n              }));\n            } else {\n              valOuts = toList(model.evaluate(valXs, valYs, {\n                batchSize: args.validationBatchSize == null ? DEFAULT_VALIDATION_BATCH_SIZE : args.validationBatchSize,\n                verbose: 0\n              }));\n            }\n            for (let i = 0; i < model.metricsNames.length; ++i) {\n              epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n            }\n          }\n          // Call `break` to exit one epoch lopp after validation is done. If\n          // config.batchesPerEpoch is specified, an epoch while loop will\n          // stop when `stepsDone >= config.batchesPerEpoch`. When\n          // config.batchesPerEpoch is not provided, the following `break` is\n          // required to exit the while lopp after dataset is exhausted.\n          break;\n        }\n        if (model.stopTraining_) {\n          break;\n        }\n      }\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      epoch++;\n      if (model.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n  } finally {\n    model.isTraining = false;\n  }\n}\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch(dataset, args) {\n  // Attempt to determine # of batches in an epoch.\n  let stepsPerEpoch = null;\n  if (args.batchesPerEpoch != null) {\n    stepsPerEpoch = args.batchesPerEpoch;\n  } else if (Number.isFinite(dataset.size)) {\n    stepsPerEpoch = dataset.size;\n  }\n  return stepsPerEpoch;\n}\n// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject(dataset) {\n  return typeof dataset.iterator === 'function';\n}\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject(iterator) {\n  return typeof iterator.next === 'function';\n}\nexport async function evaluateDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n  args = args || {};\n  const hasBatches = args.batches != null;\n  const f = model.testFunction;\n  let outs = [];\n  if (args.verbose > 0) {\n    throw new NotImplementedError('Verbose mode is not implemented yet.');\n  }\n  tfc.util.assert(!hasBatches || args.batches > 0 && Number.isInteger(args.batches), () => 'Test loop expects `batches` to be a positive integer, but ' + `received ${JSON.stringify(args.batches)}`);\n  const dataIterator = isLazyIteratorObject(dataset) ? dataset : await dataset.iterator();\n  // Keeps track of number of examples used in this evaluation.\n  let numExamples = 0;\n  let batch = 0;\n  while (hasBatches ? batch < args.batches : true) {\n    const iteratorOut = await dataIterator.next();\n    outs = tfc.tidy(() => {\n      if (iteratorOut.value) {\n        // TODO(cais): Once real dataset is available, use\n        //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n        const {\n          xs,\n          ys\n        } = standardizeDataIteratorOutput(model, iteratorOut.value);\n        const xsAndYs = xs.concat(ys);\n        const batchOuts = tfc.tidy(() => f(xsAndYs));\n        tfc.dispose(xsAndYs);\n        if (batch === 0) {\n          for (let i = 0; i < batchOuts.length; ++i) {\n            outs.push(scalar(0));\n          }\n        }\n        const batchSize = xsAndYs[0].shape[0];\n        for (let i = 0; i < batchOuts.length; ++i) {\n          const batchOut = batchOuts[i];\n          const oldScalar = outs[i];\n          outs[i] = tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n          if (batch > 0) {\n            tfc.dispose(oldScalar);\n          }\n        }\n        tfc.dispose(batchOuts);\n        numExamples += batchSize;\n        ++batch;\n      }\n      return outs;\n    });\n    if (iteratorOut.done) {\n      if (hasBatches) {\n        console.warn('Your dataset iterator ran out of data during evaluateDataset(). ' + 'Interrupting evalution. Make sure that your ' + 'dataset can generate at least `batches` ' + `batches (in this case, ${args.batches} batches). ` + 'You may need to use the repeat() function when building ' + 'your dataset.');\n      }\n      break;\n    }\n  }\n  for (let i = 0; i < outs.length; ++i) {\n    const oldScalar = outs[i];\n    outs[i] = tfc.div(outs[i], numExamples);\n    tfc.dispose(oldScalar);\n  }\n  return singletonOrArray(outs);\n}","map":{"version":3,"names":["tfc","scalar","configureCallbacks","standardizeCallbacks","NotImplementedError","ValueError","disposeTensorsInLogs","singletonOrArray","toList","standardizeClassWeights","standardizeWeights","DEFAULT_VALIDATION_BATCH_SIZE","standardizeDataIteratorOutput","model","iteratorOut","xs","ys","iteratorOutObj","util","assert","flattenedXs","flattenTensorOrArrayOrMap","inputNames","flattenedYs","outputNames","batchSize","shape","length","inputs","JSON","stringify","outputs","xIndex","yIndex","inputOrOutput","names","values","Tensor","Array","isArray","result","name","push","standardizeTensorValidationData","data","fitDataset","dataset","args","hasBatchesPerEpoch","batchesPerEpoch","optimizer","epochs","Number","isInteger","isTraining","Error","doValidation","validationData","valXs","valYs","isDatasetObject","validationBatches","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","callbackMetrics","slice","concat","map","n","callbacks","yieldEvery","verbose","callbackList","history","getStepsPerEpoch","setModel","onTrainBegin","stopTraining_","epoch","initialEpoch","dataIterator","iterator","epochLogs","onEpochBegin","stepsDone","batchIndex","next","done","console","warn","value","batchLogs","onBatchBegin","sampleWeights","classWeight","standardClassWeights","i","ins","outs","dispose","label","out","keep","onBatchEnd","valOuts","evaluateDataset","batches","evaluate","validationBatchSize","metricsNames","onEpochEnd","onTrainEnd","syncData","stepsPerEpoch","isFinite","size","isLazyIteratorObject","hasBatches","f","testFunction","numExamples","batch","tidy","xsAndYs","batchOuts","batchOut","oldScalar","add","mul","div"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/engine/training_dataset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {TensorOrArrayOrMap} from '../types';\nimport {singletonOrArray, toList} from '../utils/generic_utils';\n\nimport {Dataset, LazyIterator} from './dataset_stub';\nimport {ClassWeight, ClassWeightMap, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Interface for configuring model training based on a dataset object.\n */\nexport interface ModelFitDatasetArgs<T> {\n  /**\n   * (Optional) Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. It should\n   * typically be equal to the number of samples of your dataset divided by\n   * the batch size, so that `fitDataset`() call can utilize the entire dataset.\n   * If it is not provided, use `done` return value in `iterator.next()` as\n   * signal to finish an epoch.\n   */\n  batchesPerEpoch?: number;\n\n  /**\n   * Integer number of times to iterate over the training dataset.\n   */\n  epochs: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be any of the following:\n   *\n   *   - An array `[xVal, yVal]`, where the two values may be `tf.Tensor`,\n   *     an array of Tensors, or a map of string to Tensor.\n   *   - Similarly, an array ` [xVal, yVal, valSampleWeights]`\n   *     (not implemented yet).\n   *   - a `Dataset` object with elements of the form `{xs: xVal, ys: yVal}`,\n   *     where `xs` and `ys` are the feature and label tensors, respectively.\n   *\n   * If `validationData` is an Array of Tensor objects, each `tf.Tensor` will be\n   * sliced into batches during validation, using the parameter\n   * `validationBatchSize` (which defaults to 32). The entirety of the\n   * `tf.Tensor` objects will be used in the validation.\n   *\n   * If `validationData` is a dataset object, and the `validationBatches`\n   * parameter is specified, the validation will use `validationBatches` batches\n   * drawn from the dataset object. If `validationBatches` parameter is not\n   * specified, the validation will stop when the dataset is exhausted.\n   *\n   * The model will not be trained on this data.\n   */\n  validationData?: [\n    TensorOrArrayOrMap, TensorOrArrayOrMap\n  ]|[TensorOrArrayOrMap, TensorOrArrayOrMap, TensorOrArrayOrMap]|Dataset<T>;\n\n  /**\n   * Optional batch size for validation.\n   *\n   * Used only if `validationData` is an array of `tf.Tensor` objects, i.e., not\n   * a dataset object.\n   *\n   * If not specified, its value defaults to 32.\n   */\n  validationBatchSize?: number;\n\n  /**\n   * (Optional) Only relevant if `validationData` is specified and is a dataset\n   * object.\n   *\n   * Total number of batches of samples to draw from `validationData` for\n   * validation purpose before stopping at the end of every epoch. If not\n   * specified, `evaluateDataset` will use `iterator.next().done` as signal to\n   * stop validation.\n   */\n  validationBatches?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - a `number`: Will yield every `number` milliseconds.\n   *   - `'never'`: never yield. (But yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run). When this is used, `epochs` is the index of the \"final epoch\".\n   * The model is not trained for a number of iterations given by `epochs`,\n   * but merely until the epoch of index `epochs` is reached.\n   */\n  initialEpoch?: number;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or an object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n}\n\nexport interface FitDatasetElement {\n  xs: TensorOrArrayOrMap;\n  ys: TensorOrArrayOrMap;\n}\n\n/**\n * Interface for configuring model evaluation based on a dataset object.\n */\nexport interface ModelEvaluateDatasetArgs {\n  /**\n   * Number of batches to draw from the dataset object before ending the\n   * evaluation.\n   */\n  batches?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n}\n\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, iteratorOut: {}): {xs: tfc.Tensor[], ys: tfc.Tensor[]} {\n  let xs: TensorOrArrayOrMap;\n  let ys: TensorOrArrayOrMap;\n\n  const iteratorOutObj = iteratorOut as FitDatasetElement;\n  xs = iteratorOutObj['xs'];\n  ys = iteratorOutObj['ys'];\n  tfc.util.assert(\n      xs != null && ys != null,\n      () => 'A Dataset iterator for fitDataset() is expected to generate ' +\n          'objects of the form `{xs: xVal, ys: yVal}`, where the two ' +\n          'values may be `tf.Tensor`, an array of Tensors, or a map of ' +\n          'string to Tensor.  The provided Dataset instead generates ' +\n          `${iteratorOut}`);\n\n  const flattenedXs: tfc.Tensor[] =\n      flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n  const flattenedYs: tfc.Tensor[] =\n      flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n\n  const batchSize: number = flattenedXs[0].shape[0];\n\n  tfc.util.assert(\n      flattenedXs.length === model.inputs.length,\n      () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` +\n          `provides ${flattenedXs.length} inputs.  (Expected input keys: ` +\n          `${JSON.stringify(model.inputNames)})`);\n\n  tfc.util.assert(\n      flattenedYs.length === model.outputs.length,\n      () =>\n          `LayersModel has ${model.outputs.length} outputs, but the dataset ` +\n          `provides ${flattenedYs.length} outputs.  (Expected output keys: ` +\n          `${JSON.stringify(model.outputNames)})`);\n\n  for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n    tfc.util.assert(\n        flattenedXs[xIndex].shape[0] === batchSize,\n        () => `Batch size mismatch: input ` +\n            `${model.inputNames[xIndex]} has ${\n                  flattenedXs[xIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n\n  for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n    tfc.util.assert(\n        flattenedYs[yIndex].shape[0] === batchSize,\n        () => `Batch size mismatch: output ` +\n            `${model.outputNames[yIndex]} has ${\n                  flattenedYs[yIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n  }\n\n  return {xs: flattenedXs, ys: flattenedYs};\n}\n\nfunction flattenTensorOrArrayOrMap(\n    inputOrOutput: string, names: string[], values: TensorOrArrayOrMap) {\n  if (values instanceof tfc.Tensor) {\n    return [values];\n  } else if (Array.isArray(values)) {\n    tfc.util.assert(\n        values.length === names.length,\n        () => `Received an array of ${values.length} Tensors, but expected ${\n            names.length} to match the ${inputOrOutput} keys ${names}.`);\n    return values;\n  } else {\n    const result: tfc.Tensor[] = [];\n    // Check that all the required keys are available.\n    for (const name of names) {\n      if (values[name] == null) {\n        throw new ValueError(\n            `The feature data generated by the dataset lacks the required ` +\n            `${inputOrOutput} key '${name}'.`);\n      }\n      result.push(values[name]);\n    }\n    return result;\n  }\n}\n\nfunction standardizeTensorValidationData<T>(\n    data:\n        [\n          tfc.Tensor|tfc.Tensor[], tfc.Tensor|tfc.Tensor[]\n        ]|[tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n           tfc.Tensor | tfc.Tensor[]]):\n    {xs: tfc.Tensor|tfc.Tensor[], ys: tfc.Tensor|tfc.Tensor[]} {\n  if (data.length === 3) {\n    throw new NotImplementedError(\n        'Validation with sample weights is not implemented yet.');\n  }\n  return {xs: data[0], ys: data[1]};\n}\n\nexport async function fitDataset<T>(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>,\n    args: ModelFitDatasetArgs<T>): Promise<History> {\n  const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n  tfc.util.assert(\n      model.optimizer != null,\n      () => 'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileConfig).');\n\n  tfc.util.assert(\n      args != null,\n      () => `For fitDataset(), the 2nd argument (config) is required, ` +\n          `but it is not provided in this call.`);\n  tfc.util.assert(\n      args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs),\n      () => `For fitDataset(), config.epochs is expected to be a positive ` +\n          `integer, but got ${args.epochs}`);\n  tfc.util.assert(\n      !hasBatchesPerEpoch ||\n          (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)),\n      () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n          `positive integer if specified, but got ${args.batchesPerEpoch}`);\n  tfc.util.assert(\n      // tslint:disable-next-line:no-any\n      (args as any)['validationSplit'] == null,\n      () => '`validationSplit` is not supported by `fitDataset()`. ' +\n          'Use validationData instead.');\n\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n\n  try {\n    const doValidation = args.validationData != null;\n    let valXs: tfc.Tensor|tfc.Tensor[];\n    let valYs: tfc.Tensor|tfc.Tensor[];\n    if (doValidation) {\n      if (isDatasetObject(args.validationData)) {\n        tfc.util.assert(\n            args.validationBatches == null ||\n                (args.validationBatches > 0 &&\n                 Number.isInteger(args.validationBatches)),\n            () => `For fitDataset() with dataset-based validation, ` +\n                `config.validationBatches is expected not to be provided, ` +\n                `or to be a positive integer, ` +\n                `but got ${args.validationBatches}`);\n      } else {\n        const validationData = standardizeTensorValidationData(\n            args.validationData as\n                    [tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[]] |\n            [\n              tfc.Tensor | tfc.Tensor[], tfc.Tensor | tfc.Tensor[],\n              tfc.Tensor | tfc.Tensor[]\n            ]);\n        valXs = validationData.xs;\n        valYs = validationData.ys;\n      }\n    }\n\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let callbackMetrics: string[];\n    if (doValidation) {\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const verbose = args.verbose == null ? 1 : args.verbose;\n    const {callbackList, history} = configureCallbacks(\n        callbacks, verbose, args.epochs, null, null,\n        getStepsPerEpoch(dataset, args),\n        null,  // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n    callbackList.setModel(model);\n    model.history = history;\n\n    await callbackList.onTrainBegin();\n    model.stopTraining_ = false;\n    let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n\n    let dataIterator = await dataset.iterator();\n    while (epoch < args.epochs) {\n      const epochLogs: UnresolvedLogs = {};\n      await callbackList.onEpochBegin(epoch);\n      let stepsDone = 0;\n      let batchIndex = 0;\n      if (!hasBatchesPerEpoch) {\n        dataIterator = await dataset.iterator();\n      }\n      while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n        const iteratorOut = await dataIterator.next();\n\n        // If `batchesPerEpoch` is specified, the dataset should not be\n        // exhausted until all epoches are done.\n        if (hasBatchesPerEpoch && iteratorOut.done) {\n          console.warn(\n              'You provided `batchesPerEpoch` as ' +\n              `${args.batchesPerEpoch}, ` +\n              'but your dataset iterator ran out of data after ' +\n              `${stepsDone} batches; ` +\n              'interrupting training. Make sure that your ' +\n              'dataset can generate at least `batchesPerEpoch * epochs` ' +\n              'batches (in this case, ' +\n              `${args.batchesPerEpoch * args.epochs} batches). ` +\n              'You may need to use the repeat() function when building ' +\n              'your dataset.');\n          break;\n        }\n\n        if (iteratorOut.value != null) {\n          const {xs, ys} =\n              standardizeDataIteratorOutput(model, iteratorOut.value);\n          const batchLogs: UnresolvedLogs = {};\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = xs[0].shape[0];\n\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n          const sampleWeights: tfc.Tensor[] = [];\n          if (args.classWeight != null) {\n            const standardClassWeights =\n                standardizeClassWeights(args.classWeight, model.outputNames);\n            for (let i = 0; i < standardClassWeights.length; ++i) {\n              sampleWeights.push(await standardizeWeights(\n                  ys[i], null, standardClassWeights[i]));\n            }\n          }\n\n          // Train on batch.\n          const ins = xs.concat(ys).concat(sampleWeights);\n          const outs = trainFunction(ins);\n          tfc.dispose(ins);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n          }\n\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n\n          batchIndex++;\n          stepsDone++;\n        }\n\n        if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                                 iteratorOut.done) {\n          // Epoch finished. Perform validation.\n          if (doValidation) {\n            let valOuts: tfc.Scalar[];\n            if (isDatasetObject(args.validationData)) {\n              valOuts = toList(await model.evaluateDataset(\n                  args.validationData, {batches: args.validationBatches}));\n            } else {\n              valOuts = toList(model.evaluate(valXs, valYs, {\n                batchSize: args.validationBatchSize == null ?\n                    DEFAULT_VALIDATION_BATCH_SIZE :\n                    args.validationBatchSize,\n                verbose: 0\n              }));\n            }\n            for (let i = 0; i < model.metricsNames.length; ++i) {\n              epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n            }\n          }\n          // Call `break` to exit one epoch lopp after validation is done. If\n          // config.batchesPerEpoch is specified, an epoch while loop will\n          // stop when `stepsDone >= config.batchesPerEpoch`. When\n          // config.batchesPerEpoch is not provided, the following `break` is\n          // required to exit the while lopp after dataset is exhausted.\n          break;\n        }\n\n        if (model.stopTraining_) {\n          break;\n        }\n      }\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      epoch++;\n      if (model.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n    await model.history.syncData();\n    return model.history;\n  } finally {\n    model.isTraining = false;\n  }\n}\n\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch<T>(\n    dataset: Dataset<T>, args: ModelFitDatasetArgs<T>): number {\n  // Attempt to determine # of batches in an epoch.\n  let stepsPerEpoch: number = null;\n  if (args.batchesPerEpoch != null) {\n    stepsPerEpoch = args.batchesPerEpoch;\n  } else if (Number.isFinite(dataset.size)) {\n    stepsPerEpoch = dataset.size;\n  }\n  return stepsPerEpoch;\n}\n\n// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject<T>(\n    dataset:\n        [\n          TensorOrArrayOrMap, TensorOrArrayOrMap\n        ]|[TensorOrArrayOrMap, TensorOrArrayOrMap, TensorOrArrayOrMap]|\n    Dataset<T>): boolean {\n  return (typeof (dataset as Dataset<T>).iterator === 'function');\n}\n\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject<T>(iterator: Dataset<T>|\n                                 LazyIterator<T>): boolean {\n  return (typeof (iterator as LazyIterator<T>).next === 'function');\n}\n\nexport async function evaluateDataset<T>(\n    // Type `model` as `any` here to avoid circular dependency w/\n    // training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, dataset: Dataset<T>|LazyIterator<T>,\n    args: ModelEvaluateDatasetArgs): Promise<tfc.Scalar|tfc.Scalar[]> {\n  args = args || {};\n  const hasBatches = args.batches != null;\n  const f = model.testFunction;\n  let outs: tfc.Scalar[] = [];\n  if (args.verbose > 0) {\n    throw new NotImplementedError('Verbose mode is not implemented yet.');\n  }\n\n  tfc.util.assert(\n      !hasBatches || (args.batches > 0 && Number.isInteger(args.batches)),\n      () => 'Test loop expects `batches` to be a positive integer, but ' +\n          `received ${JSON.stringify(args.batches)}`);\n  const dataIterator = isLazyIteratorObject(dataset) ?\n      dataset as LazyIterator<T>:\n      await (dataset as Dataset<T>).iterator();\n  // Keeps track of number of examples used in this evaluation.\n  let numExamples = 0;\n  let batch = 0;\n\n  while (hasBatches ? batch < args.batches : true) {\n    const iteratorOut = await dataIterator.next();\n    outs = tfc.tidy(() => {\n      if (iteratorOut.value) {\n        // TODO(cais): Once real dataset is available, use\n        //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n        const {xs, ys} =\n            standardizeDataIteratorOutput(model, iteratorOut.value);\n        const xsAndYs = xs.concat(ys);\n        const batchOuts = tfc.tidy(() => f(xsAndYs));\n        tfc.dispose(xsAndYs);\n\n        if (batch === 0) {\n          for (let i = 0; i < batchOuts.length; ++i) {\n            outs.push(scalar(0));\n          }\n        }\n\n        const batchSize = xsAndYs[0].shape[0];\n        for (let i = 0; i < batchOuts.length; ++i) {\n          const batchOut = batchOuts[i];\n          const oldScalar = outs[i];\n          outs[i] =\n              tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n          if (batch > 0) {\n            tfc.dispose(oldScalar);\n          }\n        }\n        tfc.dispose(batchOuts);\n        numExamples += batchSize;\n\n        ++batch;\n      }\n      return outs;\n    });\n\n    if (iteratorOut.done) {\n      if (hasBatches) {\n        console.warn(\n            'Your dataset iterator ran out of data during evaluateDataset(). ' +\n            'Interrupting evalution. Make sure that your ' +\n            'dataset can generate at least `batches` ' +\n            `batches (in this case, ${args.batches} batches). ` +\n            'You may need to use the repeat() function when building ' +\n            'your dataset.');\n      }\n      break;\n    }\n  }\n\n  for (let i = 0; i < outs.length; ++i) {\n    const oldScalar = outs[i];\n    outs[i] = tfc.div(outs[i], numExamples);\n    tfc.dispose(oldScalar);\n  }\n\n  return singletonOrArray(outs);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}