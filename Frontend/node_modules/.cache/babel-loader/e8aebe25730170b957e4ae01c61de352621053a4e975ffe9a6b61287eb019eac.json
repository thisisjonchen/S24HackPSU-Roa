{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n  const $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n  const $input = convertToTensor(input, 'input', 'maxPoolGrad');\n  const $output = convertToTensor(output, 'output', 'maxPoolGrad');\n  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` + `(${$dy.rank})`);\n  util.assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` + `${$dy.rank}.`);\n  util.assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ` + `${$input.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('maxPoolGrad', pad, dimRoundingMode);\n  const inputs = {\n    dy: $dy,\n    input: $input,\n    output: $output\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(MaxPoolGrad, inputs, attrs);\n}\nexport const maxPoolGrad = /* @__PURE__ */op({\n  maxPoolGrad_\n});","map":{"version":3,"names":["ENGINE","MaxPoolGrad","convertToTensor","util","conv_util","op","maxPoolGrad_","dy","input","output","filterSize","strides","pad","dimRoundingMode","$dy","$input","$output","assert","rank","checkPadOnDimRoundingMode","inputs","attrs","runKernel","maxPoolGrad"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/max_pool_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPoolGrad_(\n    dy: Tensor4D|TensorLike, input: Tensor4D|TensorLike,\n    output: Tensor4D|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  const $dy = convertToTensor(dy, 'dy', 'maxPoolGrad');\n  const $input = convertToTensor(input, 'input', 'maxPoolGrad');\n  const $output = convertToTensor(output, 'output', 'maxPoolGrad');\n\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy ` +\n          `(${$dy.rank})`);\n\n  util.assert(\n      $dy.rank === 4,\n      () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` +\n          `${$dy.rank}.`);\n  util.assert(\n      $input.rank === 4,\n      () => `Error in maxPoolGrad: input must be rank 4 but got rank ` +\n          `${$input.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('maxPoolGrad', pad, dimRoundingMode);\n  const inputs: MaxPoolGradInputs = {dy: $dy, input: $input, output: $output};\n  const attrs: MaxPoolGradAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             MaxPoolGrad, inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as Tensor4D;\n}\n\nexport const maxPoolGrad = /* @__PURE__ */ op({maxPoolGrad_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,WAAW,QAA4C,iBAAiB;AAIhF,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,OAAO,KAAKC,SAAS,MAAM,aAAa;AACxC,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,YAAYA,CACjBC,EAAuB,EAAEC,KAA0B,EACnDC,MAA2B,EAAEC,UAAmC,EAChEC,OAAgC,EAChCC,GAAoD,EACpDC,eAAwC;EAC1C,MAAMC,GAAG,GAAGZ,eAAe,CAACK,EAAE,EAAE,IAAI,EAAE,aAAa,CAAC;EACpD,MAAMQ,MAAM,GAAGb,eAAe,CAACM,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC;EAC7D,MAAMQ,OAAO,GAAGd,eAAe,CAACO,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC;EAEhEN,IAAI,CAACc,MAAM,CACPF,MAAM,CAACG,IAAI,KAAKJ,GAAG,CAACI,IAAI,EACxB,MAAM,kBAAkBH,MAAM,CAACG,IAAI,8BAA8B,GAC7D,IAAIJ,GAAG,CAACI,IAAI,GAAG,CAAC;EAExBf,IAAI,CAACc,MAAM,CACPH,GAAG,CAACI,IAAI,KAAK,CAAC,EACd,MAAM,uDAAuD,GACzD,GAAGJ,GAAG,CAACI,IAAI,GAAG,CAAC;EACvBf,IAAI,CAACc,MAAM,CACPF,MAAM,CAACG,IAAI,KAAK,CAAC,EACjB,MAAM,0DAA0D,GAC5D,GAAGH,MAAM,CAACG,IAAI,GAAG,CAAC;EAC1Bd,SAAS,CAACe,yBAAyB,CAAC,aAAa,EAAEP,GAAG,EAAEC,eAAe,CAAC;EACxE,MAAMO,MAAM,GAAsB;IAACb,EAAE,EAAEO,GAAG;IAAEN,KAAK,EAAEO,MAAM;IAAEN,MAAM,EAAEO;EAAO,CAAC;EAC3E,MAAMK,KAAK,GAAqB;IAACX,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC;EAE3E;EACA,OAAOb,MAAM,CAACsB,SAAS,CACZrB,WAAW,EAAEmB,MAAmC,EAChDC,KAAgC,CAAa;AAC1D;AAEA,OAAO,MAAME,WAAW,GAAG,eAAgBlB,EAAE,CAAC;EAACC;AAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}