{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = params;\n  const {\n    x\n  } = inputs;\n  const {\n    reps\n  } = attrs;\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ? data.map(d => util.decodeString(d)) : data;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile\n};","map":{"version":3,"names":["buffer","Tile","util","tileImplCPU","TileProgram","tile","params","inputs","backend","attrs","x","reps","dtype","shape","length","data","readSync","dataId","value","map","d","decodeString","buf","outBuf","makeTensorInfo","values","program","output","runWebGLProgram","tileConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Tile.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,EAAwCC,IAAI,EAAqCC,IAAI,QAAO,uBAAuB;AAGjI,SAAQC,WAAW,QAAO,wBAAwB;AAClD,SAAQC,WAAW,QAAO,aAAa;AAEvC,OAAM,SAAUC,IAAIA,CAChBC,MAAyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,MAAM;EACvC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EAEpB;EACA,IAAIC,CAAC,CAACE,KAAK,KAAK,QAAQ,IAAIF,CAAC,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IAC9C;IACA;IACA,MAAMC,IAAI,GAAGP,OAAO,CAACQ,QAAQ,CAACN,CAAC,CAACO,MAAM,CAAC;IACvC,MAAMC,KAAK,GAAGR,CAAC,CAACE,KAAK,KAAK,QAAQ,GAC7BG,IAAqB,CAACI,GAAG,CAACC,CAAC,IAAIlB,IAAI,CAACmB,YAAY,CAACD,CAAC,CAAC,CAAC,GACrDL,IAAkB;IACtB,MAAMO,GAAG,GAAGtB,MAAM,CAACU,CAAC,CAACG,KAAK,EAAEH,CAAC,CAACE,KAAK,EAAEM,KAAK,CAAC;IAC3C,MAAMK,MAAM,GAAGpB,WAAW,CAACmB,GAAG,EAAEX,IAAI,CAAC;IACrC,OAAOH,OAAO,CAACgB,cAAc,CAACD,MAAM,CAACV,KAAK,EAAEU,MAAM,CAACX,KAAK,EAAEW,MAAM,CAACE,MAAM,CAAC;;EAG1E,MAAMC,OAAO,GAAG,IAAItB,WAAW,CAACM,CAAC,CAACG,KAAK,EAAEF,IAAI,CAAC;EAC9C,MAAMgB,MAAM,GAAGnB,OAAO,CAACoB,eAAe,CAACF,OAAO,EAAE,CAAChB,CAAC,CAAC,EAAEA,CAAC,CAACE,KAAK,CAAC;EAE7D,OAAOe,MAAM;AACf;AAEA,OAAO,MAAME,UAAU,GAAiB;EACtCC,UAAU,EAAE7B,IAAI;EAChB8B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}