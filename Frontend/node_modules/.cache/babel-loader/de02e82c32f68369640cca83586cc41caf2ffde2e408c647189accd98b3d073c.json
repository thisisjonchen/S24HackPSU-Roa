{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n  constructor() {\n    this.managers = {};\n  }\n  static getInstance() {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme, manager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n  static getManager(scheme) {\n    const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n  static getSchemes() {\n    return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n  }\n}\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n  assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n  assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);\n  assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n  const modelArtifacts = await loadHandler.load();\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n  const saveResult = await saveHandler.save(modelArtifacts);\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n  return saveResult.modelArtifactsInfo;\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels() {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out = {};\n  for (const scheme of schemes) {\n    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n/**\n * Remove a model specified by URL from a registered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url) {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(sourceURL, destURL) {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(sourceURL, destURL) {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nexport { moveModel, copyModel, removeModel, listModels };","map":{"version":3,"names":["assert","IORouterRegistry","URL_SCHEME_SUFFIX","ModelStoreManagerRegistry","constructor","managers","getInstance","instance","registerManager","scheme","manager","endsWith","slice","indexOf","length","registry","getManager","Error","getSchemes","Object","keys","parseURL","url","join","split","path","cloneModelInternal","sourceURL","destURL","deleteSource","loadHandlers","getLoadHandlers","loadHandler","saveHandlers","getSaveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","modelArtifacts","load","removeModel","saveResult","save","modelArtifactsInfo","listModels","schemes","out","schemeOut","schemeAndPath","copyModel","moveModel"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/io/model_management.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a registered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}