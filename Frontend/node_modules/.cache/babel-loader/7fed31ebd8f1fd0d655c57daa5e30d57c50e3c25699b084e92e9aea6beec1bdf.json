{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram {\n  constructor(op, aShape, bShape) {\n    this.variableNames = ['A', 'B'];\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}","map":{"version":3,"names":["backend_util","useShapeUniforms","CHECK_NAN_SNIPPET","SQUARED_DIFFERENCE","BinaryOpProgram","constructor","op","aShape","bShape","variableNames","outputShape","assertAndGetBroadcastShape","enableShapeUniforms","length","userCode"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/binaryop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAAO,uBAAuB;AAElD,SAAsBC,gBAAgB,QAAO,cAAc;AAE3D,OAAO,MAAMC,iBAAiB,GAAG;;;CAGhC;AAED,OAAO,MAAMC,kBAAkB,GAAG,2BAA2B;AAC7D,OAAM,MAAOC,eAAe;EAM1BC,YAAYC,EAAU,EAAEC,MAAgB,EAAEC,MAAgB;IAL1D,KAAAC,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IAMxB,IAAI,CAACC,WAAW,GAAGV,YAAY,CAACW,0BAA0B,CAACJ,MAAM,EAAEC,MAAM,CAAC;IAC1E,IAAI,CAACI,mBAAmB,GAAGX,gBAAgB,CAAC,IAAI,CAACS,WAAW,CAACG,MAAM,CAAC;IACpE,IAAI,CAACC,QAAQ,GAAG;;UAEVR,EAAE;;;;;;;;KAQP;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}