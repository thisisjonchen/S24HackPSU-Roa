{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * deeplearn.js backend.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { onesLike as coreOnesLike, scalar, tensor1d, tidy, where, zerosLike as coreZerosLike } from '@tensorflow/tfjs-core';\nimport { checkDataFormat } from '../common';\nimport { NotImplementedError, ValueError } from '../errors';\nimport * as math_utils from '../utils/math_utils';\nimport { imageDataFormat } from './common';\n// tslint:enable\n/* Setting and getting backend from deeplearn.js. */\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend = 'webgl';\nexport function setBackend(requestedBackend) {\n  tfc.setBackend(requestedBackend);\n  backend = requestedBackend;\n}\nexport function getBackend() {\n  return backend;\n}\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic() {\n  return false;\n}\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x) {\n  const shape = x.shape;\n  if (shape.length > 0) {\n    return shape.reduce((a, b) => a * b);\n  } else {\n    // Scalar.\n    return 1;\n  }\n}\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x, dtype) {\n  return tfc.cast(x, dtype);\n}\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x, axis = -1) {\n  const outShape = x.shape.slice();\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n  outShape.splice(axis, 0, 1);\n  return tfc.reshape(x, outShape);\n}\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x, n) {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(`repeat() expects a rank-2 tensor, but received a ` + `rank-${x.shape.length} tensor.`);\n    }\n    const y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n  });\n}\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x) {\n  const newShape = [math_utils.arrayProd(x.shape)];\n  return tfc.reshape(x, newShape);\n}\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x) {\n  if (x.rank <= 1) {\n    throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n  const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n  return tfc.reshape(x, newShape);\n}\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(array, start, size) {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array, start, size);\n      case 2:\n        return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n      case 3:\n        return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n      case 4:\n        return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n      case 5:\n        return tfc.slice(array, [start, 0, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]]);\n      case 6:\n        return tfc.slice(array, [start, 0, 0, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3], array.shape[4], array.shape[5]]);\n      default:\n        throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` + `${array.rank}`);\n    }\n  });\n}\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(array, start, size) {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array, start, size);\n      case 2:\n        return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n      case 3:\n        return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n      case 4:\n        return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n      default:\n        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);\n    }\n  });\n}\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(array, start, size, axis) {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array, start, size);\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);\n        }\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);\n          case 3:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);\n        }\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);\n          case 3:\n            return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);\n          case 4:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);\n        }\n      default:\n        throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);\n    }\n  });\n}\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors, axis = -1) {\n  let rank;\n  if (axis < 0) {\n    rank = tensors[0].rank;\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n  if (axis === tensors[0].rank) {\n    // Porting Note: This is necessary because tfc.concat() requires axis to be\n    //   in the interval [-rank, rank).\n    axis = -1;\n  }\n  // Porting Note: Sparse concat is not supported yet.\n  return tfc.concat(tensors, axis);\n}\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a, b) {\n  switch (a.rank) {\n    case 1:\n      return tfc.concat1d([a, b]);\n    case 2:\n      return tfc.concat2d([a, b], 0);\n    case 3:\n      return tfc.concat3d([a, b], 0);\n    case 4:\n      return tfc.concat4d([a, b], 0);\n    default:\n      throw new ValueError(`concatAlongFirstAxis() received an unsupported ` + `tensor rank: ${a.rank}`);\n  }\n}\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x, n) {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n  if (x.rank !== n.length) {\n    throw new ValueError(`The length of input n (${n.length}) does not match ` + `the number of dimensions in input x (${x.rank})`);\n  }\n  return tfc.tile(x, n);\n}\n/* Creation of random tensors. */\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {\n  return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n/* Linear Algebra */\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(a, b, activation, bias) {\n  if (a.rank < 2 || b.rank < 2) {\n    throw new NotImplementedError(`dot requires both inputs to be rank >= 2` + ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n  }\n  if (b.rank >= 3) {\n    const xLastDim = a.shape.slice(-1)[0];\n    const ySecondLastDim = b.shape.slice(-2)[0];\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(`If rank y >= 3, then the second last dim` + ` of y must equal the last dim of x but got x shape = ${a.shape} and ` + ` y shape = ${b.shape}`);\n    }\n  }\n  // Handle basic 2D x 2D case.\n  if (a.rank === 2 && b.rank === 2) {\n    const transposeA = false;\n    const transposeB = false;\n    // tfc.fused.matMul only fuses certain activation functions. Unsupported\n    // activation functions are treated as 'linear' activations, which is\n    // equivalent to a no-op.\n    return tfc.fused.matMul({\n      a,\n      b: b,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    });\n  } else {\n    // Reshape x into the analogous 2D Tensor.\n    const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.\n    const aLastDim = aFirstDims.pop();\n    a = tfc.reshape(a, [-1, aLastDim]);\n    // Reshape y into the analogous 2D Tensor, and keep track of the\n    // required dimensions to reproduce the output shape.\n    const bShape = b.shape.slice();\n    const bLastDim = bShape.pop();\n    const ySecondLastDim = bShape.pop();\n    const yOtherDims = [...bShape, bLastDim];\n    // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n    // where r is the rank of y.\n    const perm = Array.from({\n      length: b.rank\n    }, (_, i) => {\n      if (i === 0) {\n        return b.rank - 2;\n      } else if (i <= b.rank - 2) {\n        return i - 1;\n      }\n      return i;\n    });\n    b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]);\n    // Multiply x and y as 2D Tensors, and then reshape back to original.\n    const outputShape = [...aFirstDims, ...yOtherDims];\n    const transposeA = false;\n    const transposeB = false;\n    return tfc.reshape(tfc.fused.matMul({\n      a,\n      b,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    }), outputShape);\n  }\n}\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x) {\n  // TODO(cais): Move to the core.\n  return tidy(() => {\n    const zerosLikeX = coreZerosLike(x);\n    const onesLikeX = coreOnesLike(x);\n    return where(tfc.equal(x, zerosLikeX), zerosLikeX, where(tfc.greater(x, coreZerosLike(x)), onesLikeX, tfc.mul(-1, onesLikeX)));\n  });\n}\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices, numClasses) {\n  return tidy(() => {\n    if (indices.rank !== 1) {\n      throw new Error('Only 1D one-hot tensors are supported in the ' + 'deeplearn backend, at present.');\n    }\n    indices = tfc.cast(indices, 'int32');\n    return tfc.cast(tfc.oneHot(indices, numClasses), 'float32');\n  });\n}\n/* Elementary math functions. */\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(reference, indices, axis) {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, 'int32');\n    } else {\n      indices = tfc.cast(indices, 'int32');\n    }\n    return tfc.gather(reference, indices, axis);\n  });\n}\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x) {\n  return tfc.mul(x, x);\n}\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x, a) {\n  return tidy(() => {\n    if (typeof a === 'number') {\n      a = scalar(Math.round(a), 'int32');\n    }\n    if (a.dtype !== 'int32') {\n      throw new NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n    }\n    return tfc.pow(x, a);\n  });\n}\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank, bias, dataFormat) {\n  const biasShape = bias.shape;\n  if (bias.rank !== 1 && bias.rank !== xRank) {\n    throw new ValueError(`Unexpected bias dimensions: ${bias.rank}` + `; expected it to be 1 or ${xRank}`);\n  }\n  if (xRank === 5) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 4) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 3) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank < 3) {\n    return bias;\n  }\n  throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n/* Neural-network operations. */\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(x, bias, dataFormat) {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n  });\n}\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x, alpha = 1) {\n  // TODO(cais): Add support for alpha values other than 1.\n  if (alpha !== 1) {\n    throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` + `yet.`);\n  }\n  return tfc.elu(x);\n}\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x) {\n  return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(x, level, noiseShape, seed) {\n  return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x) {\n  return tidy(() => {\n    const y = tfc.add(.5, tfc.mul(.2, x));\n    return tfc.clipByValue(y, 0, 1);\n  });\n}\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase(x, alt, training = false) {\n  return training ? x() : alt();\n}","map":{"version":3,"names":["tfc","onesLike","coreOnesLike","scalar","tensor1d","tidy","where","zerosLike","coreZerosLike","checkDataFormat","NotImplementedError","ValueError","math_utils","imageDataFormat","backend","setBackend","requestedBackend","getBackend","isBackendSymbolic","countParams","x","shape","length","reduce","a","b","cast","dtype","expandDims","axis","outShape","slice","splice","reshape","repeat","n","y","tile","flatten","newShape","arrayProd","batchFlatten","rank","sliceAlongFirstAxis","array","start","size","slice1d","slice2d","slice3d","slice4d","sliceAlongLastAxis","sliceAlongAxis","concatenate","tensors","concat","concatAlongFirstAxis","concat1d","concat2d","concat3d","concat4d","Array","isArray","randomNormal","mean","stddev","seed","dot","activation","bias","xLastDim","ySecondLastDim","transposeA","transposeB","fused","matMul","reshapeBias","aFirstDims","aLastDim","pop","bShape","bLastDim","yOtherDims","perm","from","_","i","transpose","outputShape","sign","zerosLikeX","onesLikeX","equal","greater","mul","oneHot","indices","numClasses","Error","gather","reference","square","pow","Math","round","xRank","dataFormat","biasShape","biasAdd","add","elu","alpha","softsign","div","abs","dropout","level","noiseShape","hardSigmoid","clipByValue","inTrainPhase","alt","training"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/backend/tfjs_backend.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * deeplearn.js backend.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {onesLike as coreOnesLike, scalar, Tensor, Tensor1D, tensor1d, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy, where, zerosLike as coreZerosLike} from '@tensorflow/tfjs-core';\nimport {checkDataFormat} from '../common';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {HasShape} from '../types';\nimport * as math_utils from '../utils/math_utils';\n\nimport {imageDataFormat} from './common';\n\n// tslint:enable\n\n/* Setting and getting backend from deeplearn.js. */\n\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend: 'cpu'|'webgl' = 'webgl';\n\nexport function setBackend(requestedBackend: 'cpu'|'webgl') {\n  tfc.setBackend(requestedBackend);\n  backend = requestedBackend;\n}\n\nexport function getBackend(): 'cpu'|'webgl' {\n  return backend;\n}\n\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic(): boolean {\n  return false;\n}\n\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x: HasShape): number {\n  const shape = x.shape;\n  if (shape.length > 0) {\n    return shape.reduce((a: number, b: number) => a * b);\n  } else {\n    // Scalar.\n    return 1;\n  }\n}\n\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x: Tensor, dtype: tfc.DataType): Tensor {\n  return tfc.cast(x, dtype);\n}\n\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x: Tensor, axis = -1): Tensor {\n  const outShape = x.shape.slice();\n  if (axis < 0) {\n    axis = outShape.length + axis + 1;\n  }\n  outShape.splice(axis, 0, 1);\n  return tfc.reshape(x, outShape);\n}\n\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x: Tensor, n: number): Tensor {\n  return tidy(() => {\n    if (x.shape.length !== 2) {\n      throw new ValueError(\n          `repeat() expects a rank-2 tensor, but received a ` +\n          `rank-${x.shape.length} tensor.`);\n    }\n    const y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n  });\n}\n\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x: Tensor): Tensor {\n  const newShape = [math_utils.arrayProd(x.shape)];\n  return tfc.reshape(x, newShape);\n}\n\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x: Tensor): Tensor {\n  if (x.rank <= 1) {\n    throw new ValueError(\n        `batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n  }\n  const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n  return tfc.reshape(x, newShape);\n}\n\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [start, 0], [size, array.shape[1]]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [start, 0, 0],\n            [size, array.shape[1], array.shape[2]]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [start, 0, 0, 0],\n            [size, array.shape[1], array.shape[2], array.shape[3]]);\n      case 5:\n        return tfc.slice(array as Tensor5D, [start, 0, 0, 0, 0], [\n          size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n        ]);\n      case 6:\n        return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n          size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n          array.shape[5]\n        ]);\n      default:\n        throw new ValueError(\n            `sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(\n    array: Tensor, start: number, size: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        return tfc.slice2d(\n            array as Tensor2D, [0, start], [array.shape[0], size]);\n      case 3:\n        return tfc.slice3d(\n            array as Tensor3D, [0, 0, start],\n            [array.shape[0], array.shape[1], size]);\n      case 4:\n        return tfc.slice4d(\n            array as Tensor4D, [0, 0, 0, start],\n            [array.shape[0], array.shape[1], array.shape[2], size]);\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(\n    array: Tensor, start: number, size: number, axis: number): Tensor {\n  return tidy(() => {\n    switch (array.rank) {\n      case 1:\n        return tfc.slice1d(array as Tensor1D, start, size);\n      case 2:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 3:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice3d(\n                array as Tensor3D, [0, start, 0],\n                [array.shape[0], size, array.shape[2]]);\n          case 3:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      case 4:\n        switch (axis) {\n          case 1:\n            return sliceAlongFirstAxis(array, start, size);\n          case 2:\n            return tfc.slice4d(\n                array as Tensor4D, [0, start, 0, 0],\n                [array.shape[0], size, array.shape[2], array.shape[3]]);\n          case 3:\n            return tfc.slice4d(\n                array as Tensor4D, [0, 0, start, 0],\n                [array.shape[0], array.shape[1], size, array.shape[3]]);\n          case 4:\n            return sliceAlongLastAxis(array, start, size);\n          default:\n            throw new ValueError(\n                `The axis is not within the rank of the tensor ` +\n                `${axis}`);\n        }\n      default:\n        throw new ValueError(\n            `sliceAlongLastAxis() received an unsupported tensor rank: ` +\n            `${array.rank}`);\n    }\n  });\n}\n\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors: Tensor[], axis = -1): Tensor {\n  let rank: number;\n  if (axis < 0) {\n    rank = tensors[0].rank;\n    if (rank !== 0) {\n      axis = rank;\n    } else {\n      axis = 0;\n    }\n  }\n  if (axis === tensors[0].rank) {\n    // Porting Note: This is necessary because tfc.concat() requires axis to be\n    //   in the interval [-rank, rank).\n    axis = -1;\n  }\n  // Porting Note: Sparse concat is not supported yet.\n  return tfc.concat(tensors, axis);\n}\n\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a: Tensor, b: Tensor): Tensor {\n  switch (a.rank) {\n    case 1:\n      return tfc.concat1d([a as Tensor1D, b as Tensor1D]);\n    case 2:\n      return tfc.concat2d([a as Tensor2D, b as Tensor2D], 0);\n    case 3:\n      return tfc.concat3d([a as Tensor3D, b as Tensor3D], 0);\n    case 4:\n      return tfc.concat4d([a as Tensor4D, b as Tensor4D], 0);\n    default:\n      throw new ValueError(\n          `concatAlongFirstAxis() received an unsupported ` +\n          `tensor rank: ${a.rank}`);\n  }\n}\n\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x: Tensor, n: number|number[]): Tensor {\n  if (!Array.isArray(n)) {\n    n = [n];\n  }\n  if (x.rank !== n.length) {\n    throw new ValueError(\n        `The length of input n (${n.length}) does not match ` +\n        `the number of dimensions in input x (${x.rank})`);\n  }\n  return tfc.tile(x, n);\n}\n\n/* Creation of random tensors. */\n\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: 'float32'|'int32',\n    seed?: number): Tensor {\n  return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n\n/* Linear Algebra */\n\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(\n    a: Tensor, b: Tensor, activation?: tfc.fused.Activation,\n    bias?: Tensor): Tensor {\n  if ((a.rank < 2) || (b.rank < 2)) {\n    throw new NotImplementedError(\n        `dot requires both inputs to be rank >= 2` +\n        ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n  }\n  if (b.rank >= 3) {\n    const xLastDim = a.shape.slice(-1)[0];\n    const ySecondLastDim = b.shape.slice(-2)[0];\n    if (xLastDim !== ySecondLastDim) {\n      throw new NotImplementedError(\n          `If rank y >= 3, then the second last dim` +\n          ` of y must equal the last dim of x but got x shape = ${\n              a.shape} and ` +\n          ` y shape = ${b.shape}`);\n    }\n  }\n  // Handle basic 2D x 2D case.\n  if ((a.rank === 2) && (b.rank === 2)) {\n    const transposeA = false;\n    const transposeB = false;\n    // tfc.fused.matMul only fuses certain activation functions. Unsupported\n    // activation functions are treated as 'linear' activations, which is\n    // equivalent to a no-op.\n    return tfc.fused.matMul({\n      a,\n      b: b as Tensor2D,\n      transposeA,\n      transposeB,\n      bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n      activation\n    });\n  } else {\n    // Reshape x into the analogous 2D Tensor.\n    const aFirstDims = a.shape.slice();  // Holds all but the last dim of x.\n    const aLastDim = aFirstDims.pop();\n    a = tfc.reshape(a, [-1, aLastDim]);\n\n    // Reshape y into the analogous 2D Tensor, and keep track of the\n    // required dimensions to reproduce the output shape.\n    const bShape = b.shape.slice();\n    const bLastDim = bShape.pop();\n    const ySecondLastDim = bShape.pop();\n    const yOtherDims = [...bShape, bLastDim];\n    // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n    // where r is the rank of y.\n    const perm = Array.from({length: b.rank}, (_, i) => {\n      if (i === 0) {\n        return b.rank - 2;\n      } else if (i <= b.rank - 2) {\n        return i - 1;\n      }\n      return i;\n    });\n    b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]);\n\n    // Multiply x and y as 2D Tensors, and then reshape back to original.\n    const outputShape = [...aFirstDims, ...yOtherDims];\n    const transposeA = false;\n    const transposeB = false;\n    return tfc.reshape(\n        tfc.fused.matMul({\n          a,\n          b,\n          transposeA,\n          transposeB,\n          bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n          activation\n        }),\n        outputShape);\n  }\n}\n\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x: Tensor): Tensor {\n  // TODO(cais): Move to the core.\n  return tidy(() => {\n    const zerosLikeX = coreZerosLike(x);\n    const onesLikeX = coreOnesLike(x);\n    return where(\n        tfc.equal(x, zerosLikeX), zerosLikeX,\n        where(\n            tfc.greater(x, coreZerosLike(x)), onesLikeX,\n            tfc.mul(-1, onesLikeX)));\n  });\n}\n\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices: Tensor, numClasses: number): Tensor {\n  return tidy(() => {\n    if (indices.rank !== 1) {\n      throw new Error(\n          'Only 1D one-hot tensors are supported in the ' +\n          'deeplearn backend, at present.');\n    }\n    indices = tfc.cast(indices, 'int32');\n    return tfc.cast(tfc.oneHot(indices as Tensor1D, numClasses), 'float32');\n  });\n}\n\n/* Elementary math functions. */\n\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(\n    reference: Tensor, indices: number[]|Tensor1D, axis?: number): Tensor {\n  return tidy(() => {\n    if (Array.isArray(indices)) {\n      indices = tensor1d(indices, 'int32');\n    } else {\n      indices = tfc.cast(indices, 'int32');\n    }\n    return tfc.gather(reference, indices, axis);\n  });\n}\n\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x: Tensor): Tensor {\n  return tfc.mul(x, x);\n}\n\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x: Tensor, a: Tensor|number): Tensor {\n  return tidy(() => {\n    if (typeof (a) === 'number') {\n      a = scalar(Math.round(a), 'int32');\n    }\n    if (a.dtype !== 'int32') {\n      throw new NotImplementedError(\n          `Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n    }\n    return tfc.pow(x, a);\n  });\n}\n\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank: number, bias: Tensor, dataFormat: string) {\n  const biasShape = bias.shape;\n\n  if (bias.rank !== 1 && bias.rank !== xRank) {\n    throw new ValueError(\n        `Unexpected bias dimensions: ${bias.rank}` +\n        `; expected it to be 1 or ${xRank}`);\n  }\n\n  if (xRank === 5) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n      } else {\n        return tfc.reshape(\n            bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 4) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank === 3) {\n    if (dataFormat === 'channelsFirst') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, biasShape[0], 1]);\n      } else {\n        return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n      }\n    } else if (dataFormat === 'channelsLast') {\n      if (biasShape.length === 1) {\n        return tfc.reshape(bias, [1, 1, biasShape[0]]);\n      } else {\n        return tfc.reshape(bias, [1].concat(biasShape));\n      }\n    }\n  } else if (xRank < 3) {\n    return bias;\n  }\n  throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n\n/* Neural-network operations. */\n\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(\n    x: Tensor, bias: Tensor, dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n\n    return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n  });\n}\n\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x: Tensor, alpha = 1): Tensor {\n  // TODO(cais): Add support for alpha values other than 1.\n  if (alpha !== 1) {\n    throw new NotImplementedError(\n        `Support for alpha values other than 1 (${alpha}) is not implemented ` +\n        `yet.`);\n  }\n  return tfc.elu(x);\n}\n\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x: Tensor): Tensor {\n  return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(\n    x: Tensor, level: number, noiseShape?: number[], seed?: number): Tensor {\n  return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x: Tensor): Tensor {\n  return tidy(() => {\n    const y = tfc.add(.5, tfc.mul(.2, x));\n    return tfc.clipByValue(y, 0, 1);\n  });\n}\n\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase<T>(x: () => T, alt: () => T, training = false): T {\n  return training ? x() : alt();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}