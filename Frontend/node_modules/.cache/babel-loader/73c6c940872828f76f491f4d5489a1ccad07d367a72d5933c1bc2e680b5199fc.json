{"ast":null,"code":"var _jsxFileName = \"/Users/jonchen/Documents/HackPSU/s24hackpsu/src/components/recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WebcamRecorder() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [stream, setStream] = useState(null);\n  const [overlayMessage, setOverlayMessage] = useState('');\n  const [overlayColor, setOverlayColor] = useState('');\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const recordedChunks = useRef([]);\n  const captureInterval = useRef(null);\n  const faceDetector = useRef(null);\n  const trafficDensityDetector = useRef(null);\n  const weatherDetector = useRef(null);\n  useEffect(() => {\n    startRecording();\n    async function loadModels() {\n      const faceModel = await tf.loadGraphModel('/path/to/face_detection_model/model.json', {\n        fromFile: true\n      });\n      faceDetector.current = faceModel;\n      const trafficModel = await tf.loadGraphModel('/path/to/traffic_density_model/model.json', {\n        fromFile: true\n      });\n      trafficDensityDetector.current = trafficModel;\n      const weatherModel = await tf.loadGraphModel('/path/to/weather_detection_model/model.json', {\n        fromFile: true\n      });\n      weatherDetector.current = weatherModel;\n    }\n    loadModels();\n    function handleResize() {\n      if (videoRef.current && canvasRef.current) {\n        const videoHeight = window.innerHeight * 0.9;\n        videoRef.current.style.maxHeight = `${videoHeight}px`;\n        canvasRef.current.style.maxHeight = `${videoHeight}px`;\n      }\n    }\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  const startRecording = async () => {\n    try {\n      const constraints = {\n        video: {\n          width: 720,\n          height: 1280\n        }\n      };\n      const newStream = await navigator.mediaDevices.getUserMedia(constraints);\n      setStream(newStream);\n      const mediaRecorder = new MediaRecorder(newStream);\n      mediaRecorder.start();\n      setIsRecording(true);\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.ondataavailable = event => {\n        recordedChunks.current.push(event.data);\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(recordedChunks.current, {\n          type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'\n        });\n        const url = URL.createObjectURL(blob);\n        console.log('Recorded video URL:', url);\n        recordedChunks.current = [];\n      };\n      videoRef.current.srcObject = newStream;\n      captureInterval.current = setInterval(detectConditions, 1000); // Detect every 1 second\n    } catch (error) {\n      console.error('Error accessing webcam:', error);\n    }\n  };\n  function stopRecording() {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n      videoRef.current.srcObject = null;\n    }\n    if (captureInterval.current) {\n      clearInterval(captureInterval.current);\n    }\n    setIsRecording(false);\n    window.location.replace('http://localhost:3000'); //TODO REPLACE URL AFTER TESTING!\n  }\n  async function detectConditions() {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n    const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n    const tensor = tf.browser.fromPixels(imageData, 3);\n    const faceDetectionPrediction = await faceDetector.current.executeAsync(tensor);\n    const faceDetected = faceDetectionPrediction.length > 0;\n    const trafficDensityPrediction = await trafficDensityDetector.current.executeAsync(tensor);\n    const trafficDensity = trafficDensityPrediction.dataSync()[0]; // Assuming the output is a single value\n\n    const weatherPrediction = await weatherDetector.current.executeAsync(tensor);\n    const weatherCondition = weatherPrediction.dataSync()[0]; // Assuming the output is a single value\n\n    let message = '';\n    let color = '';\n    if (faceDetected) {\n      message = 'Point toward roads please';\n      color = 'blue';\n    } else if (trafficDensity > 0.7) {\n      message = 'High traffic density';\n      color = 'red';\n    } else if (weatherCondition > 0.5) {\n      message = 'Poor weather conditions';\n      color = 'yellow';\n    }\n    setOverlayMessage(message);\n    setOverlayColor(color);\n    tensor.dispose();\n  }\n  function drawOverlay() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (overlayColor) {\n      ctx.fillStyle = `rgba(${overlayColor === 'blue' ? '0, 0, 255' : overlayColor === 'red' ? '255, 0, 0' : '255, 255, 0'}, 0.5)`;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    if (overlayMessage) {\n      ctx.font = '24px Arial';\n      ctx.fillStyle = 'white';\n      ctx.fillText(overlayMessage, 10, 30);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0\n      },\n      children: drawOverlay()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n}\n_s(WebcamRecorder, \"4idPe8ZqL/48Zi1J9LtyOuUDYyU=\");\n_c = WebcamRecorder;\nexport default WebcamRecorder;\nvar _c;\n$RefreshReg$(_c, \"WebcamRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","tf","jsxDEV","_jsxDEV","WebcamRecorder","_s","isRecording","setIsRecording","stream","setStream","overlayMessage","setOverlayMessage","overlayColor","setOverlayColor","videoRef","canvasRef","mediaRecorderRef","recordedChunks","captureInterval","faceDetector","trafficDensityDetector","weatherDetector","startRecording","loadModels","faceModel","loadGraphModel","fromFile","current","trafficModel","weatherModel","handleResize","videoHeight","window","innerHeight","style","maxHeight","addEventListener","removeEventListener","constraints","video","width","height","newStream","navigator","mediaDevices","getUserMedia","mediaRecorder","MediaRecorder","start","ondataavailable","event","push","data","onstop","blob","Blob","type","url","URL","createObjectURL","console","log","srcObject","setInterval","detectConditions","error","stopRecording","state","stop","getTracks","forEach","track","clearInterval","location","replace","canvas","videoWidth","getContext","drawImage","imageData","getImageData","tensor","browser","fromPixels","faceDetectionPrediction","executeAsync","faceDetected","length","trafficDensityPrediction","trafficDensity","dataSync","weatherPrediction","weatherCondition","message","color","dispose","drawOverlay","ctx","fillStyle","fillRect","font","fillText","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","position","left","top","onClick","_c","$RefreshReg$"],"sources":["/Users/jonchen/Documents/HackPSU/s24hackpsu/src/components/recorder.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction WebcamRecorder() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [stream, setStream] = useState(null);\n    const [overlayMessage, setOverlayMessage] = useState('');\n    const [overlayColor, setOverlayColor] = useState('');\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const recordedChunks = useRef([]);\n    const captureInterval = useRef(null);\n    const faceDetector = useRef(null);\n    const trafficDensityDetector = useRef(null);\n    const weatherDetector = useRef(null);\n\n    useEffect(() => {\n        startRecording();\n        async function loadModels() {\n            const faceModel = await tf.loadGraphModel('/path/to/face_detection_model/model.json', {\n                fromFile: true,\n            });\n            faceDetector.current = faceModel;\n\n            const trafficModel = await tf.loadGraphModel('/path/to/traffic_density_model/model.json', {\n                fromFile: true,\n            });\n            trafficDensityDetector.current = trafficModel;\n\n            const weatherModel = await tf.loadGraphModel('/path/to/weather_detection_model/model.json', {\n                fromFile: true,\n            });\n            weatherDetector.current = weatherModel;\n        }\n        loadModels();\n\n        function handleResize() {\n            if (videoRef.current && canvasRef.current) {\n                const videoHeight = window.innerHeight * 0.9;\n                videoRef.current.style.maxHeight = `${videoHeight}px`;\n                canvasRef.current.style.maxHeight = `${videoHeight}px`;\n            }\n        }\n\n        handleResize();\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    const startRecording = async () => {\n        try {\n            const constraints = { video: { width: 720, height: 1280 } };\n            const newStream = await navigator.mediaDevices.getUserMedia(constraints);\n            setStream(newStream);\n            const mediaRecorder = new MediaRecorder(newStream);\n\n            mediaRecorder.start();\n            setIsRecording(true);\n\n            mediaRecorderRef.current = mediaRecorder;\n            mediaRecorder.ondataavailable = (event) => {\n                recordedChunks.current.push(event.data);\n            };\n\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(recordedChunks.current, { type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"' });\n                const url = URL.createObjectURL(blob);\n                console.log('Recorded video URL:', url);\n                recordedChunks.current = [];\n            };\n\n            videoRef.current.srcObject = newStream;\n            captureInterval.current = setInterval(detectConditions, 1000); // Detect every 1 second\n        } catch (error) {\n            console.error('Error accessing webcam:', error);\n        }\n    };\n\n    function stopRecording() {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n            mediaRecorderRef.current.stop();\n        }\n        if (stream) {\n            stream.getTracks().forEach((track) => track.stop());\n            setStream(null);\n            videoRef.current.srcObject = null;\n        }\n        if (captureInterval.current) {\n            clearInterval(captureInterval.current);\n        }\n        setIsRecording(false);\n        window.location.replace('http://localhost:3000'); //TODO REPLACE URL AFTER TESTING!\n    }\n\n    async function detectConditions() {\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n        const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n        const tensor = tf.browser.fromPixels(imageData, 3);\n\n        const faceDetectionPrediction = await faceDetector.current.executeAsync(tensor);\n        const faceDetected = faceDetectionPrediction.length > 0;\n\n        const trafficDensityPrediction = await trafficDensityDetector.current.executeAsync(tensor);\n        const trafficDensity = trafficDensityPrediction.dataSync()[0]; // Assuming the output is a single value\n\n        const weatherPrediction = await weatherDetector.current.executeAsync(tensor);\n        const weatherCondition = weatherPrediction.dataSync()[0]; // Assuming the output is a single value\n\n        let message = '';\n        let color = '';\n\n        if (faceDetected) {\n            message = 'Point toward roads please';\n            color = 'blue';\n        } else if (trafficDensity > 0.7) {\n            message = 'High traffic density';\n            color = 'red';\n        } else if (weatherCondition > 0.5) {\n            message = 'Poor weather conditions';\n            color = 'yellow';\n        }\n\n        setOverlayMessage(message);\n        setOverlayColor(color);\n\n        tensor.dispose();\n    }\n\n    function drawOverlay() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        if (overlayColor) {\n            ctx.fillStyle = `rgba(${overlayColor === 'blue' ? '0, 0, 255' : overlayColor === 'red' ? '255, 0, 0' : '255, 255, 0'}, 0.5)`;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n\n        if (overlayMessage) {\n            ctx.font = '24px Arial';\n            ctx.fillStyle = 'white';\n            ctx.fillText(overlayMessage, 10, 30);\n        }\n    }\n\n    return (\n        <div>\n            <video ref={videoRef} autoPlay></video>\n            <canvas ref={canvasRef} style={{ position: 'absolute', left: 0, top: 0 }}>\n                {drawOverlay()}\n            </canvas>\n            <div>\n                {isRecording ? (\n                    <button onClick={stopRecording}>Stop Recording</button>\n                ) : null}\n            </div>\n        </div>\n    );\n}\n\nexport default WebcamRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}