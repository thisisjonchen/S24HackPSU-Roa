{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from './util';\n/**\n * Maps to mapping between the custom object and its name.\n *\n * After registering a custom class, these two maps will add key-value pairs\n * for the class object and the registered name.\n *\n * Therefore we can get the relative registered name by calling\n * getRegisteredName() function.\n *\n * For example:\n * GLOBAL_CUSTOM_OBJECT: {key=registeredName: value=corresponding\n * CustomObjectClass}\n *\n * GLOBAL_CUSTOM_NAMES: {key=CustomObjectClass: value=corresponding\n * registeredName}\n *\n */\nconst GLOBAL_CUSTOM_OBJECT = new Map();\nconst GLOBAL_CUSTOM_NAMES = new Map();\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport class Serializable {\n  /**\n   * Return the class name for this class to use in serialization contexts.\n   *\n   * Generally speaking this will be the same thing that constructor.name\n   * would have returned.  However, the class name needs to be robust\n   * against minification for serialization/deserialization to work properly.\n   *\n   * There's also places such as initializers.VarianceScaling, where\n   * implementation details between different languages led to different\n   * class hierarchies and a non-leaf node is used for serialization purposes.\n   */\n  getClassName() {\n    return this.constructor.className;\n  }\n  /**\n   * Creates an instance of T from a ConfigDict.\n   *\n   * This works for most descendants of serializable.  A few need to\n   * provide special handling.\n   * @param cls A Constructor for the class to instantiate.\n   * @param config The Configuration for the object.\n   */\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n}\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n  constructor() {\n    this.classNameMap = {};\n  }\n  /**\n   * Returns the singleton instance of the map.\n   */\n  static getMap() {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n  /**\n   * Registers the class as serializable.\n   */\n  static register(cls) {\n    SerializationMap.getMap().classNameMap[cls.className] = [cls, cls.fromConfig];\n  }\n}\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example 1. Register the class without package name and specified name.\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Custom>MyCustomLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 2. Register the class with package name: \"Package\" and specified\n * name: \"MyLayer\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, \"Package\", \"MyLayer\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Package>MyLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 3. Register the class with specified name: \"MyLayer\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, undefined, \"MyLayer\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Custom>MyLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 4. Register the class with specified package name: \"Package\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, \"Package\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT\n * .get(\"Package>MyCustomLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES\n * .get(MyCustomLayer));\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n * @param pkg The pakcage name that this class belongs to. This used to define\n *     the key in GlobalCustomObject. If not defined, it defaults to `Custom`.\n * @param name The name that user specified. It defaults to the actual name of\n *     the class as specified by its static `className` property.\n * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}\n */\nexport function registerClass(cls, pkg, name) {\n  assert(cls.className != null, () => `Class being registered does not have the static className ` + `property defined.`);\n  assert(typeof cls.className === 'string', () => `className is required to be a string, but got type ` + typeof cls.className);\n  assert(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` + `which is disallowed.`);\n  if (typeof pkg === 'undefined') {\n    pkg = 'Custom';\n  }\n  if (typeof name === 'undefined') {\n    name = cls.className;\n  }\n  const className = name;\n  const registerName = pkg + '>' + className;\n  SerializationMap.register(cls);\n  GLOBAL_CUSTOM_OBJECT.set(registerName, cls);\n  GLOBAL_CUSTOM_NAMES.set(cls, registerName);\n  return cls;\n}\n/**\n * Get the registered name of a class. If the class has not been registered,\n * return the class name.\n *\n * @param cls The class we want to get register name for. It must have a public\n *     static member called `className` defined.\n * @returns registered name or class name.\n */\nexport function getRegisteredName(cls) {\n  if (GLOBAL_CUSTOM_NAMES.has(cls)) {\n    return GLOBAL_CUSTOM_NAMES.get(cls);\n  } else {\n    return cls.className;\n  }\n}","map":{"version":3,"names":["assert","GLOBAL_CUSTOM_OBJECT","Map","GLOBAL_CUSTOM_NAMES","Serializable","getClassName","constructor","className","fromConfig","cls","config","SerializationMap","classNameMap","getMap","instance","register","registerClass","pkg","name","length","registerName","set","getRegisteredName","has","get"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/serialization.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from './util';\n\n/**\n * Types to support JSON-esque data structures internally.\n *\n * Internally ConfigDict's use camelCase keys and values where the\n * values are class names to be instantiated.  On the python side, these\n * will be snake_case.  Internally we allow Enums into the values for better\n * type safety, but these need to be converted to raw primitives (usually\n * strings) for round-tripping with python.\n *\n * toConfig returns the TS-friendly representation. model.toJSON() returns\n * the pythonic version as that's the portable format.  If you need to\n * python-ify a non-model level toConfig output, you'll need to use a\n * convertTsToPythonic from serialization_utils in -Layers.\n *\n */\nexport declare type ConfigDictValue =\n    boolean | number | string | null | ConfigDictArray | ConfigDict;\nexport declare interface ConfigDict {\n  [key: string]: ConfigDictValue;\n}\nexport declare interface ConfigDictArray extends Array<ConfigDictValue> {}\n\n/**\n * Type to represent the class-type of Serializable objects.\n *\n * Ie the class prototype with access to the constructor and any\n * static members/methods. Instance methods are not listed here.\n *\n * Source for this idea: https://stackoverflow.com/a/43607255\n */\nexport declare type SerializableConstructor<T extends Serializable> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T; className: string; fromConfig: FromConfigMethod<T>;\n};\nexport declare type FromConfigMethod<T extends Serializable> =\n    (cls: SerializableConstructor<T>, config: ConfigDict) => T;\n\n/**\n * Maps to mapping between the custom object and its name.\n *\n * After registering a custom class, these two maps will add key-value pairs\n * for the class object and the registered name.\n *\n * Therefore we can get the relative registered name by calling\n * getRegisteredName() function.\n *\n * For example:\n * GLOBAL_CUSTOM_OBJECT: {key=registeredName: value=corresponding\n * CustomObjectClass}\n *\n * GLOBAL_CUSTOM_NAMES: {key=CustomObjectClass: value=corresponding\n * registeredName}\n *\n */\nconst GLOBAL_CUSTOM_OBJECT =\n    new Map<string, SerializableConstructor<Serializable>>();\n\nconst GLOBAL_CUSTOM_NAMES =\n    new Map<SerializableConstructor<Serializable>, string>();\n\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport abstract class Serializable {\n  /**\n   * Return the class name for this class to use in serialization contexts.\n   *\n   * Generally speaking this will be the same thing that constructor.name\n   * would have returned.  However, the class name needs to be robust\n   * against minification for serialization/deserialization to work properly.\n   *\n   * There's also places such as initializers.VarianceScaling, where\n   * implementation details between different languages led to different\n   * class hierarchies and a non-leaf node is used for serialization purposes.\n   */\n  getClassName(): string {\n    return (this.constructor as SerializableConstructor<Serializable>)\n        .className;\n  }\n\n  /**\n   * Return all the non-weight state needed to serialize this object.\n   */\n  abstract getConfig(): ConfigDict;\n\n  /**\n   * Creates an instance of T from a ConfigDict.\n   *\n   * This works for most descendants of serializable.  A few need to\n   * provide special handling.\n   * @param cls A Constructor for the class to instantiate.\n   * @param config The Configuration for the object.\n   */\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config);\n  }\n}\n\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n  private static instance: SerializationMap;\n  classNameMap: {\n    [className: string]:\n        [SerializableConstructor<Serializable>, FromConfigMethod<Serializable>]\n  };\n\n  private constructor() {\n    this.classNameMap = {};\n  }\n\n  /**\n   * Returns the singleton instance of the map.\n   */\n  static getMap(): SerializationMap {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n\n  /**\n   * Registers the class as serializable.\n   */\n  static register<T extends Serializable>(cls: SerializableConstructor<T>) {\n    SerializationMap.getMap().classNameMap[cls.className] =\n        [cls, cls.fromConfig];\n  }\n}\n\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example 1. Register the class without package name and specified name.\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Custom>MyCustomLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 2. Register the class with package name: \"Package\" and specified\n * name: \"MyLayer\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, \"Package\", \"MyLayer\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Package>MyLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 3. Register the class with specified name: \"MyLayer\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, undefined, \"MyLayer\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Custom>MyLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 4. Register the class with specified package name: \"Package\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, \"Package\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT\n * .get(\"Package>MyCustomLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES\n * .get(MyCustomLayer));\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n * @param pkg The pakcage name that this class belongs to. This used to define\n *     the key in GlobalCustomObject. If not defined, it defaults to `Custom`.\n * @param name The name that user specified. It defaults to the actual name of\n *     the class as specified by its static `className` property.\n * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}\n */\nexport function registerClass<T extends Serializable>(\n    cls: SerializableConstructor<T>, pkg?: string, name?: string) {\n  assert(\n      cls.className != null,\n      () => `Class being registered does not have the static className ` +\n          `property defined.`);\n  assert(\n      typeof cls.className === 'string',\n      () => `className is required to be a string, but got type ` +\n          typeof cls.className);\n  assert(\n      cls.className.length > 0,\n      () => `Class being registered has an empty-string as its className, ` +\n          `which is disallowed.`);\n\n  if (typeof pkg === 'undefined') {\n    pkg = 'Custom';\n  }\n\n  if (typeof name === 'undefined') {\n    name = cls.className;\n  }\n\n  const className = name;\n  const registerName = pkg + '>' + className;\n\n  SerializationMap.register(cls);\n  GLOBAL_CUSTOM_OBJECT.set(registerName, cls);\n  GLOBAL_CUSTOM_NAMES.set(cls, registerName);\n\n  return cls;\n}\n\n/**\n * Get the registered name of a class. If the class has not been registered,\n * return the class name.\n *\n * @param cls The class we want to get register name for. It must have a public\n *     static member called `className` defined.\n * @returns registered name or class name.\n */\nexport function getRegisteredName<T extends Serializable>(\n    cls: SerializableConstructor<T>) {\n  if (GLOBAL_CUSTOM_NAMES.has(cls)) {\n    return GLOBAL_CUSTOM_NAMES.get(cls);\n  } else {\n    return cls.className;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,QAAQ;AAuC7B;;;;;;;;;;;;;;;;;AAiBA,MAAMC,oBAAoB,GACtB,IAAIC,GAAG,EAAiD;AAE5D,MAAMC,mBAAmB,GACrB,IAAID,GAAG,EAAiD;AAE5D;;;;;;AAMA,OAAM,MAAgBE,YAAY;EAChC;;;;;;;;;;;EAWAC,YAAYA,CAAA;IACV,OAAQ,IAAI,CAACC,WAAqD,CAC7DC,SAAS;EAChB;EAOA;;;;;;;;EAQA;EACA,OAAOC,UAAUA,CACbC,GAA+B,EAAEC,MAAkB;IACrD,OAAO,IAAID,GAAG,CAACC,MAAM,CAAC;EACxB;;AAGF;;;;;;;AAOA,OAAM,MAAOC,gBAAgB;EAO3BL,YAAA;IACE,IAAI,CAACM,YAAY,GAAG,EAAE;EACxB;EAEA;;;EAGA,OAAOC,MAAMA,CAAA;IACX,IAAIF,gBAAgB,CAACG,QAAQ,IAAI,IAAI,EAAE;MACrCH,gBAAgB,CAACG,QAAQ,GAAG,IAAIH,gBAAgB,EAAE;;IAEpD,OAAOA,gBAAgB,CAACG,QAAQ;EAClC;EAEA;;;EAGA,OAAOC,QAAQA,CAAyBN,GAA+B;IACrEE,gBAAgB,CAACE,MAAM,EAAE,CAACD,YAAY,CAACH,GAAG,CAACF,SAAS,CAAC,GACjD,CAACE,GAAG,EAAEA,GAAG,CAACD,UAAU,CAAC;EAC3B;;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA,OAAM,SAAUQ,aAAaA,CACzBP,GAA+B,EAAEQ,GAAY,EAAEC,IAAa;EAC9DlB,MAAM,CACFS,GAAG,CAACF,SAAS,IAAI,IAAI,EACrB,MAAM,4DAA4D,GAC9D,mBAAmB,CAAC;EAC5BP,MAAM,CACF,OAAOS,GAAG,CAACF,SAAS,KAAK,QAAQ,EACjC,MAAM,qDAAqD,GACvD,OAAOE,GAAG,CAACF,SAAS,CAAC;EAC7BP,MAAM,CACFS,GAAG,CAACF,SAAS,CAACY,MAAM,GAAG,CAAC,EACxB,MAAM,+DAA+D,GACjE,sBAAsB,CAAC;EAE/B,IAAI,OAAOF,GAAG,KAAK,WAAW,EAAE;IAC9BA,GAAG,GAAG,QAAQ;;EAGhB,IAAI,OAAOC,IAAI,KAAK,WAAW,EAAE;IAC/BA,IAAI,GAAGT,GAAG,CAACF,SAAS;;EAGtB,MAAMA,SAAS,GAAGW,IAAI;EACtB,MAAME,YAAY,GAAGH,GAAG,GAAG,GAAG,GAAGV,SAAS;EAE1CI,gBAAgB,CAACI,QAAQ,CAACN,GAAG,CAAC;EAC9BR,oBAAoB,CAACoB,GAAG,CAACD,YAAY,EAAEX,GAAG,CAAC;EAC3CN,mBAAmB,CAACkB,GAAG,CAACZ,GAAG,EAAEW,YAAY,CAAC;EAE1C,OAAOX,GAAG;AACZ;AAEA;;;;;;;;AAQA,OAAM,SAAUa,iBAAiBA,CAC7Bb,GAA+B;EACjC,IAAIN,mBAAmB,CAACoB,GAAG,CAACd,GAAG,CAAC,EAAE;IAChC,OAAON,mBAAmB,CAACqB,GAAG,CAACf,GAAG,CAAC;GACpC,MAAM;IACL,OAAOA,GAAG,CAACF,SAAS;;AAExB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}