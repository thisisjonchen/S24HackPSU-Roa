{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function eluGrad(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    dy,\n    y\n  } = inputs;\n  assertNotComplex([dy, y], 'eluGrad');\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values;\n  const dyValues = backend.data.get(dy.dataId).values;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 0) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\nexport const eluGradConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad\n};","map":{"version":3,"names":["EluGrad","util","assertNotComplex","eluGrad","args","inputs","backend","dy","y","resultValues","Float32Array","sizeFromShape","shape","values","data","get","dataId","dyValues","i","length","v","makeTensorInfo","eluGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/EluGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 0) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAO,EAAmEC,IAAI,QAAO,uBAAuB;AAGpH,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,OAAOA,CAACC,IAAsD;EAE5E,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,EAAE;IAAEC;EAAC,CAAC,GAAGH,MAAM;EAEtBH,gBAAgB,CAAC,CAACK,EAAE,EAAEC,CAAC,CAAC,EAAE,SAAS,CAAC;EAEpC,MAAMC,YAAY,GAAG,IAAIC,YAAY,CAACT,IAAI,CAACU,aAAa,CAACH,CAAC,CAACI,KAAK,CAAC,CAAC;EAClE,MAAMC,MAAM,GAAGP,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACP,CAAC,CAACQ,MAAM,CAAC,CAACH,MAAoB;EAC9D,MAAMI,QAAQ,GAAGX,OAAO,CAACQ,IAAI,CAACC,GAAG,CAACR,EAAE,CAACS,MAAM,CAAC,CAACH,MAAoB;EACjE,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACM,MAAM,EAAE,EAAED,CAAC,EAAE;IACtC,MAAME,CAAC,GAAGP,MAAM,CAACK,CAAC,CAAC;IACnB,IAAIE,CAAC,IAAI,CAAC,EAAE;MACVX,YAAY,CAACS,CAAC,CAAC,GAAGD,QAAQ,CAACC,CAAC,CAAC;KAC9B,MAAM;MACLT,YAAY,CAACS,CAAC,CAAC,GAAGD,QAAQ,CAACC,CAAC,CAAC,IAAIE,CAAC,GAAG,CAAC,CAAC;;;EAI3C,OAAOd,OAAO,CAACe,cAAc,CAACb,CAAC,CAACI,KAAK,EAAE,SAAS,EAAEH,YAAY,CAAC;AACjE;AAEA,OAAO,MAAMa,aAAa,GAAiB;EACzCC,UAAU,EAAEvB,OAAO;EACnBwB,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEtB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}