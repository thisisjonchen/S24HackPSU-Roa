{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeBilinear(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  assertNotComplex(images, 'resizeBilinear');\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values;\n  const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n  const effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  const effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], 'float32', result);\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"names":["ResizeBilinear","util","assertNotComplex","resizeBilinear","args","inputs","backend","attrs","images","alignCorners","halfPixelCenters","size","imagesStrides","computeStrides","shape","newHeight","newWidth","batch","oldHeight","oldWidth","numChannels","xValues","data","get","dataId","values","result","Float32Array","sizeFromShape","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","b","r","sourceFracRow","sourceRowFloor","Math","max","floor","rowFrac","sourceRowCeil","min","ceil","topRowOffset","botRowOffset","c","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","d","topLeft","bottomLeft","topRight","bottomRight","top","bottom","newValue","makeTensorInfo","resizeBilinearConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/ResizeBilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}