{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { deepClone } from '../util/deep_clone';\nimport { deepMapAndAwaitAll, deepZip, zipToList } from '../util/deep_map';\nimport { GrowingRingBuffer } from '../util/growing_ring_buffer';\nimport { RingBuffer } from '../util/ring_buffer';\n// Here we implement a simple asynchronous iterator.\n// This lets us avoid using either third-party stream libraries or\n// recent TypeScript language support requiring polyfills.\n/**\n * Create a `LazyIterator` from an array of items.\n */\nexport function iteratorFromItems(items) {\n  return new ArrayIterator(items);\n}\n/**\n * Create a `LazyIterator` of incrementing integers.\n */\nexport function iteratorFromIncrementing(start) {\n  let i = start;\n  return iteratorFromFunction(() => ({\n    value: i++,\n    done: false\n  }));\n}\n/**\n * Create a `LazyIterator` from a function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * await iter.forEachAsync(e => console.log(e));\n * ```\n *\n * @param func A function that produces data on each call.\n */\nexport function iteratorFromFunction(func) {\n  return new FunctionCallIterator(func);\n}\n/**\n * Create a `LazyIterator` by concatenating underlying streams, which are\n * themselves provided as a stream.\n *\n * This can also be thought of as a \"stream flatten\" operation.\n *\n * @param baseIterators A stream of streams to be concatenated.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenated(baseIterators, baseErrorHandler) {\n  return new ChainedIterator(baseIterators, baseErrorHandler);\n}\n/**\n * Create a `LazyIterator` by concatenating streams produced by calling a\n * stream-generating function a given number of times.\n *\n * Since a `LazyIterator` is read-once, it cannot be repeated, but this\n * function can be used to achieve a similar effect:\n *\n *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);\n *\n * @param iteratorFunc: A function that produces a new stream on each call.\n * @param count: The number of times to call the function.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenatedFunction(iteratorFunc, count, baseErrorHandler) {\n  return iteratorFromConcatenated(iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);\n}\n/**\n * Create a `LazyIterator` by zipping together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nexport function iteratorFromZipped(iterators, mismatchMode = ZipMismatchMode.FAIL) {\n  return new ZipIterator(iterators, mismatchMode);\n}\n/**\n * An asynchronous iterator, providing lazy access to a potentially\n * unbounded stream of elements.\n *\n * Iterator can be obtained from a dataset:\n * `const iter = await dataset.iterator();`\n */\nexport class LazyIterator {\n  /**\n   * Collect all remaining elements of a bounded stream into an array.\n   * Obviously this will succeed only for small streams that fit in memory.\n   * Useful for testing.\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArray() {\n    const result = [];\n    let x = await this.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await this.next();\n    }\n    return result;\n  }\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArrayForTest() {\n    const stream = this.prefetch(100);\n    const result = [];\n    let x = await stream.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await stream.next();\n    }\n    return result;\n  }\n  /**\n   * Draw items from the stream until it is exhausted.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveFully() {\n    let x = await this.next();\n    while (!x.done) {\n      x = await this.next();\n    }\n  }\n  /**\n   * Draw items from the stream until it is exhausted, or a predicate fails.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveWhile(predicate) {\n    let x = await this.next();\n    let shouldContinue = predicate(x.value);\n    while (!x.done && shouldContinue) {\n      x = await this.next();\n      shouldContinue = predicate(x.value);\n    }\n  }\n  /**\n   * Handles errors thrown on this stream using a provided handler function.\n   *\n   * @param handler A function that handles any `Error` thrown during a `next()`\n   *   call and returns true if the stream should continue (dropping the failed\n   *   call) or false if the stream should quietly terminate.  If the handler\n   *   itself throws (or rethrows) an `Error`, that will be propagated.\n   *\n   * @returns A `LazyIterator` of elements passed through from upstream,\n   *   possibly filtering or terminating on upstream `next()` calls that\n   *   throw an `Error`.\n   */\n  handleErrors(handler) {\n    return new ErrorHandlingLazyIterator(this, handler);\n  }\n  // TODO(soergel): Implement reduce() etc.\n  /**\n   * Filters this stream according to `predicate`.\n   *\n   * @param predicate A function mapping a stream element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `LazyIterator` of elements for which the predicate was true.\n   */\n  filter(predicate) {\n    return new FilterIterator(this, predicate);\n  }\n  /**\n   * Maps this stream through a 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  map(transform) {\n    return new MapIterator(this, transform);\n  }\n  /**\n   * Maps this stream through an async 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a `Promise` for a\n   *   transformed stream element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  mapAsync(transform) {\n    return new AsyncMapIterator(this, transform);\n  }\n  /**\n   * Maps this stream through a 1-to-1 transform, forcing serial execution.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  serialMapAsync(transform) {\n    return new AsyncMapIterator(this, transform).serial();\n  }\n  /**\n   * Maps this stream through a 1-to-many transform.\n   *\n   * @param transform A function mapping a stream element to an array of\n   *   transformed elements.\n   *\n   * @returns A `DataStream` of transformed elements.\n   */\n  flatmap(transform) {\n    return new FlatmapIterator(this, transform);\n  }\n  /**\n   * Apply a function to every element of the stream.\n   *\n   * @param f A function to apply to each stream element.\n   */\n  async forEachAsync(f) {\n    return this.map(f).resolveFully();\n  }\n  /**\n   * Apply a function to every element of the stream, forcing serial execution.\n   *\n   * @param f A function to apply to each stream element.  Should return 'true'\n   *   to indicate that the stream should continue, or 'false' to cause it to\n   *   terminate.\n   */\n  async serialForEach(f) {\n    return this.serialMapAsync(f).resolveWhile(x => x === true);\n  }\n  /**\n   * Groups elements into batches, represented as arrays of elements.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"Row-major\" means that the resulting batch is simply a collection of\n   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major\n   * form, which is needed for vectorized computation.\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `LazyIterator` of batches of elements, represented as arrays\n   *   of the original element type.\n   */\n  rowMajorBatch(batchSize, smallLastBatch = true) {\n    return new RowMajorBatchIterator(this, batchSize, smallLastBatch);\n  }\n  /**\n   * Groups elements into batches, represented in column-major form.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"column-major\" means that the resulting batch is a (potentially\n   * nested) structure representing the columns.  Each column entry, then,\n   * contains a collection of the values found in that column for a range of\n   * input elements.  This representation allows for vectorized computation, in\n   * contrast to the row-major form.\n   *\n   * The inputs should all have the same nested structure (i.e., of arrays and\n   * dicts).  The result is a single object with the same nested structure,\n   * where the leaves are arrays collecting the values of the inputs at that\n   * location (or, optionally, the result of a custom function applied to those\n   * arrays).\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @param zipFn: (optional) A function that expects an array of elements at a\n   *   single node of the object tree, and returns a `DeepMapResult`.  The\n   *   `DeepMapResult` either provides a result value for that node (i.e.,\n   *   representing the subtree), or indicates that the node should be processed\n   *   recursively.  The default zipFn recurses as far as possible and places\n   *   arrays at the leaves.\n   * @returns A `LazyIterator` of batches of elements, represented as an object\n   *   with collections at the leaves.\n   */\n  columnMajorBatch(batchSize, smallLastBatch = true,\n  // tslint:disable-next-line:no-any\n  zipFn = zipToList) {\n    // First collect the desired number of input elements as a row-major batch.\n    const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);\n    // Now 'rotate' or 'pivot' the data, collecting all values from each column\n    // in the batch (i.e., for each key within the elements) into an array.\n    return rowBatches.map(x => deepZip(x, zipFn));\n  }\n  /**\n   * Concatenate this `LazyIterator` with another.\n   *\n   * @param iterator A `LazyIterator` to be concatenated onto this one.\n   * @param baseErrorHandler An optional function that can intercept `Error`s\n   *   raised during a `next()` call on the base stream.  This function can\n   *   decide whether the error should be propagated, whether the error should\n   *   be ignored, or whether the base stream should be terminated.\n   * @returns A `LazyIterator`.\n   */\n  concatenate(iterator, baseErrorHandler) {\n    return new ChainedIterator(iteratorFromItems([this, iterator]), baseErrorHandler);\n  }\n  /**\n   * Limits this stream to return at most `count` items.\n   *\n   * @param count The maximum number of items to provide from the stream. If\n   * a negative or undefined value is given, the entire stream is returned\n   *   unaltered.\n   */\n  take(count) {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new TakeIterator(this, count);\n  }\n  /**\n   * Skips the first `count` items in this stream.\n   *\n   * @param count The number of items to skip.  If a negative or undefined\n   * value is given, the entire stream is returned unaltered.\n   */\n  skip(count) {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new SkipIterator(this, count);\n  }\n  /**\n   * Prefetch the first `bufferSize` items in this stream.\n   *\n   * Note this prefetches Promises, but makes no guarantees about when those\n   * Promises resolve.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   */\n  prefetch(bufferSize) {\n    return new PrefetchIterator(this, bufferSize);\n  }\n  // TODO(soergel): deep sharded shuffle, where supported\n  /**\n   * Randomly shuffles the elements of this stream.\n   *\n   * @param bufferSize: An integer specifying the number of elements from\n   * this stream from which the new stream will sample.\n   * @param seed: (Optional.) An integer specifying the random seed that\n   * will be used to create the distribution.\n   */\n  shuffle(windowSize, seed) {\n    return new ShuffleIterator(this, windowSize, seed);\n  }\n  /**\n   * Force an iterator to execute serially: each next() call will await the\n   * prior one, so that they cannot execute concurrently.\n   */\n  serial() {\n    return new SerialIterator(this);\n  }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on LazyIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// Iterators that just extend LazyIterator directly\n// ============================================================================\nclass ArrayIterator extends LazyIterator {\n  constructor(items) {\n    super();\n    this.items = items;\n    this.trav = 0;\n  }\n  summary() {\n    return `Array of ${this.items.length} items`;\n  }\n  async next() {\n    if (this.trav >= this.items.length) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n    const item = this.items[this.trav];\n    this.trav++;\n    return {\n      value: deepClone(item),\n      done: false\n    };\n  }\n}\nclass FunctionCallIterator extends LazyIterator {\n  constructor(nextFn) {\n    super();\n    this.nextFn = nextFn;\n  }\n  summary() {\n    return `Function call`;\n  }\n  async next() {\n    try {\n      return this.nextFn();\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while iterating through a dataset: ${e.message}`;\n      throw e;\n    }\n  }\n}\nclass SerialIterator extends LazyIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Serial`;\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    return this.upstream.next();\n  }\n}\nclass SkipIterator extends LazyIterator {\n  constructor(upstream, maxCount) {\n    super();\n    this.upstream = upstream;\n    this.maxCount = maxCount;\n    // Local state that should not be clobbered by out-of-order execution.\n    this.count = 0;\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Skip`;\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    // TODO(soergel): consider tradeoffs of reading in parallel, eg.\n    // collecting next() promises in an Array and then waiting for\n    // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:\n    // maybe delayed GC.\n    while (this.count++ < this.maxCount) {\n      const skipped = await this.upstream.next();\n      // short-circuit if upstream is already empty\n      if (skipped.done) {\n        return skipped;\n      }\n      tf.dispose(skipped.value);\n    }\n    return this.upstream.next();\n  }\n}\nclass TakeIterator extends LazyIterator {\n  constructor(upstream, maxCount) {\n    super();\n    this.upstream = upstream;\n    this.maxCount = maxCount;\n    this.count = 0;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Take`;\n  }\n  async next() {\n    if (this.count++ >= this.maxCount) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n    return this.upstream.next();\n  }\n}\n// Note this batch just groups items into row-wise element arrays.\n// Rotating these to a column-wise representation happens only at the dataset\n// level.\nclass RowMajorBatchIterator extends LazyIterator {\n  constructor(upstream, batchSize, enableSmallLastBatch = true) {\n    super();\n    this.upstream = upstream;\n    this.batchSize = batchSize;\n    this.enableSmallLastBatch = enableSmallLastBatch;\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> RowMajorBatch`;\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    const batch = [];\n    while (batch.length < this.batchSize) {\n      const item = await this.upstream.next();\n      if (item.done) {\n        if (this.enableSmallLastBatch && batch.length > 0) {\n          return {\n            value: batch,\n            done: false\n          };\n        }\n        return {\n          value: null,\n          done: true\n        };\n      }\n      batch.push(item.value);\n    }\n    return {\n      value: batch,\n      done: false\n    };\n  }\n}\nclass FilterIterator extends LazyIterator {\n  constructor(upstream, predicate) {\n    super();\n    this.upstream = upstream;\n    this.predicate = predicate;\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Filter`;\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    while (true) {\n      const item = await this.upstream.next();\n      if (item.done || this.predicate(item.value)) {\n        return item;\n      }\n      tf.dispose(item.value);\n    }\n  }\n}\nclass MapIterator extends LazyIterator {\n  constructor(upstream, transform) {\n    super();\n    this.upstream = upstream;\n    this.transform = transform;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Map`;\n  }\n  async next() {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value);\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped);\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {\n      value: mapped,\n      done: false\n    };\n  }\n}\nclass ErrorHandlingLazyIterator extends LazyIterator {\n  constructor(upstream, handler) {\n    super();\n    this.upstream = upstream;\n    this.handler = handler;\n    this.count = 0;\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  summary() {\n    return `${this.upstream.summary()} -> handleErrors`;\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    while (true) {\n      try {\n        return await this.upstream.next();\n      } catch (e) {\n        if (!this.handler(e)) {\n          return {\n            value: null,\n            done: true\n          };\n        }\n        // If the handler returns true, loop and fetch the next upstream item.\n        // If the upstream iterator throws an endless stream of errors, and if\n        // the handler says to ignore them, then we loop forever here.  That is\n        // the correct behavior-- it's up to the handler to decide when to stop.\n      }\n    }\n  }\n}\nclass AsyncMapIterator extends LazyIterator {\n  constructor(upstream, transform) {\n    super();\n    this.upstream = upstream;\n    this.transform = transform;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> AsyncMap`;\n  }\n  async next() {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value);\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = await this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped);\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {\n      value: mapped,\n      done: false\n    };\n  }\n}\n// Iterators that maintain a queue of pending items\n// ============================================================================\n/**\n * A base class for transforming streams that operate by maintaining an\n * output queue of elements that are ready to return via next().  This is\n * commonly required when the transformation is 1-to-many:  A call to next()\n * may trigger a call to the underlying stream, which will produce many\n * mapped elements of this stream-- of which we need to return only one, so\n * we have to queue the rest.\n */\nexport class OneToManyIterator extends LazyIterator {\n  constructor() {\n    super();\n    this.outputQueue = new GrowingRingBuffer();\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  async serialNext() {\n    // Fetch so that the queue contains at least one item if possible.\n    // If the upstream source is exhausted, AND there are no items left in\n    // the output queue, then this stream is also exhausted.\n    while (this.outputQueue.length() === 0) {\n      // TODO(soergel): consider parallel reads.\n      if (!(await this.pump())) {\n        return {\n          value: null,\n          done: true\n        };\n      }\n    }\n    return {\n      value: this.outputQueue.shift(),\n      done: false\n    };\n  }\n}\nclass FlatmapIterator extends OneToManyIterator {\n  constructor(upstream, transform) {\n    super();\n    this.upstream = upstream;\n    this.transform = transform;\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Flatmap`;\n  }\n  async pump() {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return false;\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value);\n    // Careful: the transform may mutate the item in place.\n    // that's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying any\n    // intermediate Tensors.  Here we are concerned only about the inputs.\n    const mappedArray = this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mappedArray);\n    this.outputQueue.pushAll(mappedArray);\n    // TODO(soergel) faster intersection, and deduplicate outputTensors\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return true;\n  }\n}\n/**\n * Provides a `LazyIterator` that concatenates a stream of underlying\n * streams.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n */\nexport class ChainedIterator extends LazyIterator {\n  constructor(iterators, baseErrorHandler) {\n    super();\n    this.baseErrorHandler = baseErrorHandler;\n    // Strict Promise execution order:\n    // a next() call may not even begin until the previous one completes.\n    this.lastRead = null;\n    // Local state that should not be clobbered by out-of-order execution.\n    this.iterator = null;\n    this.moreIterators = iterators;\n  }\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of chained summaries';\n    return `${upstreamSummaries} -> Chained`;\n  }\n  async next() {\n    this.lastRead = this.readFromChain(this.lastRead);\n    return this.lastRead;\n  }\n  async readFromChain(lastRead) {\n    // Must await on the previous read since the previous read may have advanced\n    // the stream of streams, from which we need to read.\n    // This is unfortunate since we can't parallelize reads. Which means\n    // prefetching of chained streams is a no-op.\n    // One solution is to prefetch immediately upstream of this.\n    await lastRead;\n    if (this.iterator == null) {\n      const iteratorResult = await this.moreIterators.next();\n      if (iteratorResult.done) {\n        // No more streams to stream from.\n        return {\n          value: null,\n          done: true\n        };\n      }\n      this.iterator = iteratorResult.value;\n      if (this.baseErrorHandler != null) {\n        this.iterator = this.iterator.handleErrors(this.baseErrorHandler);\n      }\n    }\n    const itemResult = await this.iterator.next();\n    if (itemResult.done) {\n      this.iterator = null;\n      return this.readFromChain(lastRead);\n    }\n    return itemResult;\n  }\n}\nexport var ZipMismatchMode;\n(function (ZipMismatchMode) {\n  ZipMismatchMode[ZipMismatchMode[\"FAIL\"] = 0] = \"FAIL\";\n  ZipMismatchMode[ZipMismatchMode[\"SHORTEST\"] = 1] = \"SHORTEST\";\n  ZipMismatchMode[ZipMismatchMode[\"LONGEST\"] = 2] = \"LONGEST\"; // use nulls for exhausted streams; use up the longest stream.\n})(ZipMismatchMode || (ZipMismatchMode = {}));\n/**\n * Provides a `LazyIterator` that zips together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nclass ZipIterator extends LazyIterator {\n  constructor(iterators, mismatchMode = ZipMismatchMode.FAIL) {\n    super();\n    this.iterators = iterators;\n    this.mismatchMode = mismatchMode;\n    this.count = 0;\n    this.currentPromise = null;\n  }\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of zip summaries';\n    return `{${upstreamSummaries}} -> Zip`;\n  }\n  async nextState(afterState) {\n    // This chaining ensures that the underlying next() are not even called\n    // before the previous ones have resolved.\n    await afterState;\n    // Collect underlying iterator \"done\" signals as a side effect in\n    // getNext()\n    let numIterators = 0;\n    let iteratorsDone = 0;\n    function getNext(container) {\n      if (container instanceof LazyIterator) {\n        const result = container.next();\n        return {\n          value: result.then(x => {\n            numIterators++;\n            if (x.done) {\n              iteratorsDone++;\n            }\n            return x.value;\n          }),\n          recurse: false\n        };\n      } else {\n        return {\n          value: null,\n          recurse: true\n        };\n      }\n    }\n    const mapped = await deepMapAndAwaitAll(this.iterators, getNext);\n    if (numIterators === iteratorsDone) {\n      // The streams have all ended.\n      return {\n        value: null,\n        done: true\n      };\n    }\n    if (iteratorsDone > 0) {\n      switch (this.mismatchMode) {\n        case ZipMismatchMode.FAIL:\n          throw new Error('Zipped streams should have the same length. ' + `Mismatched at element ${this.count}.`);\n        case ZipMismatchMode.SHORTEST:\n          return {\n            value: null,\n            done: true\n          };\n        case ZipMismatchMode.LONGEST:\n        default:\n        // Continue.  The exhausted streams already produced value: null.\n      }\n    }\n    this.count++;\n    return {\n      value: mapped,\n      done: false\n    };\n  }\n  async next() {\n    this.currentPromise = this.nextState(this.currentPromise);\n    return this.currentPromise;\n  }\n}\n// Iterators that maintain a ring buffer of pending promises\n// ============================================================================\n/**\n * A stream that prefetches a given number of items from an upstream source,\n * returning them in FIFO order.\n *\n * Note this prefetches Promises, but makes no guarantees about when those\n * Promises resolve.\n */\nexport class PrefetchIterator extends LazyIterator {\n  constructor(upstream, bufferSize) {\n    super();\n    this.upstream = upstream;\n    this.bufferSize = bufferSize;\n    this.buffer = new RingBuffer(bufferSize);\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Prefetch`;\n  }\n  /**\n   * Refill the prefetch buffer.  Returns only after the buffer is full, or\n   * the upstream source is exhausted.\n   */\n  refill() {\n    while (!this.buffer.isFull()) {\n      const v = this.upstream.next();\n      this.buffer.push(v);\n    }\n  }\n  next() {\n    this.refill();\n    // This shift will never throw an error because the buffer is always\n    // full after a refill. If the stream is exhausted, the buffer will be\n    // full of Promises that will resolve to the end-of-stream signal.\n    return this.buffer.shift();\n  }\n}\n/**\n * A stream that performs a sliding-window random shuffle on an upstream\n * source. This is like a `PrefetchIterator` except that the items are\n * returned in randomized order.  Mixing naturally improves as the buffer\n * size increases.\n */\nexport class ShuffleIterator extends PrefetchIterator {\n  constructor(upstream, windowSize, seed) {\n    super(upstream, windowSize);\n    this.upstream = upstream;\n    this.windowSize = windowSize;\n    // Local state that should not be clobbered by out-of-order execution.\n    this.upstreamExhausted = false;\n    this.random = seedrandom.alea(seed || tf.util.now().toString());\n    this.lastRead = Promise.resolve({\n      value: null,\n      done: false\n    });\n  }\n  async next() {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n  randomInt(max) {\n    return Math.floor(this.random() * max);\n  }\n  chooseIndex() {\n    return this.randomInt(this.buffer.length());\n  }\n  async serialNext() {\n    // TODO(soergel): consider performance\n    if (!this.upstreamExhausted) {\n      this.refill();\n    }\n    while (!this.buffer.isEmpty()) {\n      const chosenIndex = this.chooseIndex();\n      const result = await this.buffer.shuffleExcise(chosenIndex);\n      if (result.done) {\n        this.upstreamExhausted = true;\n      } else {\n        this.refill();\n        return result;\n      }\n    }\n    return {\n      value: null,\n      done: true\n    };\n  }\n}","map":{"version":3,"names":["tf","seedrandom","deepClone","deepMapAndAwaitAll","deepZip","zipToList","GrowingRingBuffer","RingBuffer","iteratorFromItems","items","ArrayIterator","iteratorFromIncrementing","start","i","iteratorFromFunction","value","done","func","FunctionCallIterator","iteratorFromConcatenated","baseIterators","baseErrorHandler","ChainedIterator","iteratorFromConcatenatedFunction","iteratorFunc","count","take","iteratorFromZipped","iterators","mismatchMode","ZipMismatchMode","FAIL","ZipIterator","LazyIterator","toArray","result","x","next","push","toArrayForTest","stream","prefetch","resolveFully","resolveWhile","predicate","shouldContinue","handleErrors","handler","ErrorHandlingLazyIterator","filter","FilterIterator","map","transform","MapIterator","mapAsync","AsyncMapIterator","serialMapAsync","serial","flatmap","FlatmapIterator","forEachAsync","f","serialForEach","rowMajorBatch","batchSize","smallLastBatch","RowMajorBatchIterator","columnMajorBatch","zipFn","rowBatches","concatenate","iterator","TakeIterator","skip","SkipIterator","bufferSize","PrefetchIterator","shuffle","windowSize","seed","ShuffleIterator","SerialIterator","constructor","trav","summary","length","item","nextFn","e","message","upstream","lastRead","Promise","resolve","then","serialNext","maxCount","skipped","dispose","enableSmallLastBatch","batch","inputTensors","tensor_util","getTensorsInContainer","mapped","outputTensors","t","isTensorInList","OneToManyIterator","outputQueue","pump","shift","mappedArray","pushAll","moreIterators","upstreamSummaries","readFromChain","iteratorResult","itemResult","currentPromise","nextState","afterState","numIterators","iteratorsDone","getNext","container","recurse","Error","SHORTEST","LONGEST","buffer","refill","isFull","v","upstreamExhausted","random","alea","util","now","toString","randomInt","max","Math","floor","chooseIndex","isEmpty","chosenIndex","shuffleExcise"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-data/src/iterators/lazy_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {Container} from '../types';\nimport {deepClone} from '../util/deep_clone';\nimport {deepMapAndAwaitAll, DeepMapAsyncResult, DeepMapResult, deepZip, zipToList} from '../util/deep_map';\nimport {GrowingRingBuffer} from '../util/growing_ring_buffer';\nimport {RingBuffer} from '../util/ring_buffer';\n\n/**\n * A nested structure of LazyIterators, used as the input to zip().\n */\nexport type IteratorContainer = Container<LazyIterator<tf.TensorContainer>>;\n\n// Here we implement a simple asynchronous iterator.\n// This lets us avoid using either third-party stream libraries or\n// recent TypeScript language support requiring polyfills.\n\n/**\n * Create a `LazyIterator` from an array of items.\n */\nexport function iteratorFromItems<T>(items: T[]): LazyIterator<T> {\n  return new ArrayIterator(items);\n}\n\n/**\n * Create a `LazyIterator` of incrementing integers.\n */\nexport function iteratorFromIncrementing(start: number): LazyIterator<number> {\n  let i = start;\n  return iteratorFromFunction(() => ({value: i++, done: false}));\n}\n\n/**\n * Create a `LazyIterator` from a function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * await iter.forEachAsync(e => console.log(e));\n * ```\n *\n * @param func A function that produces data on each call.\n */\nexport function iteratorFromFunction<T>(\n    func: () =>\n        IteratorResult<T>| Promise<IteratorResult<T>>): LazyIterator<T> {\n  return new FunctionCallIterator(func);\n}\n\n/**\n * Create a `LazyIterator` by concatenating underlying streams, which are\n * themselves provided as a stream.\n *\n * This can also be thought of as a \"stream flatten\" operation.\n *\n * @param baseIterators A stream of streams to be concatenated.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenated<T>(\n    baseIterators: LazyIterator<LazyIterator<T>>,\n    baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n  return new ChainedIterator(baseIterators, baseErrorHandler);\n}\n\n/**\n * Create a `LazyIterator` by concatenating streams produced by calling a\n * stream-generating function a given number of times.\n *\n * Since a `LazyIterator` is read-once, it cannot be repeated, but this\n * function can be used to achieve a similar effect:\n *\n *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);\n *\n * @param iteratorFunc: A function that produces a new stream on each call.\n * @param count: The number of times to call the function.\n * @param baseErrorHandler An optional function that can intercept `Error`s\n *   raised during a `next()` call on the base stream.  This function can decide\n *   whether the error should be propagated, whether the error should be\n *   ignored, or whether the base stream should be terminated.\n */\nexport function iteratorFromConcatenatedFunction<T>(\n    iteratorFunc: () => IteratorResult<LazyIterator<T>>, count: number,\n    baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n  return iteratorFromConcatenated(\n      iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);\n}\n\n/**\n * Create a `LazyIterator` by zipping together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nexport function iteratorFromZipped<O extends tf.TensorContainer>(\n    iterators: IteratorContainer,\n    mismatchMode: ZipMismatchMode = ZipMismatchMode.FAIL): LazyIterator<O> {\n  return new ZipIterator<O>(iterators, mismatchMode);\n}\n\n/**\n * An asynchronous iterator, providing lazy access to a potentially\n * unbounded stream of elements.\n *\n * Iterator can be obtained from a dataset:\n * `const iter = await dataset.iterator();`\n */\nexport abstract class LazyIterator<T> {\n  // This class implements AsyncIterator<T>, but we have not yet set the\n  // TypeScript --downlevelIteration flag to enable that.\n\n  abstract summary(): string;\n\n  /**\n   * Returns a `Promise` for the next element in the stream.\n   *\n   * When an item can be provided successfully, the return value is\n   * `{value:T, done:false}`.\n   *\n   * Calling next() on a closed stream returns `{value:null, done:true}`.\n   */\n  abstract next(): Promise<IteratorResult<T>>;\n\n  /**\n   * Collect all remaining elements of a bounded stream into an array.\n   * Obviously this will succeed only for small streams that fit in memory.\n   * Useful for testing.\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArray(): Promise<T[]> {\n    const result: T[] = [];\n    let x = await this.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await this.next();\n    }\n    return result;\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of stream elements, which will resolve\n   *   when the stream is exhausted.\n   */\n  async toArrayForTest(): Promise<T[]> {\n    const stream = this.prefetch(100);\n    const result: T[] = [];\n    let x = await stream.next();\n    while (!x.done) {\n      result.push(x.value);\n      x = await stream.next();\n    }\n    return result;\n  }\n\n  /**\n   * Draw items from the stream until it is exhausted.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveFully(): Promise<void> {\n    let x = await this.next();\n    while (!x.done) {\n      x = await this.next();\n    }\n  }\n\n  /**\n   * Draw items from the stream until it is exhausted, or a predicate fails.\n   *\n   * This can be useful when the stream has side effects but no output.  In\n   * that case, calling this function guarantees that the stream will be\n   * fully processed.\n   */\n  async resolveWhile(predicate: (r: T) => boolean): Promise<void> {\n    let x = await this.next();\n    let shouldContinue = predicate(x.value);\n    while ((!x.done) && shouldContinue) {\n      x = await this.next();\n      shouldContinue = predicate(x.value);\n    }\n  }\n\n  /**\n   * Handles errors thrown on this stream using a provided handler function.\n   *\n   * @param handler A function that handles any `Error` thrown during a `next()`\n   *   call and returns true if the stream should continue (dropping the failed\n   *   call) or false if the stream should quietly terminate.  If the handler\n   *   itself throws (or rethrows) an `Error`, that will be propagated.\n   *\n   * @returns A `LazyIterator` of elements passed through from upstream,\n   *   possibly filtering or terminating on upstream `next()` calls that\n   *   throw an `Error`.\n   */\n  handleErrors(handler: (error: Error) => boolean): LazyIterator<T> {\n    return new ErrorHandlingLazyIterator(this, handler);\n  }\n\n  // TODO(soergel): Implement reduce() etc.\n\n  /**\n   * Filters this stream according to `predicate`.\n   *\n   * @param predicate A function mapping a stream element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `LazyIterator` of elements for which the predicate was true.\n   */\n  filter(predicate: (value: T) => boolean): LazyIterator<T> {\n    return new FilterIterator(this, predicate);\n  }\n\n  /**\n   * Maps this stream through a 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  map<O>(transform: (value: T) => O): LazyIterator<O> {\n    return new MapIterator(this, transform);\n  }\n\n  /**\n   * Maps this stream through an async 1-to-1 transform.\n   *\n   * @param transform A function mapping a stream element to a `Promise` for a\n   *   transformed stream element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  mapAsync<O>(transform: (value: T) => Promise<O>): LazyIterator<O> {\n    return new AsyncMapIterator(this, transform);\n  }\n\n  /**\n   * Maps this stream through a 1-to-1 transform, forcing serial execution.\n   *\n   * @param transform A function mapping a stream element to a transformed\n   *   element.\n   *\n   * @returns A `LazyIterator` of transformed elements.\n   */\n  serialMapAsync<O>(transform: (value: T) => Promise<O>): LazyIterator<O> {\n    return new AsyncMapIterator(this, transform).serial();\n  }\n\n  /**\n   * Maps this stream through a 1-to-many transform.\n   *\n   * @param transform A function mapping a stream element to an array of\n   *   transformed elements.\n   *\n   * @returns A `DataStream` of transformed elements.\n   */\n  flatmap<O>(transform: (value: T) => O[]): LazyIterator<O> {\n    return new FlatmapIterator(this, transform);\n  }\n\n  /**\n   * Apply a function to every element of the stream.\n   *\n   * @param f A function to apply to each stream element.\n   */\n  async forEachAsync(f: (value: T) => void): Promise<void> {\n    return this.map(f).resolveFully();\n  }\n\n  /**\n   * Apply a function to every element of the stream, forcing serial execution.\n   *\n   * @param f A function to apply to each stream element.  Should return 'true'\n   *   to indicate that the stream should continue, or 'false' to cause it to\n   *   terminate.\n   */\n  async serialForEach(f: (value: T) => Promise<boolean>): Promise<void> {\n    return this.serialMapAsync(f).resolveWhile(x => (x === true));\n  }\n\n  /**\n   * Groups elements into batches, represented as arrays of elements.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"Row-major\" means that the resulting batch is simply a collection of\n   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major\n   * form, which is needed for vectorized computation.\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `LazyIterator` of batches of elements, represented as arrays\n   *   of the original element type.\n   */\n  rowMajorBatch(batchSize: number, smallLastBatch = true): LazyIterator<T[]> {\n    return new RowMajorBatchIterator(this, batchSize, smallLastBatch);\n  }\n\n  /**\n   * Groups elements into batches, represented in column-major form.\n   *\n   * We can think of the elements of this iterator as 'rows' (even if they are\n   * nested structures).  By the same token, consecutive values for a given\n   * key within the elements form a 'column'.  This matches the usual sense of\n   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).\n   *\n   * Thus, \"column-major\" means that the resulting batch is a (potentially\n   * nested) structure representing the columns.  Each column entry, then,\n   * contains a collection of the values found in that column for a range of\n   * input elements.  This representation allows for vectorized computation, in\n   * contrast to the row-major form.\n   *\n   * The inputs should all have the same nested structure (i.e., of arrays and\n   * dicts).  The result is a single object with the same nested structure,\n   * where the leaves are arrays collecting the values of the inputs at that\n   * location (or, optionally, the result of a custom function applied to those\n   * arrays).\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @param zipFn: (optional) A function that expects an array of elements at a\n   *   single node of the object tree, and returns a `DeepMapResult`.  The\n   *   `DeepMapResult` either provides a result value for that node (i.e.,\n   *   representing the subtree), or indicates that the node should be processed\n   *   recursively.  The default zipFn recurses as far as possible and places\n   *   arrays at the leaves.\n   * @returns A `LazyIterator` of batches of elements, represented as an object\n   *   with collections at the leaves.\n   */\n  columnMajorBatch(\n      batchSize: number, smallLastBatch = true,\n      // tslint:disable-next-line:no-any\n      zipFn: (xs: any[]) => DeepMapResult = zipToList):\n      LazyIterator<tf.TensorContainer> {\n    // First collect the desired number of input elements as a row-major batch.\n    const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);\n    // Now 'rotate' or 'pivot' the data, collecting all values from each column\n    // in the batch (i.e., for each key within the elements) into an array.\n    return rowBatches.map(x => deepZip(x, zipFn));\n  }\n\n  /**\n   * Concatenate this `LazyIterator` with another.\n   *\n   * @param iterator A `LazyIterator` to be concatenated onto this one.\n   * @param baseErrorHandler An optional function that can intercept `Error`s\n   *   raised during a `next()` call on the base stream.  This function can\n   *   decide whether the error should be propagated, whether the error should\n   *   be ignored, or whether the base stream should be terminated.\n   * @returns A `LazyIterator`.\n   */\n  concatenate(\n      iterator: LazyIterator<T>,\n      baseErrorHandler?: (e: Error) => boolean): LazyIterator<T> {\n    return new ChainedIterator(\n        iteratorFromItems([this, iterator]), baseErrorHandler);\n  }\n\n  /**\n   * Limits this stream to return at most `count` items.\n   *\n   * @param count The maximum number of items to provide from the stream. If\n   * a negative or undefined value is given, the entire stream is returned\n   *   unaltered.\n   */\n  take(count: number): LazyIterator<T> {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new TakeIterator(this, count);\n  }\n\n  /**\n   * Skips the first `count` items in this stream.\n   *\n   * @param count The number of items to skip.  If a negative or undefined\n   * value is given, the entire stream is returned unaltered.\n   */\n  skip(count: number): LazyIterator<T> {\n    if (count < 0 || count == null) {\n      return this;\n    }\n    return new SkipIterator(this, count);\n  }\n\n  /**\n   * Prefetch the first `bufferSize` items in this stream.\n   *\n   * Note this prefetches Promises, but makes no guarantees about when those\n   * Promises resolve.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   */\n  prefetch(bufferSize: number): LazyIterator<T> {\n    return new PrefetchIterator(this, bufferSize);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  /**\n   * Randomly shuffles the elements of this stream.\n   *\n   * @param bufferSize: An integer specifying the number of elements from\n   * this stream from which the new stream will sample.\n   * @param seed: (Optional.) An integer specifying the random seed that\n   * will be used to create the distribution.\n   */\n  shuffle(windowSize: number, seed?: string): LazyIterator<T> {\n    return new ShuffleIterator(this, windowSize, seed);\n  }\n\n  /**\n   * Force an iterator to execute serially: each next() call will await the\n   * prior one, so that they cannot execute concurrently.\n   */\n  serial(): LazyIterator<T> {\n    return new SerialIterator(this);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on LazyIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n\n// Iterators that just extend LazyIterator directly\n// ============================================================================\n\nclass ArrayIterator<T> extends LazyIterator<T> {\n  private trav = 0;\n  constructor(protected items: T[]) {\n    super();\n  }\n\n  summary() {\n    return `Array of ${this.items.length} items`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    if (this.trav >= this.items.length) {\n      return {value: null, done: true};\n    }\n    const item = this.items[this.trav];\n    this.trav++;\n    return {value: deepClone(item), done: false};\n  }\n}\n\nclass FunctionCallIterator<T> extends LazyIterator<T> {\n  constructor(\n      protected nextFn: () => IteratorResult<T>| Promise<IteratorResult<T>>) {\n    super();\n  }\n\n  summary() {\n    return `Function call`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    try {\n      return this.nextFn();\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message =\n          `Error thrown while iterating through a dataset: ${e.message}`;\n      throw e;\n    }\n  }\n}\n\nclass SerialIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  constructor(protected upstream: LazyIterator<T>) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Serial`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    return this.upstream.next();\n  }\n}\n\nclass SkipIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  count = 0;\n\n  constructor(protected upstream: LazyIterator<T>, protected maxCount: number) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Skip`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    // TODO(soergel): consider tradeoffs of reading in parallel, eg.\n    // collecting next() promises in an Array and then waiting for\n    // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:\n    // maybe delayed GC.\n    while (this.count++ < this.maxCount) {\n      const skipped = await this.upstream.next();\n      // short-circuit if upstream is already empty\n      if (skipped.done) {\n        return skipped;\n      }\n      tf.dispose(skipped.value as {});\n    }\n    return this.upstream.next();\n  }\n}\n\nclass TakeIterator<T> extends LazyIterator<T> {\n  count = 0;\n  constructor(protected upstream: LazyIterator<T>, protected maxCount: number) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Take`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    if (this.count++ >= this.maxCount) {\n      return {value: null, done: true};\n    }\n    return this.upstream.next();\n  }\n}\n\n// Note this batch just groups items into row-wise element arrays.\n// Rotating these to a column-wise representation happens only at the dataset\n// level.\nclass RowMajorBatchIterator<T> extends LazyIterator<T[]> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T[]>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected batchSize: number,\n      protected enableSmallLastBatch = true) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> RowMajorBatch`;\n  }\n\n  async next(): Promise<IteratorResult<T[]>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T[]>> {\n    const batch: T[] = [];\n    while (batch.length < this.batchSize) {\n      const item = await this.upstream.next();\n      if (item.done) {\n        if (this.enableSmallLastBatch && batch.length > 0) {\n          return {value: batch, done: false};\n        }\n        return {value: null, done: true};\n      }\n      batch.push(item.value);\n    }\n    return {value: batch, done: false};\n  }\n}\n\nclass FilterIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>,\n      protected predicate: (value: T) => boolean) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Filter`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private async serialNext(): Promise<IteratorResult<T>> {\n    while (true) {\n      const item = await this.upstream.next();\n      if (item.done || this.predicate(item.value)) {\n        return item;\n      }\n      tf.dispose(item.value as {});\n    }\n  }\n}\n\nclass MapIterator<I, O> extends LazyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => O) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Map`;\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {value: null, done: true};\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped as {});\n\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {value: mapped, done: false};\n  }\n}\n\nclass ErrorHandlingLazyIterator<T> extends LazyIterator<T> {\n  count = 0;\n  constructor(\n      protected upstream: LazyIterator<T>,\n      protected handler: (error: Error) => boolean) {\n    super();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> handleErrors`;\n  }\n\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    while (true) {\n      try {\n        return await this.upstream.next();\n      } catch (e) {\n        if (!this.handler(e)) {\n          return {value: null, done: true};\n        }\n        // If the handler returns true, loop and fetch the next upstream item.\n\n        // If the upstream iterator throws an endless stream of errors, and if\n        // the handler says to ignore them, then we loop forever here.  That is\n        // the correct behavior-- it's up to the handler to decide when to stop.\n      }\n    }\n  }\n}\n\nclass AsyncMapIterator<I, O> extends LazyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => Promise<O>) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> AsyncMap`;\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return {value: null, done: true};\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // That's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying\n    // any intermediate Tensors.  Here we are concerned only about the\n    // inputs.\n    const mapped = await this.transform(item.value);\n    const outputTensors = tf.tensor_util.getTensorsInContainer(mapped as {});\n\n    // TODO(soergel) faster intersection\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n    return {value: mapped, done: false};\n  }\n}\n\n// Iterators that maintain a queue of pending items\n// ============================================================================\n\n/**\n * A base class for transforming streams that operate by maintaining an\n * output queue of elements that are ready to return via next().  This is\n * commonly required when the transformation is 1-to-many:  A call to next()\n * may trigger a call to the underlying stream, which will produce many\n * mapped elements of this stream-- of which we need to return only one, so\n * we have to queue the rest.\n */\nexport abstract class OneToManyIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  protected outputQueue: RingBuffer<T>;\n\n  constructor() {\n    super();\n    this.outputQueue = new GrowingRingBuffer<T>();\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  /**\n   * Read one or more chunks from upstream and process them, possibly\n   * reading or writing a carryover, and adding processed items to the\n   * output queue.  Note it's possible that no items are added to the queue\n   * on a given pump() call, even if the upstream stream is not closed\n   * (e.g., because items are filtered).\n   *\n   * @return `true` if any action was taken, i.e. fetching items from the\n   *   upstream source OR adding items to the output queue.  `false` if the\n   *   upstream source is exhausted AND nothing was added to the queue\n   * (i.e., any remaining carryover).\n   */\n  protected abstract pump(): Promise<boolean>;\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    // Fetch so that the queue contains at least one item if possible.\n    // If the upstream source is exhausted, AND there are no items left in\n    // the output queue, then this stream is also exhausted.\n    while (this.outputQueue.length() === 0) {\n      // TODO(soergel): consider parallel reads.\n      if (!await this.pump()) {\n        return {value: null, done: true};\n      }\n    }\n    return {value: this.outputQueue.shift(), done: false};\n  }\n}\nclass FlatmapIterator<I, O> extends OneToManyIterator<O> {\n  constructor(\n      protected upstream: LazyIterator<I>,\n      protected transform: (value: I) => O[]) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Flatmap`;\n  }\n\n  async pump(): Promise<boolean> {\n    const item = await this.upstream.next();\n    if (item.done) {\n      return false;\n    }\n    const inputTensors = tf.tensor_util.getTensorsInContainer(item.value as {});\n    // Careful: the transform may mutate the item in place.\n    // that's why we have to remember the input Tensors above, and then\n    // below dispose only those that were not passed through to the output.\n    // Note too that the transform function is responsible for tidying any\n    // intermediate Tensors.  Here we are concerned only about the inputs.\n    const mappedArray = this.transform(item.value);\n    const outputTensors =\n        tf.tensor_util.getTensorsInContainer(mappedArray as {});\n    this.outputQueue.pushAll(mappedArray);\n\n    // TODO(soergel) faster intersection, and deduplicate outputTensors\n    // TODO(soergel) move to tf.disposeExcept(in, out)?\n    for (const t of inputTensors) {\n      if (!tf.tensor_util.isTensorInList(t, outputTensors)) {\n        t.dispose();\n      }\n    }\n\n    return true;\n  }\n}\n\n/**\n * Provides a `LazyIterator` that concatenates a stream of underlying\n * streams.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n */\nexport class ChainedIterator<T> extends LazyIterator<T> {\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>> = null;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  private iterator: LazyIterator<T> = null;\n  private moreIterators: LazyIterator<LazyIterator<T>>;\n\n  constructor(\n      iterators: LazyIterator<LazyIterator<T>>,\n      private readonly baseErrorHandler?: (e: Error) => boolean) {\n    super();\n    this.moreIterators = iterators;\n  }\n\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of chained summaries';\n    return `${upstreamSummaries} -> Chained`;\n  }\n\n  async next(): Promise<IteratorResult<T>> {\n    this.lastRead = this.readFromChain(this.lastRead);\n    return this.lastRead;\n  }\n\n  private async readFromChain(lastRead: Promise<IteratorResult<T>>):\n      Promise<IteratorResult<T>> {\n    // Must await on the previous read since the previous read may have advanced\n    // the stream of streams, from which we need to read.\n    // This is unfortunate since we can't parallelize reads. Which means\n    // prefetching of chained streams is a no-op.\n    // One solution is to prefetch immediately upstream of this.\n    await lastRead;\n    if (this.iterator == null) {\n      const iteratorResult = await this.moreIterators.next();\n      if (iteratorResult.done) {\n        // No more streams to stream from.\n        return {value: null, done: true};\n      }\n      this.iterator = iteratorResult.value;\n      if (this.baseErrorHandler != null) {\n        this.iterator = this.iterator.handleErrors(this.baseErrorHandler);\n      }\n    }\n    const itemResult = await this.iterator.next();\n    if (itemResult.done) {\n      this.iterator = null;\n      return this.readFromChain(lastRead);\n    }\n    return itemResult;\n  }\n}\n\nexport enum ZipMismatchMode {\n  FAIL,      // require zipped streams to have the same length\n  SHORTEST,  // terminate zip when the first stream is exhausted\n  LONGEST    // use nulls for exhausted streams; use up the longest stream.\n}\n\n/**\n * Provides a `LazyIterator` that zips together an array, dict, or nested\n * structure of `LazyIterator`s (and perhaps additional constants).\n *\n * The underlying streams must provide elements in a consistent order such\n * that they correspond.\n *\n * Typically, the underlying streams should have the same number of\n * elements. If they do not, the behavior is determined by the\n * `mismatchMode` argument.\n *\n * The nested structure of the `iterators` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Doing this in a concurrency-safe way requires some trickery.  In\n * particular, we want this stream to return the elements from the\n * underlying streams in the correct order according to when next() was\n * called, even if the resulting Promises resolve in a different order.\n *\n * @param iterators: An array or object containing LazyIterators at the\n * leaves.\n * @param mismatchMode: Determines what to do when one underlying iterator\n * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)\n * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`\n * causes the zipped iterator to terminate with the furst underlying\n * streams, so elements remaining on the longer streams are ignored.\n * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling\n * in nulls for the exhausted streams, until all streams are exhausted.\n */\nclass ZipIterator<O extends tf.TensorContainer> extends LazyIterator<O> {\n  private count = 0;\n  private currentPromise: Promise<IteratorResult<O>> = null;\n\n  constructor(\n      protected readonly iterators: IteratorContainer,\n      protected readonly mismatchMode: ZipMismatchMode = ZipMismatchMode.FAIL) {\n    super();\n  }\n\n  summary() {\n    const upstreamSummaries = 'TODO: fill in upstream of zip summaries';\n    return `{${upstreamSummaries}} -> Zip`;\n  }\n\n  private async nextState(afterState: Promise<IteratorResult<O>>):\n      Promise<IteratorResult<O>> {\n    // This chaining ensures that the underlying next() are not even called\n    // before the previous ones have resolved.\n    await afterState;\n\n    // Collect underlying iterator \"done\" signals as a side effect in\n    // getNext()\n    let numIterators = 0;\n    let iteratorsDone = 0;\n\n    function getNext(container: IteratorContainer): DeepMapAsyncResult {\n      if (container instanceof LazyIterator) {\n        const result = container.next();\n        return {\n          value: result.then(x => {\n            numIterators++;\n            if (x.done) {\n              iteratorsDone++;\n            }\n            return x.value;\n          }),\n          recurse: false\n        };\n      } else {\n        return {value: null, recurse: true};\n      }\n    }\n\n    const mapped: O = await deepMapAndAwaitAll(this.iterators, getNext);\n\n    if (numIterators === iteratorsDone) {\n      // The streams have all ended.\n      return {value: null, done: true};\n    }\n    if (iteratorsDone > 0) {\n      switch (this.mismatchMode) {\n        case ZipMismatchMode.FAIL:\n          throw new Error(\n              'Zipped streams should have the same length. ' +\n              `Mismatched at element ${this.count}.`);\n        case ZipMismatchMode.SHORTEST:\n          return {value: null, done: true};\n        case ZipMismatchMode.LONGEST:\n        default:\n          // Continue.  The exhausted streams already produced value: null.\n      }\n    }\n\n    this.count++;\n    return {value: mapped, done: false};\n  }\n\n  async next(): Promise<IteratorResult<O>> {\n    this.currentPromise = this.nextState(this.currentPromise);\n    return this.currentPromise;\n  }\n}\n\n// Iterators that maintain a ring buffer of pending promises\n// ============================================================================\n\n/**\n * A stream that prefetches a given number of items from an upstream source,\n * returning them in FIFO order.\n *\n * Note this prefetches Promises, but makes no guarantees about when those\n * Promises resolve.\n */\nexport class PrefetchIterator<T> extends LazyIterator<T> {\n  protected buffer: RingBuffer<Promise<IteratorResult<T>>>;\n\n  constructor(\n      protected upstream: LazyIterator<T>, protected bufferSize: number) {\n    super();\n    this.buffer = new RingBuffer<Promise<IteratorResult<T>>>(bufferSize);\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Prefetch`;\n  }\n\n  /**\n   * Refill the prefetch buffer.  Returns only after the buffer is full, or\n   * the upstream source is exhausted.\n   */\n  protected refill() {\n    while (!this.buffer.isFull()) {\n      const v = this.upstream.next();\n      this.buffer.push(v);\n    }\n  }\n\n  next(): Promise<IteratorResult<T>> {\n    this.refill();\n    // This shift will never throw an error because the buffer is always\n    // full after a refill. If the stream is exhausted, the buffer will be\n    // full of Promises that will resolve to the end-of-stream signal.\n    return this.buffer.shift();\n  }\n}\n\n/**\n * A stream that performs a sliding-window random shuffle on an upstream\n * source. This is like a `PrefetchIterator` except that the items are\n * returned in randomized order.  Mixing naturally improves as the buffer\n * size increases.\n */\nexport class ShuffleIterator<T> extends PrefetchIterator<T> {\n  private readonly random: seedrandom.prng;\n\n  // Strict Promise execution order:\n  // a next() call may not even begin until the previous one completes.\n  private lastRead: Promise<IteratorResult<T>>;\n\n  // Local state that should not be clobbered by out-of-order execution.\n  private upstreamExhausted = false;\n\n  constructor(\n    protected override upstream: LazyIterator<T>, protected windowSize: number,\n      seed?: string) {\n    super(upstream, windowSize);\n    this.random = seedrandom.alea(seed || tf.util.now().toString());\n    this.lastRead = Promise.resolve({value: null, done: false});\n  }\n\n  override async next(): Promise<IteratorResult<T>> {\n    // This sets this.lastRead to a new Promise right away, as opposed to\n    // saying `await this.lastRead; this.lastRead = this.serialNext();` which\n    // would not work because this.nextRead would be updated only after the\n    // promise resolves.\n    this.lastRead = this.lastRead.then(() => this.serialNext());\n    return this.lastRead;\n  }\n\n  private randomInt(max: number) {\n    return Math.floor(this.random() * max);\n  }\n\n  protected chooseIndex(): number {\n    return this.randomInt(this.buffer.length());\n  }\n\n  async serialNext(): Promise<IteratorResult<T>> {\n    // TODO(soergel): consider performance\n    if (!this.upstreamExhausted) {\n      this.refill();\n    }\n    while (!this.buffer.isEmpty()) {\n      const chosenIndex = this.chooseIndex();\n      const result = await this.buffer.shuffleExcise(chosenIndex);\n      if (result.done) {\n        this.upstreamExhausted = true;\n      } else {\n        this.refill();\n        return result;\n      }\n    }\n    return {value: null, done: true};\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}