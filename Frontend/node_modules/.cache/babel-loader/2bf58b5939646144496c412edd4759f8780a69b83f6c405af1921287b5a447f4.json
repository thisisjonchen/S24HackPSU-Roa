{"ast":null,"code":"/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization, unstack, stack, tensor, tidy, range, image } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { Layer } from '../../engine/topology';\nimport * as K from '../../backend/tfjs_backend';\nconst {\n  resizeBilinear,\n  cropAndResize\n} = image;\nclass CenterCrop extends Layer {\n  constructor(args) {\n    super(args);\n    this.height = args.height;\n    this.width = args.width;\n  }\n  centerCrop(inputs, hBuffer, wBuffer, height, width, inputHeight, inputWidth, dtype) {\n    return tidy(() => {\n      let input;\n      let isRank3 = false;\n      const top = hBuffer / inputHeight;\n      const left = wBuffer / inputWidth;\n      const bottom = (height + hBuffer) / inputHeight;\n      const right = (width + wBuffer) / inputWidth;\n      const bound = [top, left, bottom, right];\n      const boxesArr = [];\n      if (inputs.rank === 3) {\n        isRank3 = true;\n        input = stack([inputs]);\n      } else {\n        input = inputs;\n      }\n      for (let i = 0; i < input.shape[0]; i++) {\n        boxesArr.push(bound);\n      }\n      const boxes = tensor(boxesArr, [boxesArr.length, 4]);\n      const boxInd = range(0, boxesArr.length, 1, 'int32');\n      const cropSize = [height, width];\n      const cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');\n      if (isRank3) {\n        return K.cast(getExactlyOneTensor(unstack(cropped)), dtype);\n      }\n      return K.cast(cropped, dtype);\n    });\n  }\n  upsize(inputs, height, width, dtype) {\n    return tidy(() => {\n      const outputs = resizeBilinear(inputs, [height, width]);\n      return K.cast(outputs, dtype);\n    });\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const rankedInputs = getExactlyOneTensor(inputs);\n      const dtype = rankedInputs.dtype;\n      const inputShape = rankedInputs.shape;\n      const inputHeight = inputShape[inputShape.length - 3];\n      const inputWidth = inputShape[inputShape.length - 2];\n      let hBuffer = 0;\n      if (inputHeight !== this.height) {\n        hBuffer = Math.floor((inputHeight - this.height) / 2);\n      }\n      let wBuffer = 0;\n      if (inputWidth !== this.width) {\n        wBuffer = Math.floor((inputWidth - this.width) / 2);\n        if (wBuffer === 0) {\n          wBuffer = 1;\n        }\n      }\n      if (hBuffer >= 0 && wBuffer >= 0) {\n        return this.centerCrop(rankedInputs, hBuffer, wBuffer, this.height, this.width, inputHeight, inputWidth, dtype);\n      } else {\n        return this.upsize(inputs, this.height, this.width, dtype);\n      }\n    });\n  }\n  getConfig() {\n    const config = {\n      'height': this.height,\n      'width': this.width\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const hAxis = inputShape.length - 3;\n    const wAxis = inputShape.length - 2;\n    inputShape[hAxis] = this.height;\n    inputShape[wAxis] = this.width;\n    return inputShape;\n  }\n}\n/** @nocollapse */\nCenterCrop.className = 'CenterCrop';\nexport { CenterCrop };\nserialization.registerClass(CenterCrop);","map":{"version":3,"names":["serialization","unstack","stack","tensor","tidy","range","image","getExactlyOneShape","getExactlyOneTensor","Layer","K","resizeBilinear","cropAndResize","CenterCrop","constructor","args","height","width","centerCrop","inputs","hBuffer","wBuffer","inputHeight","inputWidth","dtype","input","isRank3","top","left","bottom","right","bound","boxesArr","rank","i","shape","push","boxes","length","boxInd","cropSize","cropped","cast","upsize","outputs","call","kwargs","rankedInputs","inputShape","Math","floor","getConfig","config","baseConfig","Object","assign","computeOutputShape","hAxis","wAxis","className","registerClass"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/layers/preprocessing/center_crop.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {serialization,DataType,unstack,stack,tensor,Tensor,Tensor1D,Tensor2D, Tensor3D, Tensor4D, tidy, range, image} from '@tensorflow/tfjs-core';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../../utils/types_utils';\nimport {LayerArgs, Layer} from '../../engine/topology';\nimport {Kwargs} from '../../types';\nimport {Shape} from '../../keras_format/common';\nimport * as K from '../../backend/tfjs_backend';\n\nconst {resizeBilinear, cropAndResize} = image;\n\nexport declare interface CenterCropArgs extends LayerArgs{\n  height: number;\n  width: number;\n}\n\nexport class CenterCrop extends Layer {\n  /** @nocollapse */\n  static className = 'CenterCrop';\n  private readonly height: number;\n  private readonly width: number;\n  constructor(args: CenterCropArgs) {\n    super(args);\n    this.height = args.height;\n    this.width = args.width;\n  }\n\n  centerCrop(inputs: Tensor3D | Tensor4D, hBuffer: number, wBuffer: number,\n            height: number, width: number, inputHeight: number,\n            inputWidth: number, dtype: DataType): Tensor | Tensor[] {\n\n    return tidy(() => {\n      let input: Tensor4D;\n      let isRank3      = false;\n      const top      = hBuffer / inputHeight;\n      const left     = wBuffer / inputWidth;\n      const bottom   = ((height) + hBuffer) / inputHeight;\n      const right    = ((width) + wBuffer) / inputWidth;\n      const bound    = [top, left, bottom, right];\n      const boxesArr = [];\n\n      if(inputs.rank === 3) {\n        isRank3  = true;\n        input  = stack([inputs]) as Tensor4D;\n      } else {\n        input = inputs as Tensor4D;\n      }\n\n      for (let i = 0; i < input.shape[0]; i++) {\n        boxesArr.push(bound);\n      }\n\n      const boxes: Tensor2D  = tensor(boxesArr, [boxesArr.length, 4]);\n      const boxInd: Tensor1D = range(0, boxesArr.length, 1, 'int32');\n\n      const cropSize: [number, number] = [height, width];\n      const cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');\n\n      if(isRank3) {\n        return K.cast(getExactlyOneTensor(unstack(cropped)), dtype);\n      }\n      return K.cast(cropped, dtype);\n   });\n\n  }\n\n  upsize(inputs : Tensor3D | Tensor4D, height: number,\n         width: number, dtype: DataType): Tensor | Tensor[] {\n\n    return tidy(() => {\n      const outputs = resizeBilinear(inputs, [height, width]);\n      return K.cast(outputs, dtype);\n  });\n\n}\n\n  override call(inputs: Tensor3D | Tensor4D , kwargs: Kwargs):\n      Tensor[] | Tensor {\n    return tidy(() => {\n      const rankedInputs = getExactlyOneTensor(inputs) as Tensor3D | Tensor4D;\n      const dtype       = rankedInputs.dtype;\n      const inputShape  = rankedInputs.shape;\n      const inputHeight = inputShape[inputShape.length - 3];\n      const inputWidth  =  inputShape[inputShape.length - 2];\n\n      let hBuffer = 0;\n      if (inputHeight !== this.height) {\n        hBuffer =  Math.floor((inputHeight - this.height) / 2);\n      }\n\n      let wBuffer = 0;\n      if (inputWidth !== this.width) {\n        wBuffer = Math.floor((inputWidth - this.width) / 2);\n\n        if (wBuffer === 0) {\n          wBuffer = 1;\n        }\n      }\n\n      if(hBuffer >= 0 && wBuffer >= 0) {\n        return this.centerCrop(rankedInputs, hBuffer, wBuffer,\n                              this.height, this.width, inputHeight,\n                              inputWidth, dtype);\n      } else {\n        return this.upsize(inputs, this.height, this.width, dtype);\n      }\n   });\n\n  }\n\n  override getConfig(): serialization.ConfigDict{\n\n    const config: serialization.ConfigDict = {\n      'height' : this.height,\n      'width' : this.width\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override computeOutputShape(inputShape: Shape | Shape[]): Shape | Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const hAxis = inputShape.length - 3;\n    const wAxis = inputShape.length - 2;\n    inputShape[hAxis] = this.height;\n    inputShape[wAxis] = this.width;\n    return inputShape;\n  }\n}\n\nserialization.registerClass(CenterCrop);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}