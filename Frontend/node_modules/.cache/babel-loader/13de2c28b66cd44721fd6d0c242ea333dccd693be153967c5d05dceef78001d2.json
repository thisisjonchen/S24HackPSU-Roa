{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class AvgPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}","map":{"version":3,"names":["AvgPool2DBackpropProgram","constructor","convInfo","variableNames","outputShape","inShape","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","userCode","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}