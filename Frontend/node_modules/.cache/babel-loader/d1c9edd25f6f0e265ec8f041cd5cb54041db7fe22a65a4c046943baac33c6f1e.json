{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"names":["backend_util","SparseToDense","util","scatterImplCPU","ScatterProgram","reshape","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","sumDupeIndices","dtype","indicesBuf","bufferSync","updatesBuf","$defaultValue","decodeString","readSync","dataId","outBuf","makeTensorInfo","values","program","shape","length","res","runWebGLProgram","reshaped","x","disposeIntermediateTensorInfo","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/SparseToDense.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAkCC,aAAa,EAAuDC,IAAI,QAAO,uBAAuB;AAG5J,SAAQC,cAAc,QAAO,wBAAwB;AACrD,SAAQC,cAAc,QAAO,gBAAgB;AAE7C,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,aAAa;IAAEC,YAAY;IAAEC;EAAY,CAAC,GAAGL,MAAM;EAC1D,MAAM;IAACM;EAAW,CAAC,GAAGJ,KAAK;EAE3B,MAAM;IAACK,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAU,CAAC,GACzDnB,YAAY,CAACoB,eAAe,CAACR,YAAY,EAAED,aAAa,EAAEG,WAAW,CAAC;EAC1E,MAAMO,cAAc,GAAG,KAAK;EAE5B,IAAIT,YAAY,CAACU,KAAK,KAAK,QAAQ,EAAE;IACnC,MAAMC,UAAU,GAAGd,OAAO,CAACe,UAAU,CAAgBb,aAAa,CAAC;IACnE,MAAMc,UAAU,GAAGhB,OAAO,CAACe,UAAU,CAAiBZ,YAAY,CAAC;IACnE,MAAMc,aAAa,GAAGxB,IAAI,CAACyB,YAAY,CACnClB,OAAO,CAACmB,QAAQ,CAACf,YAAY,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAe,CAAC;IAC3D,MAAMC,MAAM,GAAG3B,cAAc,CACzBoB,UAAU,EAAEE,UAAU,EAAEX,WAAW,EAAEK,UAAU,EAAEF,SAAS,EAAED,UAAU,EACtED,SAAS,EAAEG,OAAO,EAAEQ,aAAa,EAAEL,cAAc,CAAC;IACtD,OAAOZ,OAAO,CAACsB,cAAc,CAACjB,WAAW,EAAEgB,MAAM,CAACR,KAAK,EAAEQ,MAAM,CAACE,MAAM,CAAC;;EAEzE,MAAMC,OAAO,GAAG,IAAI7B,cAAc,CAC9BY,UAAU,EAAED,SAAS,EAAEJ,aAAa,CAACuB,KAAK,CAACC,MAAM,EACjDvB,YAAY,CAACsB,KAAK,CAACC,MAAM,EAAEjB,OAAO,EAAE,CAACC,UAAU,EAAE,CAAC,CAAC,EAAEE,cAAc,CAAC;EAExE,MAAMe,GAAG,GAAG3B,OAAO,CAAC4B,eAAe,CAC/BJ,OAAO,EAAE,CAACrB,YAAY,EAAED,aAAa,EAAEE,YAAY,CAAC,EAAED,YAAY,CAACU,KAAK,CAAC;EAE7E,MAAMgB,QAAQ,GACVjC,OAAO,CAAC;IAACG,MAAM,EAAE;MAAC+B,CAAC,EAAEH;IAAG,CAAC;IAAE3B,OAAO;IAAEC,KAAK,EAAE;MAACwB,KAAK,EAAEpB;IAAW;EAAC,CAAC,CAAC;EAErEL,OAAO,CAAC+B,6BAA6B,CAACJ,GAAG,CAAC;EAC1C,OAAOE,QAAQ;AACjB;AAEA,OAAO,MAAMG,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEzC,aAAa;EACzB0C,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEtC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}