{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const toDispose = [];\n  const reshapedIntermediate = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const transposedIntermediate = transpose({\n    inputs: {\n      x: reshapedIntermediate\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const reshapedIntermediate2 = reshape({\n    inputs: {\n      x: transposedIntermediate\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const sliced = slice({\n    inputs: {\n      x: reshapedIntermediate2\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return sliced;\n};\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"names":["backend_util","BatchToSpaceND","util","reshape","slice","transpose","batchToSpaceND","args","inputs","backend","attrs","x","blockShape","crops","assert","shape","length","prod","reduce","a","b","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","perm","reshapedIntermediate2","sliced","begin","size","push","forEach","t","disposeIntermediateTensorInfo","batchToSpaceNDConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,cAAc,EAAmFC,IAAI,QAAO,uBAAuB;AAIzJ,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAO,MAAMC,cAAc,GAAIC,IAI9B,IAAgB;EACf,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,UAAU;IAAEC;EAAK,CAAC,GAAGH,KAAK;EAEjCR,IAAI,CAACY,MAAM,CACPH,CAAC,CAACI,KAAK,CAACC,MAAM,IAAI,CAAC,EACnB,MAAM,uDAAuD,GACzD,iBAAiB,CAAC;EAC1B,MAAMC,IAAI,GAAGL,UAAU,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAE/C,MAAMC,QAAQ,GAAGrB,YAAY,CAACsB,WAAW,CAACX,CAAC,CAACI,KAAK,EAAEH,UAAU,EAAEK,IAAI,CAAC;EACpE,MAAMM,QAAQ,GAAGvB,YAAY,CAACwB,WAAW,CAACH,QAAQ,CAACL,MAAM,EAAEJ,UAAU,CAACI,MAAM,CAAC;EAC7E,MAAMS,gBAAgB,GAClBzB,YAAY,CAAC0B,mBAAmB,CAACf,CAAC,CAACI,KAAK,EAAEH,UAAU,EAAEK,IAAI,CAAC;EAC/D,MAAMU,gBAAgB,GAClB3B,YAAY,CAAC4B,mBAAmB,CAACf,KAAK,EAAED,UAAU,CAACI,MAAM,CAAC;EAC9D,MAAMa,SAAS,GACX7B,YAAY,CAAC8B,YAAY,CAACL,gBAAgB,EAAEZ,KAAK,EAAED,UAAU,CAACI,MAAM,CAAC;EAEzE,MAAMe,SAAS,GAAG,EAAE;EAEpB,MAAMC,oBAAoB,GACtB7B,OAAO,CAAC;IAACK,MAAM,EAAE;MAACG;IAAC,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACK,KAAK,EAAEM;IAAQ;EAAC,CAAC,CAAC;EAC7D,MAAMY,sBAAsB,GAAG5B,SAAS,CACpC;IAACG,MAAM,EAAE;MAACG,CAAC,EAAEqB;IAAoB,CAAC;IAAEvB,OAAO;IAAEC,KAAK,EAAE;MAACwB,IAAI,EAAEX;IAAQ;EAAC,CAAC,CAAC;EAC1E,MAAMY,qBAAqB,GAAGhC,OAAO,CAAC;IACpCK,MAAM,EAAE;MAACG,CAAC,EAAEsB;IAAsB,CAAC;IACnCxB,OAAO;IACPC,KAAK,EAAE;MAACK,KAAK,EAAEU;IAAgB;GAChC,CAAC;EACF,MAAMW,MAAM,GAAGhC,KAAK,CAAC;IACnBI,MAAM,EAAE;MAACG,CAAC,EAAEwB;IAAqB,CAAC;IAClC1B,OAAO;IACPC,KAAK,EAAE;MAAC2B,KAAK,EAAEV,gBAAgB;MAAEW,IAAI,EAAET;IAAS;GACjD,CAAC;EAEFE,SAAS,CAACQ,IAAI,CAACP,oBAAoB,CAAC;EACpCD,SAAS,CAACQ,IAAI,CAACN,sBAAsB,CAAC;EACtCF,SAAS,CAACQ,IAAI,CAACJ,qBAAqB,CAAC;EAErCJ,SAAS,CAACS,OAAO,CAACC,CAAC,IAAIhC,OAAO,CAACiC,6BAA6B,CAACD,CAAC,CAAC,CAAC;EAEhE,OAAOL,MAAM;AACf,CAAC;AAED,OAAO,MAAMO,oBAAoB,GAAiB;EAChDC,UAAU,EAAE3C,cAAc;EAC1B4C,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAExC;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}