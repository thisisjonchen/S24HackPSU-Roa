{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n  return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat\n};","map":{"version":3,"names":["backend_util","Concat","util","concatImpl","identity","concat","args","inputs","backend","attrs","axis","$axis","parseAxisParam","shape","shapes","map","t","assertParamsConsistent","outShape","computeOutShape","sizeFromShape","makeTensorInfo","dtype","$inputs","filter","length","x","concatConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Concat.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,MAAM,EAAmEC,IAAI,QAAO,uBAAuB;AAGjI,SAAQC,UAAU,QAAO,eAAe;AACxC,SAAQC,QAAQ,QAAO,YAAY;AAEnC,OAAM,SAAUC,MAAMA,CAClBC,IACyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAI,CAAC,GAAGD,KAAK;EAEpB,MAAME,KAAK,GAAGT,IAAI,CAACU,cAAc,CAACF,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;EAE3D,MAAMC,MAAM,GAAGP,MAAM,CAACQ,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACH,KAAK,CAAC;EACvCb,YAAY,CAACiB,sBAAsB,CAACH,MAAM,EAAEH,KAAK,CAAC;EAElD,MAAMO,QAAQ,GACVlB,YAAY,CAACmB,eAAe,CAACZ,MAAM,CAACQ,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACH,KAAK,CAAC,EAAEF,KAAK,CAAC;EAEjE,IAAIT,IAAI,CAACkB,aAAa,CAACF,QAAQ,CAAC,KAAK,CAAC,EAAE;IACtC,OAAOV,OAAO,CAACa,cAAc,CAACH,QAAQ,EAAEX,MAAM,CAAC,CAAC,CAAC,CAACe,KAAK,EAAE,EAAE,CAAC;;EAG9D;EACA,MAAMC,OAAO,GAAGhB,MAAM,CAACiB,MAAM,CAACR,CAAC,IAAId,IAAI,CAACkB,aAAa,CAACJ,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC,CAAC;EACnE,IAAIU,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOrB,QAAQ,CAAC;MAACG,MAAM,EAAE;QAACmB,CAAC,EAAEH,OAAO,CAAC,CAAC;MAAC,CAAC;MAAEf;IAAO,CAAC,CAAC;;EAGrD,OAAOL,UAAU,CAACoB,OAAO,EAAEZ,KAAK,EAAEH,OAAO,CAAC;AAC5C;AAEA,OAAO,MAAMmB,YAAY,GAAiB;EACxCC,UAAU,EAAE3B,MAAM;EAClB4B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEzB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}