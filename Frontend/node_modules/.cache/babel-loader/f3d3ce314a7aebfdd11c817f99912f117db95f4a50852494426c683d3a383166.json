{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\nexport function complexAbs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xData = backend.texData.get(x.dataId);\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];\n  return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs\n};","map":{"version":3,"names":["ComplexAbs","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","dataId","dtype","shape","complexAbs","args","inputs","backend","x","xData","texData","get","program","programInputs","complexTensorInfos","real","imag","runWebGLProgram","complexAbsConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/ComplexAbs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,UAAU,QAA+D,uBAAuB;AAGxG,SAAQC,iBAAiB,QAAO,oBAAoB;AAEpD;AACA;AACA;AACA,SAASC,8BAA8BA,CACnCC,aAAyB,EAAEC,WAAuB;EACpD,OAAO;IACLC,MAAM,EAAED,WAAW,CAACC,MAAM;IAC1BC,KAAK,EAAEF,WAAW,CAACE,KAAK;IACxBC,KAAK,EAAEJ,aAAa,CAACI;GACtB;AACH;AAEA,OAAM,SAAUC,UAAUA,CACtBC,IAA2D;EAC7D,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElB,MAAMG,KAAK,GAAGF,OAAO,CAACG,OAAO,CAACC,GAAG,CAACH,CAAC,CAACP,MAAM,CAAC;EAE3C,MAAMW,OAAO,GAAG,IAAIf,iBAAiB,CAACW,CAAC,CAACL,KAAK,CAAC;EAC9C,MAAMU,aAAa,GAAG,CACpBf,8BAA8B,CAACU,CAAC,EAAEC,KAAK,CAACK,kBAAkB,CAACC,IAAI,CAAC,EAChEjB,8BAA8B,CAACU,CAAC,EAAEC,KAAK,CAACK,kBAAkB,CAACE,IAAI,CAAC,CACjE;EAED,OAAOT,OAAO,CAACU,eAAe,CAC1BL,OAAO,EAAEC,aAAa,EAAEA,aAAa,CAAC,CAAC,CAAC,CAACX,KAAK,CAAC;AACrD;AAEA,OAAO,MAAMgB,gBAAgB,GAAiB;EAC5CC,UAAU,EAAEvB,UAAU;EACtBwB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEjB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}