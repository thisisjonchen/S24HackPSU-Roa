{"ast":null,"code":"'use strict';\n\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar GetIntrinsic = require('get-intrinsic');\nvar $ArrayBuffer = GetIntrinsic('%ArrayBuffer%', true);\n/** @type {undefined | ((receiver: ArrayBuffer) => number) | ((receiver: unknown) => never)} */\nvar $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);\nvar $toString = callBound('Object.prototype.toString');\n\n// in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method\nvar abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;\nvar $abSlice = !!abSlice && callBind(abSlice);\n\n/** @type {import('.')} */\nmodule.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n  try {\n    if ($byteLength) {\n      // @ts-expect-error no idea why TS can't handle the overload\n      $byteLength(obj);\n    } else {\n      // @ts-expect-error TS chooses not to type-narrow inside a closure\n      $abSlice(obj, 0);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n} : $ArrayBuffer\n// in node 0.8, ArrayBuffers have no prototype or own methods, but also no Symbol.toStringTag\n? function isArrayBuffer(obj) {\n  return $toString(obj) === '[object ArrayBuffer]';\n} : function isArrayBuffer(obj) {\n  // eslint-disable-line no-unused-vars\n  return false;\n};","map":{"version":3,"names":["callBind","require","callBound","GetIntrinsic","$ArrayBuffer","$byteLength","$toString","abSlice","slice","$abSlice","module","exports","isArrayBuffer","obj","e"],"sources":["/Users/jonchen/Documents/HackPSU/s24hackpsu/node_modules/is-array-buffer/index.js"],"sourcesContent":["'use strict';\n\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $ArrayBuffer = GetIntrinsic('%ArrayBuffer%', true);\n/** @type {undefined | ((receiver: ArrayBuffer) => number) | ((receiver: unknown) => never)} */\nvar $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);\nvar $toString = callBound('Object.prototype.toString');\n\n// in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method\nvar abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;\nvar $abSlice = !!abSlice && callBind(abSlice);\n\n/** @type {import('.')} */\nmodule.exports = $byteLength || $abSlice\n\t? function isArrayBuffer(obj) {\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tif ($byteLength) {\n\t\t\t\t// @ts-expect-error no idea why TS can't handle the overload\n\t\t\t\t$byteLength(obj);\n\t\t\t} else {\n\t\t\t\t// @ts-expect-error TS chooses not to type-narrow inside a closure\n\t\t\t\t$abSlice(obj, 0);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t: $ArrayBuffer\n\t\t// in node 0.8, ArrayBuffers have no prototype or own methods, but also no Symbol.toStringTag\n\t\t? function isArrayBuffer(obj) {\n\t\t\treturn $toString(obj) === '[object ArrayBuffer]';\n\t\t}\n\t\t: function isArrayBuffer(obj) { // eslint-disable-line no-unused-vars\n\t\t\treturn false;\n\t\t};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIG,YAAY,GAAGD,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC;AACtD;AACA,IAAIE,WAAW,GAAGH,SAAS,CAAC,kCAAkC,EAAE,IAAI,CAAC;AACrE,IAAII,SAAS,GAAGJ,SAAS,CAAC,2BAA2B,CAAC;;AAEtD;AACA,IAAIK,OAAO,GAAG,CAAC,CAACH,YAAY,IAAI,CAACC,WAAW,IAAI,IAAID,YAAY,CAAC,CAAC,CAAC,CAACI,KAAK;AACzE,IAAIC,QAAQ,GAAG,CAAC,CAACF,OAAO,IAAIP,QAAQ,CAACO,OAAO,CAAC;;AAE7C;AACAG,MAAM,CAACC,OAAO,GAAGN,WAAW,IAAII,QAAQ,GACrC,SAASG,aAAaA,CAACC,GAAG,EAAE;EAC7B,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACpC,OAAO,KAAK;EACb;EACA,IAAI;IACH,IAAIR,WAAW,EAAE;MAChB;MACAA,WAAW,CAACQ,GAAG,CAAC;IACjB,CAAC,MAAM;MACN;MACAJ,QAAQ,CAACI,GAAG,EAAE,CAAC,CAAC;IACjB;IACA,OAAO,IAAI;EACZ,CAAC,CAAC,OAAOC,CAAC,EAAE;IACX,OAAO,KAAK;EACb;AACD,CAAC,GACCV;AACD;AAAA,EACE,SAASQ,aAAaA,CAACC,GAAG,EAAE;EAC7B,OAAOP,SAAS,CAACO,GAAG,CAAC,KAAK,sBAAsB;AACjD,CAAC,GACC,SAASD,aAAaA,CAACC,GAAG,EAAE;EAAE;EAC/B,OAAO,KAAK;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}