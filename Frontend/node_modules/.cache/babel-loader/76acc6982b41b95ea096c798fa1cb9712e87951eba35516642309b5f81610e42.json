{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n    const inputs = [{\n      dataId: aData.complexTensorInfos.real.dataId,\n      dtype: aData.complexTensorInfos.real.dtype,\n      shape: a.shape\n    }, {\n      dataId: aData.complexTensorInfos.imag.dataId,\n      dtype: aData.complexTensorInfos.imag.dtype,\n      shape: a.shape\n    }, {\n      dataId: bData.complexTensorInfos.real.dataId,\n      dtype: bData.complexTensorInfos.real.dtype,\n      shape: b.shape\n    }, {\n      dataId: bData.complexTensorInfos.imag.dataId,\n      dtype: bData.complexTensorInfos.imag.dtype,\n      shape: b.shape\n    }];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({\n      inputs: {\n        real: realPart,\n        imag: imagPart\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n  let program;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};","map":{"version":3,"names":["backend_util","env","Multiply","binaryop_complex_gpu","BinaryOpComplexProgram","BinaryOpProgram","BinaryOpPackedProgram","multiplyImplCPU","cpuMultiply","complex","MUL","multiply","args","inputs","backend","a","b","dtype","upcastType","aData","texData","get","dataId","bData","realProgram","COMPLEX_MULTIPLY","REAL","shape","imagProgram","IMAG","complexTensorInfos","real","imag","realPart","runWebGLProgram","imagPart","complexOutput","disposeIntermediateTensorInfo","shouldExecuteOnCPU","outValues","outShape","values","out","makeTensorInfo","outData","program","getBool","multiplyConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Multiply.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}