{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  const probs = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial\n};","map":{"version":3,"names":["Multinomial","MultinomialProgram","softmax","multinomial","args","inputs","backend","attrs","logits","numSamples","seed","normalized","probs","dim","shape","length","batchSize","numOutcomes","program","customValues","res","runWebGLProgram","disposeIntermediateTensorInfo","multinomialConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Multinomial.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAW,QAAwD,uBAAuB;AAG5H,SAAQC,kBAAkB,QAAO,oBAAoB;AAErD,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,WAAWA,CAACC,IAI3B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAM,CAAC,GAAGH,MAAM;EACvB,MAAM;IAACI,UAAU;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EAE5C,MAAMK,KAAK,GAAGD,UAAU,GACpBH,MAAM,GACNN,OAAO,CACH;IAACG,MAAM,EAAE;MAACG;IAAM,CAAC;IAAEF,OAAO;IAAEC,KAAK,EAAE;MAACM,GAAG,EAAEL,MAAM,CAACM,KAAK,CAACC,MAAM,GAAG;IAAC;EAAC,CAAC,CAAC;EAC3E,MAAMC,SAAS,GAAGJ,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;EAChC,MAAMG,WAAW,GAAGL,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;EAClC,MAAMI,OAAO,GAAG,IAAIjB,kBAAkB,CAACe,SAAS,EAAEC,WAAW,EAAER,UAAU,CAAC;EAC1E,MAAMU,YAAY,GAAG,CAAC,CAACT,IAAI,CAAC,CAAC;EAC7B,MAAMU,GAAG,GAAGd,OAAO,CAACe,eAAe,CAACH,OAAO,EAAE,CAACN,KAAK,CAAC,EAAE,OAAO,EAAEO,YAAY,CAAC;EAC5E,IAAI,CAACR,UAAU,EAAE;IACfL,OAAO,CAACgB,6BAA6B,CAACV,KAAK,CAAC;;EAE9C,OAAOQ,GAAG;AACZ;AAEA,OAAO,MAAMG,iBAAiB,GAAiB;EAC7CC,UAAU,EAAExB,WAAW;EACvByB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEvB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}