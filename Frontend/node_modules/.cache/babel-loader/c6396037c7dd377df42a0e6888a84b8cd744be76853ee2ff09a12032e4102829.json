{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StaticRegexReplace } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Replace the match of a `pattern` in `input` with `rewrite`.\n *\n * ```js\n * const result = tf.string.staticRegexReplace(\n *     ['format       this   spacing      better'], ' +', ' ');\n * result.print(); // ['format this spacing better']\n * ```\n * @param input: A Tensor of type string. The text to be processed.\n * @param pattern: A string. The regular expression to match the input.\n * @param rewrite: A string. The rewrite to be applied to the matched\n *     expression.\n * @param replaceGlobal: An optional bool. Defaults to True. If True, the\n *     replacement is global, otherwise the replacement is done only on the\n *     first match.\n * @return A Tensor of type string.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction staticRegexReplace_(input, pattern, rewrite, replaceGlobal = true) {\n  const $input = convertToTensor(input, 'input', 'staticRegexReplace', 'string');\n  const attrs = {\n    pattern,\n    rewrite,\n    replaceGlobal\n  };\n  return ENGINE.runKernel(StaticRegexReplace, {\n    x: $input\n  }, attrs);\n}\nexport const staticRegexReplace = /* @__PURE__ */op({\n  staticRegexReplace_\n});","map":{"version":3,"names":["ENGINE","StaticRegexReplace","convertToTensor","op","staticRegexReplace_","input","pattern","rewrite","replaceGlobal","$input","attrs","runKernel","x","staticRegexReplace"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/string/static_regex_replace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StaticRegexReplace, StaticRegexReplaceAttrs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Replace the match of a `pattern` in `input` with `rewrite`.\n *\n * ```js\n * const result = tf.string.staticRegexReplace(\n *     ['format       this   spacing      better'], ' +', ' ');\n * result.print(); // ['format this spacing better']\n * ```\n * @param input: A Tensor of type string. The text to be processed.\n * @param pattern: A string. The regular expression to match the input.\n * @param rewrite: A string. The rewrite to be applied to the matched\n *     expression.\n * @param replaceGlobal: An optional bool. Defaults to True. If True, the\n *     replacement is global, otherwise the replacement is done only on the\n *     first match.\n * @return A Tensor of type string.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction staticRegexReplace_(\n  input: Tensor | TensorLike, pattern: string, rewrite: string,\n  replaceGlobal=true): Tensor {\n\n  const $input = convertToTensor(input, 'input', 'staticRegexReplace',\n                                 'string');\n  const attrs: StaticRegexReplaceAttrs = {pattern, rewrite, replaceGlobal};\n  return ENGINE.runKernel(StaticRegexReplace, {x: $input},\n                          attrs as unknown as NamedAttrMap);\n}\n\nexport const staticRegexReplace = /* @__PURE__ */ op({staticRegexReplace_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,kBAAkB,QAAgC,oBAAoB;AAG9E,SAAQC,eAAe,QAAO,uBAAuB;AAErD,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,mBAAmBA,CAC1BC,KAA0B,EAAEC,OAAe,EAAEC,OAAe,EAC5DC,aAAa,GAAC,IAAI;EAElB,MAAMC,MAAM,GAAGP,eAAe,CAACG,KAAK,EAAE,OAAO,EAAE,oBAAoB,EACpC,QAAQ,CAAC;EACxC,MAAMK,KAAK,GAA4B;IAACJ,OAAO;IAAEC,OAAO;IAAEC;EAAa,CAAC;EACxE,OAAOR,MAAM,CAACW,SAAS,CAACV,kBAAkB,EAAE;IAACW,CAAC,EAAEH;EAAM,CAAC,EAC/BC,KAAgC,CAAC;AAC3D;AAEA,OAAO,MAAMG,kBAAkB,GAAG,eAAgBV,EAAE,CAAC;EAACC;AAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}