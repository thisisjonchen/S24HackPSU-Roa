{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const round = unaryKernelFunc(Round, xi => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\nexport const roundConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round\n};","map":{"version":3,"names":["Round","unaryKernelFunc","round","xi","base","Math","floor","ceil","roundConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Round.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,KAAK,QAAO,uBAAuB;AAEzD,SAAQC,eAAe,QAAO,sBAAsB;AAEpD,OAAO,MAAMC,KAAK,GAAGD,eAAe,CAACD,KAAK,EAAGG,EAAE,IAAI;EACjD;EACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,EAAE,CAAC;EAC3B,IAAIA,EAAE,GAAGC,IAAI,GAAG,GAAG,EAAE;IACnB,OAAOC,IAAI,CAACC,KAAK,CAACH,EAAE,CAAC;GACtB,MAAM,IAAIA,EAAE,GAAGC,IAAI,GAAG,GAAG,EAAE;IAC1B,OAAOC,IAAI,CAACE,IAAI,CAACJ,EAAE,CAAC;GACrB,MAAM;IACL,IAAIC,IAAI,GAAG,GAAG,KAAK,GAAG,EAAE;MACtB,OAAOA,IAAI;KACZ,MAAM;MACL,OAAOA,IAAI,GAAG,GAAG;;;AAGvB,CAAC,CAAC;AAEF,OAAO,MAAMI,WAAW,GAAiB;EACvCC,UAAU,EAAET,KAAK;EACjBU,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAET;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}