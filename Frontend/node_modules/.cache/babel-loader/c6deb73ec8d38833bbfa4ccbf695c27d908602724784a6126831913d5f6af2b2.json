{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedRange } from '@tensorflow/tfjs-core';\nimport { raggedRangeImplCPU } from '../kernel_utils/shared';\nexport function raggedRange(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    starts,\n    limits,\n    deltas\n  } = inputs;\n  const $starts = backend.readSync(starts.dataId);\n  const $limits = backend.readSync(limits.dataId);\n  const $deltas = backend.readSync(deltas.dataId);\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU($starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas, deltas.shape);\n  const rtNestedSplits = backend.makeTensorInfo([rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo([rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n  return [rtNestedSplits, rtDenseValues];\n}\nexport const raggedRangeConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange\n};","map":{"version":3,"names":["RaggedRange","raggedRangeImplCPU","raggedRange","args","inputs","backend","starts","limits","deltas","$starts","readSync","dataId","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","shape","dtype","rtNestedSplits","makeTensorInfo","length","rtDenseValues","raggedRangeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/RaggedRange.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAW,QAAkD,uBAAuB;AAGtH,SAAQC,kBAAkB,QAAO,wBAAwB;AAEzD,OAAM,SAAUC,WAAWA,CACvBC,IAA4D;EAE9D,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGJ,MAAM;EAEvC,MAAMK,OAAO,GAAGJ,OAAO,CAACK,QAAQ,CAACJ,MAAM,CAACK,MAAM,CAAe;EAC7D,MAAMC,OAAO,GAAGP,OAAO,CAACK,QAAQ,CAACH,MAAM,CAACI,MAAM,CAAe;EAC7D,MAAME,OAAO,GAAGR,OAAO,CAACK,QAAQ,CAACF,MAAM,CAACG,MAAM,CAAe;EAE7D,MAAM,CAACG,kBAAkB,EAAEC,iBAAiB,CAAC,GAAGd,kBAAkB,CAC9DQ,OAAO,EAAEH,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,KAAK,EAAEL,OAAO,EAAEL,MAAM,CAACS,KAAK,EAAEH,OAAO,EACnEL,MAAM,CAACQ,KAAK,CAAC;EAEjB,MAAME,cAAc,GAAGb,OAAO,CAACc,cAAc,CACzC,CAACL,kBAAkB,CAACM,MAAM,CAAC,EAAE,OAAO,EAAEN,kBAAkB,CAAC;EAC7D,MAAMO,aAAa,GAAGhB,OAAO,CAACc,cAAc,CACxC,CAACJ,iBAAiB,CAACK,MAAM,CAAC,EAAEd,MAAM,CAACW,KAAK,EAAEF,iBAAiB,CAAC;EAEhE,OAAO,CAACG,cAAc,EAAEG,aAAa,CAAC;AACxC;AAEA,OAAO,MAAMC,iBAAiB,GAAiB;EAC7CC,UAAU,EAAEvB,WAAW;EACvBwB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEvB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}