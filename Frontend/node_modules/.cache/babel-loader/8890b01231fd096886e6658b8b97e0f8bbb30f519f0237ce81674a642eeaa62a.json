{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool\n};","map":{"version":3,"names":["backend_util","MaxPool","util","Pool2DProgram","assertNotComplex","identity","maxPool","args","inputs","backend","attrs","x","filterSize","strides","pad","dimRoundingMode","dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","shape","filterWidth","filterHeight","arraysEqual","inShape","outShape","maxPoolProgram","runWebGLProgram","dtype","maxPoolConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/MaxPool.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAY,EAA4BC,OAAO,EAA2CC,IAAI,QAAO,uBAAuB;AAGpI,SAAQC,aAAa,QAAO,aAAa;AACzC,SAAQC,gBAAgB,QAAO,eAAe;AAC9C,SAAQC,QAAQ,QAAO,YAAY;AAEnC,OAAM,SAAUC,OAAOA,CAACC,IAIvB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClBJ,gBAAgB,CAACO,CAAC,EAAE,SAAS,CAAC;EAC9B,MAAM;IAACC,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC,GAAGL,KAAK;EACzD,MAAMM,SAAS,GAAG,CAAC;EAEnBd,IAAI,CAACe,MAAM,CACPjB,YAAY,CAACkB,8BAA8B,CAACL,OAAO,EAAEG,SAAS,CAAC,EAC/D,MAAM,2DAA2D,GAC7D,eAAeH,OAAO,mBAAmBG,SAAS,GAAG,CAAC;EAE9D,MAAMG,QAAQ,GAAGnB,YAAY,CAACoB,iBAAiB,CAC3CT,CAAC,CAACU,KAAyC,EAAET,UAAU,EAAEC,OAAO,EAChEG,SAAS,EAAEF,GAAG,EAAEC,eAAe,CAAC;EACpC,IAAII,QAAQ,CAACG,WAAW,KAAK,CAAC,IAAIH,QAAQ,CAACI,YAAY,KAAK,CAAC,IACzDrB,IAAI,CAACsB,WAAW,CAACL,QAAQ,CAACM,OAAO,EAAEN,QAAQ,CAACO,QAAQ,CAAC,EAAE;IACzD,OAAOrB,QAAQ,CAAC;MAACG,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF;IAAO,CAAC,CAAC;;EAEzC,MAAMkB,cAAc,GAAG,IAAIxB,aAAa,CAACgB,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;EAChE,OAAOV,OAAO,CAACmB,eAAe,CAACD,cAAc,EAAE,CAAChB,CAAC,CAAC,EAAEA,CAAC,CAACkB,KAAK,CAAC;AAC9D;AAEA,OAAO,MAAMC,aAAa,GAAiB;EACzCC,UAAU,EAAE9B,OAAO;EACnB+B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE3B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}