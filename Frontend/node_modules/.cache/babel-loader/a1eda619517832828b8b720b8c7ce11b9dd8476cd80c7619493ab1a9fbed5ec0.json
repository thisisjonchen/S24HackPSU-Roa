{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const cpuBackend = backend;\n    const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values;\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n            const x = coords[2];\n            const y = coords[1];\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"names":["backend_util","RotateWithOffset","util","rotateWithOffsetConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","radians","fillValue","center","cpuBackend","output","getTypedArrayFromDType","dtype","sizeFromShape","shape","batch","imageHeight","imageWidth","numChannels","centerX","centerY","getImageCenter","fullOpacityValue","sinFactor","Math","sin","cosFactor","cos","imageVals","data","get","dataId","values","batchIdx","batchOffset","row","rowOffset","col","colOffset","channel","coords","x","y","coordX","coordY","round","outputValue","rotatedRowOffset","rotatedColOffset","imageIdx","outIdx","write"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/RotateWithOffset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n      attrs as unknown as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}