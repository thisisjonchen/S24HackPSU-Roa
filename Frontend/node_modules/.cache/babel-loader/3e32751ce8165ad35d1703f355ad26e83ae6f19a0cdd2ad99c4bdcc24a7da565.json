{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  assertNotComplex([x], 'spaceToBatchND');\n  const prod = util.sizeFromShape(blockShape);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  const reshapeInputs = {\n    x: paddedX\n  };\n  const reshapeAttrs = {\n    shape: reshapedPaddedShape\n  };\n  const paddedXReshaped = reshape({\n    inputs: reshapeInputs,\n    backend,\n    attrs: reshapeAttrs\n  });\n  const transposeInputs = {\n    x: paddedXReshaped\n  };\n  const transposeAttrs = {\n    perm: permutedReshapedPaddedPermutation\n  };\n  const paddedXT = transpose({\n    inputs: transposeInputs,\n    backend,\n    attrs: transposeAttrs\n  });\n  const resultReshapeInputs = {\n    x: paddedXT\n  };\n  const resultReshapeAttrs = {\n    shape: flattenShape\n  };\n  const result = reshape({\n    inputs: resultReshapeInputs,\n    backend,\n    attrs: resultReshapeAttrs\n  });\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n  return result;\n}\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"names":["backend_util","SpaceToBatchND","util","assertNotComplex","padV2Config","reshape","transpose","spaceToBatchND","args","inputs","backend","attrs","x","blockShape","paddings","prod","sizeFromShape","completePaddings","push","i","length","shape","paddedX","kernelFunc","constantValue","reshapedPaddedShape","getReshaped","permutedReshapedPaddedPermutation","getPermuted","flattenShape","getReshapedPermuted","reshapeInputs","reshapeAttrs","paddedXReshaped","transposeInputs","transposeAttrs","perm","paddedXT","resultReshapeInputs","resultReshapeAttrs","result","disposeIntermediateTensorInfo","spaceToBatchNDConfig","kernelName","backendName"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}