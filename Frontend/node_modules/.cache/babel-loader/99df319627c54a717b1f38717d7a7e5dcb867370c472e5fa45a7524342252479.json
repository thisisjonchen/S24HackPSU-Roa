{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const componentSetup = [`${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `, rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`, rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`];\n    const paddingArea = rank === 1 ? 'rc < start || rc >= end' : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += rank === 1 ? `} ` : `}}`;\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}","map":{"version":3,"names":["getChannels","getCoordsDataType","PadPackedProgram","constructor","xShape","paddings","constantValue","variableNames","packedInputs","packedOutput","customUniforms","name","type","outputShape","map","p","i","rank","length","dtype","start","join","end","coords","source","cLimit","innerDims","slice","componentSetup","paddingArea","mainLoop","j","userCode"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/pad_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}