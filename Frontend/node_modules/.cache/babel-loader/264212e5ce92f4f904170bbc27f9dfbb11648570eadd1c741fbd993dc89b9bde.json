{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long =\n// tslint:disable-next-line\nLongExports.default || LongExports;\nexport function hexToLong(hex) {\n  return Long.fromString(hex, true, 16);\n}\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0 = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1 = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2 = hexToLong('9ae16a3b2f90404f');\nfunction shiftMix(val) {\n  return val.xor(val.shru(47));\n}\nfunction fetch(s, offset, numBytes) {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\nfunction fetch64(s, offset) {\n  return fetch(s, offset, 8);\n}\nfunction fetch32(s, offset) {\n  return fetch(s, offset, 4);\n}\nfunction rotate64(val, shift) {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\nfunction hashLen16(u, v, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(w, x, y, z, a, b) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\nfunction weakHashLen32WithSeedsStr(s, offset, a, b) {\n  return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);\n}\nfunction hashLen0to16(s, len = s.length) {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\nfunction hashLen17to32(s, len = s.length) {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\nfunction hashLen33to64(s, len = s.length) {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\nexport function fingerPrint64(s, len = s.length) {\n  const seed = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = (len - 1 >> 6) * 64;\n  const last64 = end + (len - 1 & 63) - 63;\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n  w[0] = w[0].add(len - 1 & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n  [z, x] = [x, z];\n  return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);\n}","map":{"version":3,"names":["LongExports","Long","default","hexToLong","hex","fromString","k0","k1","k2","shiftMix","val","xor","shru","fetch","s","offset","numBytes","bytes","slice","fromBytes","Array","from","fetch64","fetch32","rotate64","shift","or","shl","hashLen16","u","v","mul","a","b","weakHashLen32WithSeeds","w","x","y","z","add","c","weakHashLen32WithSeedsStr","hashLen0to16","len","length","d","hashLen17to32","hashLen33to64","e","f","g","h","fingerPrint64","seed","fromNumber","UZERO","end","last64","and"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/hash_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long: LongExports.LongConstructor =\n    // tslint:disable-next-line\n    (LongExports as any).default || LongExports;\n\nexport function hexToLong(hex: string): Long {\n  return Long.fromString(hex, true, 16);\n}\n\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0: Long = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1: Long = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2: Long = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val: Long): Long {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s: Uint8Array, offset: number, numBytes: number): Long {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val: Long, shift: number): Long {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u: Long, v: Long, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(\n    w: Long, x: Long, y: Long, z: Long, a: Long, b: Long) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(\n    s: Uint8Array, offset: number, a: Long, b: Long) {\n  return weakHashLen32WithSeeds(\n      fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16),\n      fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s: Uint8Array, len = s.length): Long {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\n\nfunction hashLen17to32(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(\n      rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d),\n      a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(\n      rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h),\n      e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s: Uint8Array, len = s.length): Long {\n  const seed: Long = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = ((len - 1) >> 6) * 64;\n  const last64 = end + ((len - 1) & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(\n        s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n\n  w[0] = w[0].add((len - 1) & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(\n      s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n  [z, x] = [x, z];\n\n  return hashLen16(\n      hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z),\n      hashLen16(v[1], w[1], mul).add(x), mul);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}