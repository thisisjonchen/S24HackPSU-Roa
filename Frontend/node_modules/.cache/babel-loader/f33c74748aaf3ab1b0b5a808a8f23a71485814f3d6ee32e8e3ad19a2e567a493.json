{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  assertNotComplex(x, 'argMin');\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const aVals = backend.data.get($x.dataId).values;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMinConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin\n};","map":{"version":3,"names":["ArgMin","backend_util","util","assertNotComplex","transpose","argMin","args","inputs","backend","attrs","x","axis","axes","parseAxisParam","shape","permutedAxes","getAxesPermutation","length","$x","intermediateTensorInfos","perm","push","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","outSize","sizeFromShape","vals","makeZerosTypedArray","reduceSize","aVals","data","get","dataId","values","i","offset","min","minIndex","j","value","forEach","t","disposeIntermediateTensorInfo","makeTensorInfo","argMinConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/ArgMin.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,EAA6BC,YAAY,EAAoDC,IAAI,QAAO,uBAAuB;AAG7I,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAM,SAAUC,MAAMA,CAClBC,IAAyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EAEpBN,gBAAgB,CAACO,CAAC,EAAE,QAAQ,CAAC;EAE7B,IAAIE,IAAI,GAAGV,IAAI,CAACW,cAAc,CAACF,IAAI,EAAED,CAAC,CAACI,KAAK,CAAC;EAC7C,MAAMC,YAAY,GAAGd,YAAY,CAACe,kBAAkB,CAACJ,IAAI,EAAEF,CAAC,CAACI,KAAK,CAACG,MAAM,CAAC;EAC1E,IAAIC,EAAE,GAAGR,CAAC;EACV,MAAMS,uBAAuB,GAAG,EAAE;EAClC,IAAIJ,YAAY,IAAI,IAAI,EAAE;IACxBG,EAAE,GAAGd,SAAS,CAAC;MAACG,MAAM,EAAE;QAACG;MAAC,CAAC;MAAEF,OAAO;MAAEC,KAAK,EAAE;QAACW,IAAI,EAAEL;MAAY;IAAC,CAAC,CAAC;IACnEI,uBAAuB,CAACE,IAAI,CAACH,EAAE,CAAC;IAChCN,IAAI,GAAGX,YAAY,CAACqB,gBAAgB,CAACV,IAAI,CAACK,MAAM,EAAEC,EAAE,CAACJ,KAAK,CAACG,MAAM,CAAC;;EAGpEL,IAAI,GAAG,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC;EAChBX,YAAY,CAACsB,0BAA0B,CAAC,QAAQ,EAAEX,IAAI,EAAEM,EAAE,CAACJ,KAAK,CAACG,MAAM,CAAC;EACxE,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GACzBxB,YAAY,CAACyB,yBAAyB,CAACR,EAAE,CAACJ,KAAK,EAAEF,IAAI,CAAC;EAE1D,MAAMe,OAAO,GAAGzB,IAAI,CAAC0B,aAAa,CAACJ,QAAQ,CAAC;EAC5C,MAAMK,IAAI,GAAG3B,IAAI,CAAC4B,mBAAmB,CAACH,OAAO,EAAE,OAAO,CAAC;EACvD,MAAMI,UAAU,GAAG7B,IAAI,CAAC0B,aAAa,CAACH,WAAW,CAAC;EAElD,MAAMO,KAAK,GAAGxB,OAAO,CAACyB,IAAI,CAACC,GAAG,CAAChB,EAAE,CAACiB,MAAM,CAAC,CAACC,MAAoB;EAC9D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,IAAI,CAACZ,MAAM,EAAE,EAAEoB,CAAC,EAAE;IACpC,MAAMC,MAAM,GAAGD,CAAC,GAAGN,UAAU;IAC7B,IAAIQ,GAAG,GAAGP,KAAK,CAACM,MAAM,CAAC;IACvB,IAAIE,QAAQ,GAAG,CAAC;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,UAAU,EAAE,EAAEU,CAAC,EAAE;MACnC,MAAMC,KAAK,GAAGV,KAAK,CAACM,MAAM,GAAGG,CAAC,CAAC;MAC/B,IAAIC,KAAK,GAAGH,GAAG,EAAE;QACfA,GAAG,GAAGG,KAAK;QACXF,QAAQ,GAAGC,CAAC;;;IAGhBZ,IAAI,CAACQ,CAAC,CAAC,GAAGG,QAAQ;;EAGpBrB,uBAAuB,CAACwB,OAAO,CAC3BC,CAAC,IAAIpC,OAAO,CAACqC,6BAA6B,CAACD,CAAC,CAAC,CAAC;EAElD,OAAOpC,OAAO,CAACsC,cAAc,CAACtB,QAAQ,EAAE,OAAO,EAAEK,IAAI,CAAC;AACxD;AAEA,OAAO,MAAMkB,YAAY,GAAiB;EACxCC,UAAU,EAAEhD,MAAM;EAClBiD,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE7C;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}