{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes, rank) {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n  util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` + `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes, rank) {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes) {\n  return axes.map((axis, i) => [i, axis]).sort((a, b) => a[1] - b[1]).map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n  const res = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}","map":{"version":3,"names":["util","axesAreInnerMostDims","axes","rank","i","length","combineLocations","outputLoc","reduceLoc","loc","outIdx","reduceIdx","dim","indexOf","push","computeOutAndReduceShapes","aShape","outShape","reduceShape","map","expandShapeToKeepDim","shape","reduceSubShape","x","assertAxesAreInnerMostDims","msg","assert","getAxesPermutation","result","forEach","axis","getUndoAxesPermutation","sort","a","b","getInnerMostAxes","numAxes","res"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/axis_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes: number[], rank: number): boolean {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function combineLocations(\n    outputLoc: number[], reduceLoc: number[], axes: number[]): number[] {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n  Â  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\n\nexport function computeOutAndReduceShapes(\n    aShape: number[], axes: number[]): [number[], number[]] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\n\nexport function expandShapeToKeepDim(\n    shape: number[], axes: number[]): number[] {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\n\nexport function assertAxesAreInnerMostDims(\n    msg: string, axes: number[], rank: number): void {\n  util.assert(\n      axesAreInnerMostDims(axes, rank),\n      () => `${msg} supports only inner-most axes for now. ` +\n          `Got axes ${axes} and rank-${rank} input.`);\n}\n\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes: number[], rank: number): number[]|\n    null {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result: number[] = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes: number[]): number[] {\n  return axes.map((axis, i) => [i, axis])\n      .sort((a, b) => a[1] - b[1])\n      .map(x => x[0]);\n}\n\nexport function getInnerMostAxes(numAxes: number, rank: number): number[] {\n  const res: number[] = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}