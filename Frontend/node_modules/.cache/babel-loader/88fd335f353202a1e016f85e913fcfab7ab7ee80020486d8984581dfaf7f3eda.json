{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    inputIndices,\n    inputShape,\n    newShape\n  } = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);\n  }\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n  const $inputShape = Array.from(backend.readSync(inputShape.dataId));\n  const $inputIndices = backend.readSync(inputIndices.dataId);\n  const targetShape = Array.from(backend.readSync(newShape.dataId));\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport const sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape\n};","map":{"version":3,"names":["SparseReshape","sparseReshapeImplCPU","sparseReshape","args","inputs","backend","inputIndices","inputShape","newShape","shape","length","Error","$inputShape","Array","from","readSync","dataId","$inputIndices","targetShape","newIndices","indicesShape","outputShape","dtype","makeTensorInfo","Int32Array","sparseReshapeConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/SparseReshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,aAAa,QAAoD,uBAAuB;AAG9G,SAAQC,oBAAoB,QAAO,wBAAwB;AAE3D,OAAM,SAAUC,aAAaA,CACzBC,IAA8D;EAEhE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,YAAY;IAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAGJ,MAAM;EACnD,IAAIE,YAAY,CAACG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACnC,MAAM,IAAIC,KAAK,CAAC,uDACZL,YAAY,CAACG,KAAK,EAAE,CAAC;;EAE3B,IAAIF,UAAU,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,qDACZJ,UAAU,CAACE,KAAK,EAAE,CAAC;;EAGzB,IAAID,QAAQ,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAIC,KAAK,CACX,sDAAsDH,QAAQ,CAACC,KAAK,EAAE,CAAC;;EAG7E,MAAMG,WAAW,GACbC,KAAK,CAACC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAACR,UAAU,CAACS,MAAM,CAAe,CAAC;EACjE,MAAMC,aAAa,GAAGZ,OAAO,CAACU,QAAQ,CAACT,YAAY,CAACU,MAAM,CAAe;EACzE,MAAME,WAAW,GACbL,KAAK,CAACC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAACP,QAAQ,CAACQ,MAAM,CAAe,CAAC;EAE/D,MAAM,CAACG,UAAU,EAAEC,YAAY,EAAEC,WAAW,CAAC,GAAGpB,oBAAoB,CAChEgB,aAAa,EAAEX,YAAY,CAACG,KAAK,EAAEH,YAAY,CAACgB,KAAK,EAAEV,WAAW,EAClEM,WAAW,CAAC;EAChB,OAAO,CACLb,OAAO,CAACkB,cAAc,CAACH,YAAY,EAAEd,YAAY,CAACgB,KAAK,EAAEH,UAAU,CAAC,EACpEd,OAAO,CAACkB,cAAc,CAClB,CAACF,WAAW,CAACX,MAAM,CAAC,EAAEF,QAAQ,CAACc,KAAK,EAAE,IAAIE,UAAU,CAACH,WAAW,CAAC,CAAC,CACvE;AACH;AAEA,OAAO,MAAMI,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE1B,aAAa;EACzB2B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}