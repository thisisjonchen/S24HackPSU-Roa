{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const xValues = backend.data.get(x.dataId).values;\n  const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = h % blockSize;\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = w % blockSize;\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace\n};","map":{"version":3,"names":["DepthToSpace","util","depthToSpace","args","inputs","backend","attrs","x","blockSize","dataFormat","assert","batchSize","shape","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","xValues","data","get","dataId","values","result","Float32Array","outputIdx","b","h","inH","Math","floor","offsetH","w","inW","offsetW","offsetD","d","inD","inputIdx","makeTensorInfo","dtype","depthToSpaceConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/DepthToSpace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA2FC,IAAI,QAAO,uBAAuB;AAIjJ,OAAM,SAAUC,YAAYA,CAACC,IAI5B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI,SAAS;IAAEC;EAAU,CAAC,GAAGH,KAAK;EAErCL,IAAI,CAACS,MAAM,CACPD,UAAU,KAAK,MAAM,EACrB,MAAM,+DACFA,UAAU,EAAE,CAAC;EAErB,MAAME,SAAS,GAAGJ,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;EAC5B,MAAMC,WAAW,GAAGN,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;EAC9B,MAAME,UAAU,GAAGP,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;EAC7B,MAAMG,UAAU,GAAGR,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;EAE7B,MAAMI,YAAY,GAAGH,WAAW,GAAGL,SAAS;EAC5C,MAAMS,WAAW,GAAGH,UAAU,GAAGN,SAAS;EAC1C,MAAMU,WAAW,GAAGH,UAAU,IAAIP,SAAS,GAAGA,SAAS,CAAC;EAExD,MAAMW,OAAO,GAAGd,OAAO,CAACe,IAAI,CAACC,GAAG,CAACd,CAAC,CAACe,MAAM,CAAC,CAACC,MAAoB;EAC/D,MAAMC,MAAM,GACR,IAAIC,YAAY,CAACd,SAAS,GAAGK,YAAY,GAAGC,WAAW,GAAGC,WAAW,CAAC;EAE1E,IAAIQ,SAAS,GAAG,CAAC;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,SAAS,EAAE,EAAEgB,CAAC,EAAE;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,YAAY,EAAE,EAAEY,CAAC,EAAE;MACrC,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,GAAGpB,SAAS,CAAC;MACrC,MAAMwB,OAAO,GAAIJ,CAAC,GAAGpB,SAAU;MAC/B,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,WAAW,EAAE,EAAEgB,CAAC,EAAE;QACpC,MAAMC,GAAG,GAAGJ,IAAI,CAACC,KAAK,CAACE,CAAC,GAAGzB,SAAS,CAAC;QACrC,MAAM2B,OAAO,GAAIF,CAAC,GAAGzB,SAAU;QAC/B,MAAM4B,OAAO,GAAG,CAACJ,OAAO,GAAGxB,SAAS,GAAG2B,OAAO,IAAIjB,WAAW;QAC7D,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,WAAW,EAAE,EAAEmB,CAAC,EAAE;UACpC,MAAMC,GAAG,GAAGD,CAAC,GAAGD,OAAO;UACvB,MAAMG,QAAQ,GACVD,GAAG,GAAGvB,UAAU,IAAImB,GAAG,GAAGpB,UAAU,IAAIe,GAAG,GAAGhB,WAAW,GAAGc,CAAC,CAAC,CAAC;UACnEH,MAAM,CAACE,SAAS,EAAE,CAAC,GAAGP,OAAO,CAACoB,QAAQ,CAAC;;;;;EAM/C,OAAOlC,OAAO,CAACmC,cAAc,CACzB,CAAC7B,SAAS,EAAEK,YAAY,EAAEC,WAAW,EAAEC,WAAW,CAAC,EAAEX,CAAC,CAACkC,KAAK,EAAEjB,MAAM,CAAC;AAC3E;AAEA,OAAO,MAAMkB,kBAAkB,GAAiB;EAC9CC,UAAU,EAAE3C,YAAY;EACxB4C,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE3C;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}