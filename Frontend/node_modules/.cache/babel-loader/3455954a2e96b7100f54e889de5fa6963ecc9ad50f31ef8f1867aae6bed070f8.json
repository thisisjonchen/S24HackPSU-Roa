{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function avgPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, 'float32');\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n  const dyData = backend.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, 'float32', dyData);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const avgPoolGradConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad\n};","map":{"version":3,"names":["AvgPoolGrad","backend_util","buffer","assertNotComplex","avgPoolGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","convInfo","computePool2DInfo","shape","strideHeight","strideWidth","filterHeight","filterWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padLeft","padInfo","left","padTop","top","dx","avgMultiplier","dyData","data","get","dataId","values","dyBuf","b","batchSize","d","inChannels","dxR","inHeight","dxC","inWidth","dyRCorner","dyCCorner","dotProd","wR","dyR","outHeight","Math","floor","wC","dyC","outWidth","pixel","set","makeTensorInfo","dtype","avgPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}