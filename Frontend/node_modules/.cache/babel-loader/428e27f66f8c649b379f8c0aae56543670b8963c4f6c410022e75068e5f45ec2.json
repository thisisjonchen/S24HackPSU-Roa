{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\n// tslint:enable\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x) {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x) {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x];\n  }\n  return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs) {\n  let x;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes) {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes;\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes;\n  }\n}","map":{"version":3,"names":["ValueError","isArrayOfShapes","x","Array","isArray","normalizeShapeList","length","getExactlyOneTensor","xs","getExactlyOneShape","shapes"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/utils/types_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\n// tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x: Shape|Shape[]): boolean {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x: Shape|Shape[]): Shape[] {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x] as Shape[];\n  }\n  return x as Shape[];\n}\n\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs: Tensor|Tensor[]): Tensor {\n  let x: Tensor;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes: Shape|Shape[]): Shape {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes as Shape[];\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes as Shape;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;AAaA,SAAQA,UAAU,QAAO,WAAW;AAEpC;AAEA;;;AAGA,OAAM,SAAUC,eAAeA,CAACC,CAAgB;EAC9C,OAAOC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD;AAEA;;;;;;AAMA,OAAM,SAAUG,kBAAkBA,CAACH,CAAgB;EACjD,IAAIA,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;IAClB,OAAO,EAAE;;EAEX,IAAI,CAACH,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACxB,OAAO,CAACA,CAAC,CAAY;;EAEvB,OAAOA,CAAY;AACrB;AAEA;;;;;;AAMA,OAAM,SAAUK,mBAAmBA,CAACC,EAAmB;EACrD,IAAIN,CAAS;EACb,IAAIC,KAAK,CAACC,OAAO,CAACI,EAAE,CAAC,EAAE;IACrB,IAAIA,EAAE,CAACF,MAAM,KAAK,CAAC,EAAE;MACnB,MAAM,IAAIN,UAAU,CAAC,uCAAuCQ,EAAE,CAACF,MAAM,EAAE,CAAC;;IAE1EJ,CAAC,GAAGM,EAAE,CAAC,CAAC,CAAC;GACV,MAAM;IACLN,CAAC,GAAGM,EAAE;;EAER,OAAON,CAAC;AACV;AAEA;;;;;;;;;;AAUA,OAAM,SAAUO,kBAAkBA,CAACC,MAAqB;EACtD,IAAIP,KAAK,CAACC,OAAO,CAACM,MAAM,CAAC,IAAIP,KAAK,CAACC,OAAO,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IACrD,IAAIA,MAAM,CAACJ,MAAM,KAAK,CAAC,EAAE;MACvBI,MAAM,GAAGA,MAAiB;MAC1B,OAAOA,MAAM,CAAC,CAAC,CAAC;KACjB,MAAM;MACL,MAAM,IAAIV,UAAU,CAAC,iCAAiCU,MAAM,CAACJ,MAAM,EAAE,CAAC;;GAEzE,MAAM;IACL,OAAOI,MAAe;;AAE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}