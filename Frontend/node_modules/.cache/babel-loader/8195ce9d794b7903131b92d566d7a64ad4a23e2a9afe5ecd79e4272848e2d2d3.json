{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    reductionIndices,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values;\n      const newShape = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values;\n    const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n  return out;\n}\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max\n};","map":{"version":3,"names":["Max","backend_util","util","maxImplCPU","maxImpl","transposeImpl","transposeImplCPU","max","args","inputs","backend","attrs","x","reductionIndices","keepDims","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","maxInputIsTransposed","shouldExecuteOnCPU","maxInput","xTexData","texData","get","dataId","values","newShape","Array","i","maxInputValues","dtype","makeTensorInfo","maxInputData","getInnerMostAxes","assertAxesAreInnerMostDims","maxOutShape","reduceShape","computeOutAndReduceShapes","outShape","expandShapeToKeepDim","out","outValues","sizeFromShape","outData","disposeIntermediateTensorInfo","maxConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Max.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}