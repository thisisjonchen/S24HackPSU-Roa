{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { tidy } from '../globals';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { complex } from './complex';\nimport { imag } from './imag';\nimport { neg } from './neg';\nimport { op } from './operation';\nimport { real } from './real';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm, conjugate) {\n  const $x = convertToTensor(x, 'x', 'transpose');\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);\n  });\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    perm\n  };\n  if ($x.dtype === 'complex64') {\n    return tidy(() => {\n      let $real = real($x);\n      let $imag = imag($x);\n      $real = ENGINE.runKernel(Transpose, {\n        x: $real\n      }, attrs);\n      $imag = ENGINE.runKernel(Transpose, {\n        x: $imag\n      }, attrs);\n      if (conjugate) {\n        $imag = neg($imag);\n      }\n      return complex($real, $imag);\n    });\n  }\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = /* @__PURE__ */op({\n  transpose_\n});","map":{"version":3,"names":["ENGINE","tidy","Transpose","convertToTensor","util","complex","imag","neg","op","real","transpose_","x","perm","conjugate","$x","shape","map","s","i","reverse","assert","rank","length","forEach","axis","clone","inputs","attrs","dtype","$real","$imag","runKernel","transpose"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/transpose.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {tidy} from '../globals';\nimport {Transpose, TransposeAttrs, TransposeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {complex} from './complex';\nimport {imag} from './imag';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {real} from './real';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_<T extends Tensor>(\n    x: T|TensorLike, perm?: number[], conjugate?: boolean): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs: TransposeInputs = {x: $x};\n  const attrs: TransposeAttrs = {perm};\n\n  if ($x.dtype === 'complex64') {\n    return tidy(() => {\n      let $real = real($x);\n      let $imag = imag($x);\n      $real = ENGINE.runKernel(\n          Transpose, {x: $real} as unknown as NamedTensorMap,\n          attrs as unknown as NamedAttrMap);\n      $imag = ENGINE.runKernel(\n          Transpose, {x: $imag} as unknown as NamedTensorMap,\n          attrs as unknown as NamedAttrMap);\n      if (conjugate) {\n        $imag = neg($imag);\n      }\n      return complex($real, $imag);\n    });\n  }\n\n  return ENGINE.runKernel(\n      Transpose, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const transpose = /* @__PURE__ */ op({transpose_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAAO,YAAY;AAC/B,SAAQC,SAAS,QAAwC,iBAAiB;AAI1E,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAC/B,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,IAAI,QAAO,QAAQ;AAE3B;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,UAAUA,CACfC,CAAe,EAAEC,IAAe,EAAEC,SAAmB;EACvD,MAAMC,EAAE,GAAGX,eAAe,CAACQ,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;EAE/C,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChBA,IAAI,GAAGE,EAAE,CAACC,KAAK,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAACC,OAAO,EAAE;;EAE5Cf,IAAI,CAACgB,MAAM,CACPN,EAAE,CAACO,IAAI,KAAKT,IAAI,CAACU,MAAM,EACvB,MAAM,qCAAqCR,EAAE,CAACO,IAAI,GAAG,GACjD,6BAA6BT,IAAI,GAAG,CAAC;EAC7CA,IAAI,CAACW,OAAO,CAACC,IAAI,IAAG;IAClBpB,IAAI,CAACgB,MAAM,CACPI,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGV,EAAE,CAACO,IAAI,EAC3B,MAAM,+CAA+CP,EAAE,CAACO,IAAI,GAAG,CAAC,EAAE,GAC9D,YAAYT,IAAI,EAAE,CAAC;EAC7B,CAAC,CAAC;EAEF,IAAIE,EAAE,CAACO,IAAI,IAAI,CAAC,EAAE;IAChB,OAAOP,EAAE,CAACW,KAAK,EAAE;;EAGnB,MAAMC,MAAM,GAAoB;IAACf,CAAC,EAAEG;EAAE,CAAC;EACvC,MAAMa,KAAK,GAAmB;IAACf;EAAI,CAAC;EAEpC,IAAIE,EAAE,CAACc,KAAK,KAAK,WAAW,EAAE;IAC5B,OAAO3B,IAAI,CAAC,MAAK;MACf,IAAI4B,KAAK,GAAGpB,IAAI,CAACK,EAAE,CAAC;MACpB,IAAIgB,KAAK,GAAGxB,IAAI,CAACQ,EAAE,CAAC;MACpBe,KAAK,GAAG7B,MAAM,CAAC+B,SAAS,CACpB7B,SAAS,EAAE;QAACS,CAAC,EAAEkB;MAAK,CAA8B,EAClDF,KAAgC,CAAC;MACrCG,KAAK,GAAG9B,MAAM,CAAC+B,SAAS,CACpB7B,SAAS,EAAE;QAACS,CAAC,EAAEmB;MAAK,CAA8B,EAClDH,KAAgC,CAAC;MACrC,IAAId,SAAS,EAAE;QACbiB,KAAK,GAAGvB,GAAG,CAACuB,KAAK,CAAC;;MAEpB,OAAOzB,OAAO,CAACwB,KAAK,EAAEC,KAAK,CAAC;IAC9B,CAAC,CAAC;;EAGJ,OAAO9B,MAAM,CAAC+B,SAAS,CACnB7B,SAAS,EAAEwB,MAAmC,EAC9CC,KAAgC,CAAC;AACvC;AAEA,OAAO,MAAMK,SAAS,GAAG,eAAgBxB,EAAE,CAAC;EAACE;AAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}