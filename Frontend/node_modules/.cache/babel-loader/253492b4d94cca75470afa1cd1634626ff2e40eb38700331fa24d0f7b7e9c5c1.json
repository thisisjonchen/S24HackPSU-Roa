{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../../ops/concat';\nimport { getGlobalTensorClass, Tensor } from '../../tensor';\ngetGlobalTensorClass().prototype.concat = function (x, axis) {\n  this.throwIfDisposed();\n  if (x instanceof Tensor) {\n    x = [x];\n  }\n  return concat([this, ...x], axis);\n};","map":{"version":3,"names":["concat","getGlobalTensorClass","Tensor","prototype","x","axis","throwIfDisposed"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/public/chained_ops/concat.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {concat} from '../../ops/concat';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    concat<T extends Tensor>(tensors: T|Array<T|TensorLike>, axis?: number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.concat = function<T extends Tensor>(\n    x: T|Array<T|TensorLike>, axis?: number): T {\n  this.throwIfDisposed();\n  if (x instanceof Tensor) {\n    x = [x];\n  }\n  return concat([this, ...x], axis) as T;\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,kBAAkB;AACvC,SAAQC,oBAAoB,EAAEC,MAAM,QAAO,cAAc;AASzDD,oBAAoB,EAAE,CAACE,SAAS,CAACH,MAAM,GAAG,UACtCI,CAAwB,EAAEC,IAAa;EACzC,IAAI,CAACC,eAAe,EAAE;EACtB,IAAIF,CAAC,YAAYF,MAAM,EAAE;IACvBE,CAAC,GAAG,CAACA,CAAC,CAAC;;EAET,OAAOJ,MAAM,CAAC,CAAC,IAAI,EAAE,GAAGI,CAAC,CAAC,EAAEC,IAAI,CAAM;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}