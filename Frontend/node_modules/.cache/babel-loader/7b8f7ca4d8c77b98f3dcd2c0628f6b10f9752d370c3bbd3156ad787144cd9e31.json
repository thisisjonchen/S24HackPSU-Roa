{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  let done = false;\n  let res;\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n    }\n  }\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n  const outputShape = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n  return {\n    batchSize,\n    sliceSize,\n    outerSize,\n    dimSize,\n    outputShape\n  };\n}","map":{"version":3,"names":["nearestDivisor","PARALLELIZE_THRESHOLD","segOpComputeOptimalWindowSize","inSize","numSegments","done","res","Math","floor","sqrt","computeOutShape","aShape","axis","outShape","rank","length","dim","push","collectGatherOpShapeInfo","x","indices","batchDims","indicesRank","shape","xRank","Error","i","dimSize","outputShape","batchSize","outerSize","sliceSize"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/segment_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { TensorInfo } from '../tensor_info';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}