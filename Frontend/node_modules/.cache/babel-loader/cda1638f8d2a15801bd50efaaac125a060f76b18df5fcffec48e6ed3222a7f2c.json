{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n    util.swap(array, left, k);\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    let valAndInd = new Array(vals.length);\n    vals.forEach((value, index) => valAndInd[index] = {\n      value,\n      index\n    });\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}","map":{"version":3,"names":["buffer","util","comparePair","a","b","valueDiff","value","index","select","array","k","left","right","length","n","i","z","Math","log","s","exp","sd","sqrt","sign","newLeft","max","floor","newRight","min","t","j","swap","topKImpl","x","xShape","xDtype","sorted","lastDim","batch","size","allTopKVals","getTypedArrayFromDType","allTopKIndices","offset","vals","subarray","valAndInd","Array","forEach","slice","sort","outOffset","topKVals","topKIndices","outputShape"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/TopK_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AAEA,SAAQA,MAAM,EAAqEC,IAAI,QAAO,uBAAuB;AAOrH,MAAMC,WAAW,GAAGA,CAACC,CAAO,EAAEC,CAAO,KAAI;EACvC,MAAMC,SAAS,GAAGD,CAAC,CAACE,KAAK,GAAGH,CAAC,CAACG,KAAK;EACnC,OAAOD,SAAS,KAAK,CAAC,GAAGF,CAAC,CAACI,KAAK,GAAGH,CAAC,CAACG,KAAK,GAAGF,SAAS;AACxD,CAAC;AAED;;;;;;;;;;;AAWA,SAASG,MAAMA,CAACC,KAAa,EAAEC,CAAS,EAAEC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAGH,KAAK,CAACI,MAAM,GAAG,CAAC;EAC1E,OAAOD,KAAK,GAAGD,IAAI,EAAE;IACnB;IACA;IACA;IACA,IAAIC,KAAK,GAAGD,IAAI,GAAG,GAAG,EAAE;MACtB,MAAMG,CAAC,GAAGF,KAAK,GAAGD,IAAI,GAAG,CAAC;MAC1B,MAAMI,CAAC,GAAGL,CAAC,GAAGC,IAAI,GAAG,CAAC;MACtB,MAAMK,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,CAAC,CAAC;MACrB,MAAMK,CAAC,GAAG,GAAG,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC,GAAGJ,CAAC,GAAG,CAAC,CAAC;MACnC,MAAMK,EAAE,GAAG,GAAG,GAAGJ,IAAI,CAACK,IAAI,CAACN,CAAC,GAAGG,CAAC,IAAIL,CAAC,GAAGK,CAAC,CAAC,GAAGL,CAAC,CAAC,GAAGG,IAAI,CAACM,IAAI,CAACR,CAAC,GAAGD,CAAC,GAAG,CAAC,CAAC;MACtE,MAAMU,OAAO,GAAGP,IAAI,CAACQ,GAAG,CAACd,IAAI,EAAEM,IAAI,CAACS,KAAK,CAAChB,CAAC,GAAGK,CAAC,GAAGI,CAAC,GAAGL,CAAC,GAAGO,EAAE,CAAC,CAAC;MAC9D,MAAMM,QAAQ,GAAGV,IAAI,CAACW,GAAG,CAAChB,KAAK,EAAEK,IAAI,CAACS,KAAK,CAAChB,CAAC,GAAG,CAACI,CAAC,GAAGC,CAAC,IAAII,CAAC,GAAGL,CAAC,GAAGO,EAAE,CAAC,CAAC;MACtEb,MAAM,CAACC,KAAK,EAAEC,CAAC,EAAEc,OAAO,EAAEG,QAAQ,CAAC;;IAErC;IACA,MAAME,CAAC,GAAGpB,KAAK,CAACC,CAAC,CAAC;IAClB,IAAIK,CAAC,GAAGJ,IAAI;IACZ,IAAImB,CAAC,GAAGlB,KAAK;IAEbX,IAAI,CAAC8B,IAAI,CAACtB,KAAK,EAAEE,IAAI,EAAED,CAAC,CAAC;IAEzB,IAAIR,WAAW,CAACO,KAAK,CAACG,KAAK,CAAC,EAAEiB,CAAC,CAAC,GAAG,CAAC,EAAE;MACpC5B,IAAI,CAAC8B,IAAI,CAACtB,KAAK,EAAEE,IAAI,EAAEC,KAAK,CAAC;;IAE/B,OAAOG,CAAC,GAAGe,CAAC,EAAE;MACZ7B,IAAI,CAAC8B,IAAI,CAACtB,KAAK,EAAEM,CAAC,EAAEe,CAAC,CAAC;MACtBf,CAAC,EAAE;MACHe,CAAC,EAAE;MACH,OAAO5B,WAAW,CAACO,KAAK,CAACM,CAAC,CAAC,EAAEc,CAAC,CAAC,GAAG,CAAC,EAAE;QACnCd,CAAC,GAAGA,CAAC,GAAG,CAAC;;MAEX,OAAOb,WAAW,CAACO,KAAK,CAACqB,CAAC,CAAC,EAAED,CAAC,CAAC,GAAG,CAAC,EAAE;QACnCC,CAAC,GAAGA,CAAC,GAAG,CAAC;;;IAGb,IAAI5B,WAAW,CAACO,KAAK,CAACE,IAAI,CAAC,EAAEkB,CAAC,CAAC,KAAK,CAAC,EAAE;MACrC5B,IAAI,CAAC8B,IAAI,CAACtB,KAAK,EAAEE,IAAI,EAAEmB,CAAC,CAAC;KAC1B,MAAM;MACLA,CAAC,GAAGA,CAAC,GAAG,CAAC;MACT7B,IAAI,CAAC8B,IAAI,CAACtB,KAAK,EAAEqB,CAAC,EAAElB,KAAK,CAAC;;IAE5B;IACA;IACA,IAAIkB,CAAC,IAAIpB,CAAC,EAAE;MACVC,IAAI,GAAGmB,CAAC,GAAG,CAAC;;IAEd,IAAIpB,CAAC,IAAIoB,CAAC,EAAE;MACVlB,KAAK,GAAGkB,CAAC,GAAG,CAAC;;;AAGnB;AAEA,OAAM,SAAUE,QAAQA,CACpBC,CAAa,EAAEC,MAAgB,EAAEC,MAAuB,EAAEzB,CAAS,EACnE0B,MAAe;EAEjB;EACA,MAAMC,OAAO,GAAGH,MAAM,CAACA,MAAM,CAACrB,MAAM,GAAG,CAAC,CAAC;EACzC,MAAM,CAACyB,KAAK,EAAEC,IAAI,CAAC,GAAG,CAACN,CAAC,CAACpB,MAAM,GAAGwB,OAAO,EAAEA,OAAO,CAAC;EACnD,MAAMG,WAAW,GAAGvC,IAAI,CAACwC,sBAAsB,CAACN,MAAM,EAAEG,KAAK,GAAG5B,CAAC,CAAC;EAClE,MAAMgC,cAAc,GAAGzC,IAAI,CAACwC,sBAAsB,CAAC,OAAO,EAAEH,KAAK,GAAG5B,CAAC,CAAC;EAEtE,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,KAAK,EAAElC,CAAC,EAAE,EAAE;IAC9B,MAAMuC,MAAM,GAAGvC,CAAC,GAAGmC,IAAI;IACvB,MAAMK,IAAI,GAAGX,CAAC,CAACY,QAAQ,CAACF,MAAM,EAAEA,MAAM,GAAGJ,IAAI,CAAC;IAE9C,IAAIO,SAAS,GAAW,IAAIC,KAAK,CAACH,IAAI,CAAC/B,MAAM,CAAC;IAC9C+B,IAAI,CAACI,OAAO,CACR,CAAC1C,KAAa,EAAEC,KAAa,KAAKuC,SAAS,CAACvC,KAAK,CAAC,GAAG;MAACD,KAAK;MAAEC;IAAK,CAAC,CAAC;IAExE,IAAIG,CAAC,GAAGoC,SAAS,CAACjC,MAAM,EAAE;MACxBL,MAAM,CAACsC,SAAS,EAAEpC,CAAC,CAAC;MACpBoC,SAAS,GAAGA,SAAS,CAACG,KAAK,CAAC,CAAC,EAAEvC,CAAC,CAAC;;IAGnC,IAAI0B,MAAM,EAAE;MACVU,SAAS,CAACI,IAAI,CAAChD,WAAW,CAAC;;IAG7B,MAAMiD,SAAS,GAAG/C,CAAC,GAAGM,CAAC;IACvB,MAAM0C,QAAQ,GAAGZ,WAAW,CAACK,QAAQ,CAACM,SAAS,EAAEA,SAAS,GAAGzC,CAAC,CAAC;IAC/D,MAAM2C,WAAW,GAAGX,cAAc,CAACG,QAAQ,CAACM,SAAS,EAAEA,SAAS,GAAGzC,CAAC,CAAC;IACrE,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;MAC1BqC,QAAQ,CAACrC,CAAC,CAAC,GAAG+B,SAAS,CAAC/B,CAAC,CAAC,CAACT,KAAK;MAChC+C,WAAW,CAACtC,CAAC,CAAC,GAAG+B,SAAS,CAAC/B,CAAC,CAAC,CAACR,KAAK;;;EAGvC;EACA;EACA,MAAM+C,WAAW,GAAGpB,MAAM,CAACe,KAAK,EAAE;EAClCK,WAAW,CAACA,WAAW,CAACzC,MAAM,GAAG,CAAC,CAAC,GAAGH,CAAC;EAEvC,OAAO,CACLV,MAAM,CAACsD,WAA0B,EAAEnB,MAAM,EAAEK,WAAW,CAAC,EACvDxC,MAAM,CAACsD,WAA0B,EAAE,OAAO,EAAEZ,cAAc,CAAC,CAC5D;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}