{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"names":["backend_util","MaxPool3DGrad","MaxPool3DBackpropProgram","Pool3DProgram","maxPool3DGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","dimRoundingMode","dilations","convInfo","computePool3DInfo","shape","maxPool3dPositionsProgram","maxPool3dPositions","runWebGLProgram","dtype","maxPoolBackpropProgram","result","disposeIntermediateTensorInfo","maxPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAY,EAA4BC,aAAa,QAA4D,uBAAuB;AAGhJ,SAAQC,wBAAwB,QAAO,0BAA0B;AACjE,SAAQC,aAAa,QAAO,aAAa;AAEzC,OAAM,SAAUC,aAAaA,CAACC,IAI7B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,EAAE;IAAEC;EAAK,CAAC,GAAGJ,MAAM;EAC1B,MAAMK,CAAC,GAAGD,KAAK;EACf,MAAM;IAACE,UAAU;IAAEC,OAAO;IAAEC,GAAG;IAAEC;EAAe,CAAC,GAAGP,KAAK;EACzD,MAAMQ,SAAS,GAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAErD,MAAMC,QAAQ,GAAGjB,YAAY,CAACkB,iBAAiB,CAC3CP,CAAC,CAACQ,KAAiD,EAAEP,UAAU,EAAEC,OAAO,EACxEG,SAAS,EAAEF,GAAG,EAAEC,eAAe,CAAC;EAEpC,MAAMK,yBAAyB,GAC3B,IAAIjB,aAAa,CAACc,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC;EAChE,MAAMI,kBAAkB,GACpBd,OAAO,CAACe,eAAe,CAACF,yBAAyB,EAAE,CAACT,CAAC,CAAC,EAAEA,CAAC,CAACY,KAAK,CAAC;EACpE,MAAMC,sBAAsB,GAAG,IAAItB,wBAAwB,CAACe,QAAQ,CAAC;EACrE,MAAMQ,MAAM,GAAGlB,OAAO,CAACe,eAAe,CAClCE,sBAAsB,EAAE,CAACf,EAAE,EAAEY,kBAAkB,CAAC,EAAEV,CAAC,CAACY,KAAK,CAAC;EAC9DhB,OAAO,CAACmB,6BAA6B,CAACL,kBAAkB,CAAC;EACzD,OAAOI,MAAM;AACf;AAEA,OAAO,MAAME,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE3B,aAAa;EACzB4B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}