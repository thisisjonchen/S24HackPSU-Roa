{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  assertNotComplex([x, filter], 'conv3d');\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xVals = backend.data.get(x.dataId).values;\n  const wVals = backend.data.get(filter.dataId).values;\n  const yVals = y.values;\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D\n};","map":{"version":3,"names":["backend_util","Conv3D","TensorBuffer","util","assertNotComplex","conv3D","args","inputs","backend","attrs","x","filter","strides","pad","dilations","convInfo","computeConv3DInfo","shape","filterDepth","filterHeight","filterWidth","dilationDepth","dilationHeight","dilationWidth","padInfo","padFront","front","padLeft","left","padTop","top","y","outShape","dtype","xVals","data","get","dataId","values","wVals","yVals","xStrides","computeStrides","filterStrides","b","batchSize","xOffset1","yOffset1","yF","outDepth","yOffset2","xFCorner","strideDepth","wF","xF","inDepth","wOffset1","xOffset2","yR","outHeight","yOffset3","xRCorner","strideHeight","wR","xR","inHeight","wOffset2","xOffset3","yC","outWidth","yOffset4","outChannels","xCCorner","strideWidth","wC","xC","inWidth","wOffset3","xOffset4","inChannels","wOffset4","d1","xVal","d2","makeTensorInfo","conv3DConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/Conv3D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}