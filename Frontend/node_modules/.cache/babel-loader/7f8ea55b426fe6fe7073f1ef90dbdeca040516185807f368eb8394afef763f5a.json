{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^(1/2)\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n  x = convertToTensor(x, 'x', 'norm');\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return reshape(norm, keepDimsShape);\n}\nfunction normImpl(x, p, axis = null) {\n  if (x.rank === 0) {\n    return abs(x);\n  }\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  }\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' || Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nexport const norm = /* @__PURE__ */op({\n  norm_\n});","map":{"version":3,"names":["convertToTensor","parseAxisParam","abs","axis_util","max","min","op","pow","reshape","scalar","sqrt","square","sum","norm_","x","ord","axis","keepDims","norm","normImpl","keepDimsShape","shape","axes","expandShapeToKeepDim","p","rank","Array","isArray","length","Infinity","Error"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/norm.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {abs} from './abs';\nimport * as axis_util from './axis_util';\nimport {max} from './max';\nimport {min} from './min';\nimport {op} from './operation';\nimport {pow} from './pow';\nimport {reshape} from './reshape';\nimport {scalar} from './scalar';\nimport {sqrt} from './sqrt';\nimport {square} from './square';\nimport {sum} from './sum';\n\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^(1/2)\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(\n    x: Tensor|TensorLike, ord: number|'euclidean'|'fro' = 'euclidean',\n    axis: number|number[] = null, keepDims = false): Tensor {\n  x = convertToTensor(x, 'x', 'norm');\n\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(\n    x: Tensor, p: number|string, axis: number|number[] = null): Tensor {\n  if (x.rank === 0) {\n    return abs(x);\n  }\n\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  }\n\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' ||\n      Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = /* @__PURE__ */ op({norm_});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}