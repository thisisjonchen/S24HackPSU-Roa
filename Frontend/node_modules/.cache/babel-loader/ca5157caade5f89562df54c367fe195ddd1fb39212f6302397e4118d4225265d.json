{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighbor(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  assertNotComplex(images, 'resizeNearestNeighbor');\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n  const effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  const effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ? effectiveRowSizeRatio * (r + 0.5) : effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ? effectiveColSizeRatio * (c + 0.5) : effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\nexport const resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor\n};","map":{"version":3,"names":["ResizeNearestNeighbor","util","assertNotComplex","resizeNearestNeighbor","args","inputs","backend","attrs","images","alignCorners","halfPixelCenters","size","imagesStrides","computeStrides","shape","newHeight","newWidth","batch","oldHeight","oldWidth","numChannels","xValues","data","get","dataId","values","output","Float32Array","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","outputOffset","b","batchOffset","r","sourceFracRow","sourceNearestRow","Math","min","round","floor","max","rowOffset","c","sourceFracCol","sourceNearestCol","colOffset","d","newVal","makeTensorInfo","dtype","resizeNearestNeighborConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}