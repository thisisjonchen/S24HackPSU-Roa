{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n  const $image = convertToTensor(image, 'image', 'threshold');\n  /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n  Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n  const RED_INTENCITY_COEF = 0.2989;\n  const GREEN_INTENCITY_COEF = 0.5870;\n  const BLUE_INTENCITY_COEF = 0.1140;\n  const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n  let $threshold = mul(tensor1d([threshValue]), 255);\n  let r, g, b, grayscale;\n  util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' + `but got rank ${$image.rank}.`);\n  util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' + 'image color channel must be equal to 3 or 1' + `but got ${$image.shape[2]}.`);\n  util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' + `but got dtype ${$image.dtype}.`);\n  util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n  if ($image.shape[2] === 3) {\n    [r, g, b] = split($image, [1, 1, 1], -1);\n    const $r = mul(r, RED_INTENCITY_COEF);\n    const $g = mul(g, GREEN_INTENCITY_COEF);\n    const $b = mul(b, BLUE_INTENCITY_COEF);\n    grayscale = add(add($r, $g), $b);\n  } else {\n    grayscale = image;\n  }\n  if (method === 'otsu') {\n    const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n    $threshold = otsu($histogram, totalPixelsInImage);\n  }\n  const invCondition = inverted ? lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n  const result = cast(mul(invCondition, 255), 'int32');\n  return result;\n}\nfunction otsu(histogram, total) {\n  let bestThresh = tensor1d([-1]);\n  let bestInBetVar = tensor1d([0]);\n  let cInBetVar = tensor1d([0]);\n  let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n  for (let index = 0; index < histogram.size - 1; index++) {\n    classFirst = slice(histogram, 0, index + 1);\n    classSecond = slice(histogram, index + 1);\n    weightForeground = div(sum(classFirst), total);\n    weightBack = div(sum(classSecond), total);\n    const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n    meanFirst = div(meanFirstDivA, sum(classFirst));\n    const meanSecFill = fill(classSecond.shape, classFirst.size);\n    const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n    const meanSecMul = mul(classSecond, meanSecAdd);\n    meanSec = div(sum(meanSecMul), sum(classSecond));\n    const cInBetVarSubA = sub(meanFirst, meanSec);\n    const cInBetVarSubB = sub(meanFirst, meanSec);\n    const cInBetVarMul = mul(weightForeground, weightBack);\n    cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n    const condition = greater(cInBetVar, bestInBetVar);\n    bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n    bestThresh = where(condition, tensor1d([index]), bestThresh);\n  }\n  return bestThresh;\n}\nexport const threshold = /* @__PURE__ */op({\n  threshold_\n});","map":{"version":3,"names":["tensor1d","op","cast","split","bincount","lessEqual","greater","sum","add","mul","div","sub","round","where","fill","slice","range","tensor","util","convertToTensor","threshold_","image","method","inverted","threshValue","$image","RED_INTENCITY_COEF","GREEN_INTENCITY_COEF","BLUE_INTENCITY_COEF","totalPixelsInImage","shape","$threshold","r","g","b","grayscale","assert","rank","dtype","$r","$g","$b","$histogram","otsu","invCondition","result","histogram","total","bestThresh","bestInBetVar","cInBetVar","classFirst","classSecond","meanFirst","meanSec","weightForeground","weightBack","index","size","meanFirstDivA","meanSecFill","meanSecAdd","meanSecMul","cInBetVarSubA","cInBetVarSubB","cInBetVarMul","condition","threshold"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/image/threshold.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { Tensor1D, Tensor3D } from '../../tensor';\nimport { tensor1d } from '../tensor1d';\nimport { TensorLike } from '../../types';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport {slice} from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\n\nfunction threshold_(\n    image: Tensor3D | TensorLike,\n    method = 'binary',\n    inverted = false,\n    threshValue = 0.5\n): Tensor3D {\n    const $image = convertToTensor(image, 'image', 'threshold');\n\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n\tReference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n\n    util.assert(\n        $image.rank === 3,\n        () => 'Error in threshold: image must be rank 3,' +\n            `but got rank ${$image.rank}.`);\n\n    util.assert(\n        $image.shape[2] === 3 || $image.shape[2]=== 1,\n        () => 'Error in threshold: ' +\n            'image color channel must be equal to 3 or 1' +\n            `but got ${$image.shape[2]}.`);\n\n    util.assert(\n      $image.dtype === 'int32' || $image.dtype === 'float32',\n      () => 'Error in dtype: image dtype must be int32 or float32,' +\n          `but got dtype ${$image.dtype}.`);\n\n    util.assert(\n      method === 'otsu' || method === 'binary',\n      () => `Method must be binary or otsu, but was ${method}`);\n\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r,RED_INTENCITY_COEF);\n        const $g = mul(g,GREEN_INTENCITY_COEF);\n        const $b = mul(b,BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    } else {\n        grayscale = image;\n    }\n\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32') as Tensor1D,\n            tensor([]),\n            256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n\n    const result = cast(mul(invCondition,255), 'int32');\n\n    return result as Tensor3D;\n}\n\nfunction otsu(histogram: Tensor1D, total: number):Tensor1D {\n\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst,\n        meanSec, weightForeground, weightBack;\n\n    for (let index = 0; index < histogram.size-1; index++) {\n\n        classFirst = slice(histogram, 0, index + 1);\n\n        classSecond = slice(histogram,index + 1);\n\n        weightForeground = div(sum(classFirst),total);\n\n        weightBack = div(sum(classSecond),total);\n\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n\n        meanFirst = div(meanFirstDivA, sum(classFirst) );\n\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0,classSecond.size),meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul,cInBetVarSubA), cInBetVarSubB);\n\n        const condition = greater(cInBetVar, bestInBetVar);\n\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n\n    }\n    return bestThresh;\n}\n\nexport const threshold = /* @__PURE__ */ op({ threshold_ });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}