{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf':\n      {\n        const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n        const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n        const cond = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        const condValue = await cond.data();\n        if (condValue[0]) {\n          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        } else {\n          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        }\n      }\n    case 'While':\n    case 'StatelessWhile':\n      {\n        const bodyFunc = getParamValue('body', node, tensorMap, context);\n        const condFunc = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        // Calculate the condition of the loop\n        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        const argIds = args.map(tensor => tensor.id);\n        let condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n        let result = args;\n        while (condValue[0]) {\n          // Record the previous result for intermediate tensor tracking\n          const origResult = result;\n          // Execution the body of the loop\n          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          const resultIds = result.map(tensor => tensor.id);\n          // Dispose the intermediate tensor for body function that is not global\n          // kept, not input/output of the body function\n          origResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n          // Recalcuate the condition of the loop using the latest results.\n          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          condValue = await condResult[0].data();\n          // Dispose the intermediate tensors for condition function\n          condResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n        }\n        return result;\n      }\n    case 'LoopCond':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        return [cloneTensor(pred)];\n      }\n    case 'Switch':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        let data = getParamValue('data', node, tensorMap, context);\n        if (!data.kept) {\n          data = cloneTensor(data);\n        }\n        // Outputs nodes :0 => false, :1 => true\n        return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n      }\n    case 'Merge':\n      {\n        const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n        if (inputName) {\n          const data = getTensor(inputName, tensorMap, context);\n          return [cloneTensor(data)];\n        }\n        return undefined;\n      }\n    case 'Enter':\n      {\n        const frameId = getParamValue('frameName', node, tensorMap, context);\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.enterFrame(frameId);\n        return [cloneTensor(data)];\n      }\n    case 'Exit':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.exitFrame();\n        return [cloneTensor(data)];\n      }\n    case 'NextIteration':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.nextIteration();\n        return [cloneTensor(data)];\n      }\n    case 'TensorArrayV3':\n      {\n        const size = getParamValue('size', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n        const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n        const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n        const name = getParamValue('name', node, tensorMap, context);\n        const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n        context.addTensorArray(tensorArray);\n        return [tensorArray.idTensor, scalar(1.0)];\n      }\n    case 'TensorArrayWriteV3':\n      {\n        const id = getParamValue('tensorArrayId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const writeTensorArray = context.getTensorArray(id.id);\n        writeTensorArray.write(index, writeTensor);\n        return [writeTensorArray.idTensor];\n      }\n    case 'TensorArrayReadV3':\n      {\n        const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const readTensorArray = context.getTensorArray(readId.id);\n        return [readTensorArray.read(readIndex)];\n      }\n    case 'TensorArrayGatherV3':\n      {\n        const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n        const gatherTensorArray = context.getTensorArray(gatherId.id);\n        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n      }\n    case 'TensorArrayScatterV3':\n      {\n        const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const scatterTensorArray = context.getTensorArray(scatterId.id);\n        scatterTensorArray.scatter(scatterIndices, scatterTensor);\n        return [scatterTensorArray.idTensor];\n      }\n    case 'TensorArrayConcatV3':\n      {\n        const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const concatTensorArray = context.getTensorArray(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        return [concatTensorArray.concat(concatDtype)];\n      }\n    case 'TensorArraySplitV3':\n      {\n        const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const splitTensorArray = context.getTensorArray(splitId.id);\n        splitTensorArray.split(lengths, splitTensor);\n        return [splitTensorArray.idTensor];\n      }\n    case 'TensorArraySizeV3':\n      {\n        const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const sizeTensorArray = context.getTensorArray(sizeId.id);\n        return [scalar(sizeTensorArray.size(), 'int32')];\n      }\n    case 'TensorArrayCloseV3':\n      {\n        const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const closeTensorArray = context.getTensorArray(closeId.id);\n        closeTensorArray.clearAndClose();\n        return [closeTensorArray.idTensor];\n      }\n    case 'TensorListSetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.setItem(index, writeTensor);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListGetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.getItem(readIndex, elementShape, elementDType)];\n      }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter':\n      {\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListReserve':\n    case 'EmptyTensorList':\n      {\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        let numElementsParam;\n        if (node.op === 'TensorListReserve') {\n          numElementsParam = 'numElements';\n        } else {\n          numElementsParam = 'maxNumElements';\n        }\n        const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n        const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n        const tensorList = reserve(elementShape, elementDtype, numElements, maxNumElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListGather':\n      {\n        const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(gatherId.id);\n        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n      }\n    case 'TensorListStack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.stack(elementShape, elementDtype, numElements)];\n      }\n    case 'TensorListFromTensor':\n      {\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = fromTensor(tensor, elementShape, elementDtype);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListConcat':\n    case 'TensorListConcatV2':\n      {\n        const concatId = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        return [tensorList.concat(concatDtype, elementShape)];\n      }\n    case 'TensorListPushBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.pushBack(writeTensor);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListPopBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.popBack(elementShape, elementDType)];\n      }\n    case 'TensorListSplit':\n      {\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const tensorList = split(splitTensor, lengths, elementShape);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListLength':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [scalar(tensorList.size(), 'int32')];\n      }\n    case 'TensorListResize':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const srcTensorList = context.getTensorList(idTensor.id);\n        const destTensorList = srcTensorList.resize(size);\n        context.addTensorList(destTensorList);\n        return [destTensorList.idTensor];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'control';","map":{"version":3,"names":["scalar","TensorArray","fromTensor","reserve","scatter","split","cloneTensor","getParamValue","getTensor","executeOp","node","tensorMap","context","op","thenFunc","elseFunc","cond","args","condValue","data","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","map","tensor","id","forEach","kept","indexOf","dispose","result","origResult","resultIds","pred","undefined","inputName","inputNames","find","name","frameId","enterFrame","exitFrame","nextIteration","size","dtype","elementShape","dynamicSize","clearAfterRead","identicalElementShapes","tensorArray","addTensorArray","idTensor","index","writeTensor","writeTensorArray","getTensorArray","write","readId","readIndex","readTensorArray","read","gatherId","gatherIndices","gatherDtype","gatherTensorArray","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","concatId","concatTensorArray","concatDtype","concat","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","numElements","addTensorList","elementDtype","numElementsParam","maxNumElements","stack","pushBack","popBack","srcTensorList","destTensorList","resize","TypeError","CATEGORY"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-converter/src/operations/executors/control_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n      const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n      const tensorList =\n          reserve(elementShape, elementDtype, numElements, maxNumElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat':\n    case 'TensorListConcatV2': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListLength': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [scalar(tensorList.size(), 'int32')];\n    }\n    case 'TensorListResize': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number;\n\n      const srcTensorList = context.getTensorList(idTensor.id);\n      const destTensorList = srcTensorList.resize(size);\n      context.addTensorList(destTensorList);\n      return [destTensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}