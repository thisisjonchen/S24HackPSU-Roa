{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '../kernel_names';\nimport { zerosLike } from '../ops/zeros_like';\nexport const roundGradConfig = {\n  kernelName: Round,\n  gradFunc: dy => {\n    // TODO(nsthorat): Let gradients be null for cases where we want to stop\n    // backpropgation.\n    return {\n      x: () => zerosLike(dy)\n    };\n  }\n};","map":{"version":3,"names":["Round","zerosLike","roundGradConfig","kernelName","gradFunc","dy","x"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/gradients/Round_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Round} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const roundGradConfig: GradConfig = {\n  kernelName: Round,\n  gradFunc: (dy: Tensor) => {\n    // TODO(nsthorat): Let gradients be null for cases where we want to stop\n    // backpropgation.\n    return {x: () => zerosLike(dy)};\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,KAAK,QAAO,iBAAiB;AAErC,SAAQC,SAAS,QAAO,mBAAmB;AAG3C,OAAO,MAAMC,eAAe,GAAe;EACzCC,UAAU,EAAEH,KAAK;EACjBI,QAAQ,EAAGC,EAAU,IAAI;IACvB;IACA;IACA,OAAO;MAACC,CAAC,EAAEA,CAAA,KAAML,SAAS,CAACI,EAAE;IAAC,CAAC;EACjC;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}