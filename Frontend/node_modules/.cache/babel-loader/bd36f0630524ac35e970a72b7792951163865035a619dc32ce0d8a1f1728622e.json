{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Im2ColPackedProgram } from '../im2col_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\nimport { batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD } from './BatchMatMul_impl';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(shape, isChannelsLast) {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ? [...shape.slice(0, -3) /* batch */, shape[length - 3] * shape[length - 2] /* height * width */, shape[length - 1] /* channel */] : [...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */, shape[length - 2] * shape[length - 1] /* height * width */];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n  let out;\n  const intermediates = [];\n  if (preluActivationWeights != null) {\n    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(bias);\n    }\n  }\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked && isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 && util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {\n        x: filter\n      },\n      backend,\n      attrs: {\n        shape: [1, convInfo.inChannels, convInfo.outChannels]\n      }\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    out = identity({\n      inputs: {\n        x: pointwiseConv\n      },\n      backend\n    });\n    out.shape = convInfo.outShape;\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: isChannelsLast ? [convInfo.batchSize, numCols, convInfo.inChannels] : [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {\n        x: filter\n      },\n      backend,\n      attrs: {\n        shape: [1, convInfo.inChannels, convInfo.outChannels]\n      }\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n    out = reshape({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        shape: convInfo.outShape\n      }\n    });\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return out;\n}\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n  const isChannelsLast = dataFormat === 'channelsLast';\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n  const intermediates = [];\n  if (preluActivationWeights != null) {\n    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(bias);\n    }\n  }\n  const w2Row = reshape({\n    inputs: {\n      x: filter\n    },\n    backend,\n    attrs: {\n      shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]\n    }\n  });\n  intermediates.push(w2Row);\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [x.shape, [convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels], [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]];\n  const im2Col = backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped = reshape({\n    inputs: {\n      x: im2Col\n    },\n    backend,\n    attrs: {\n      shape: x2ColShape\n    }\n  });\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(isChannelsLast ? im2ColReshaped.shape : w2Row.shape, isChannelsLast ? w2Row.shape : im2ColReshaped.shape, isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] : [convInfo.batchSize, convInfo.outChannels, numCols], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs = isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape({\n    inputs: {\n      x: product\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return out;\n}","map":{"version":3,"names":["util","Im2ColPackedProgram","mapActivationToShaderProgram","MatMulPackedProgram","webgl_util","batchMatMulImpl","MATMUL_SHARED_DIM_THRESHOLD","identity","reshape","getShapeForBatchMatMul","shape","isChannelsLast","length","slice","conv2dByMatMul","x","filter","convInfo","backend","bias","preluActivationWeights","leakyreluAlpha","activation","xShape","xTexData","texData","get","dataId","sharedMatMulDim","inChannels","outerShapeX","outerShapeFilter","outChannels","dataFormat","transposeA","transposeB","out","intermediates","targetShape","inputs","attrs","push","batchMatMulWillBeUnpacked","canOptimize","isPacked","texture","arraysEqual","xReshaped","dtype","originalXTexDataShape","assert","isReshapeFree","filterReshaped","pointwiseConv","a","b","pointwiseConvTexData","outShape","numCols","outHeight","outWidth","batchSize","result","i","disposeIntermediateTensorInfo","conv2dWithIm2Row","filterWidth","filterHeight","sharedDim","x2ColShape","w2Row","sizeFromShape","im2ColProgram","customValues","padInfo","top","left","strideHeight","strideWidth","dilationHeight","dilationWidth","im2Col","runWebGLProgram","im2ColReshaped","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","matmulProgram","$leakyreluAlpha","makeTensorInfo","createScalarValue","product"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Conv2D_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}