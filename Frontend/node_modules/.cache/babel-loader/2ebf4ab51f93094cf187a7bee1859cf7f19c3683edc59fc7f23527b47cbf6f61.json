{"ast":null,"code":"/**\n * @license\n * Copyright 2023 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from './topology';\nimport { RandomSeed } from '../backend/random_seed';\nclass BaseRandomLayer extends Layer {\n  constructor(args) {\n    super(args);\n    this.randomGenerator = new RandomSeed(args.seed);\n  }\n  getConfig() {\n    const config = {\n      'seed': this.randomGenerator.seed\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n// A layer handle the random number creation and savemodel behavior.\n/** @nocollapse */\nBaseRandomLayer.className = 'BaseRandomLayer';\nexport { BaseRandomLayer };","map":{"version":3,"names":["Layer","RandomSeed","BaseRandomLayer","constructor","args","randomGenerator","seed","getConfig","config","baseConfig","Object","assign","className"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/engine/base_random_layer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport { LayerArgs, Layer } from './topology';\nimport { RandomSeed } from '../backend/random_seed';\nimport { serialization } from '@tensorflow/tfjs-core';\n\nexport declare interface BaseRandomLayerArgs extends LayerArgs {\n  seed?: number;\n}\n\nexport abstract class BaseRandomLayer extends Layer {\n  // A layer handle the random number creation and savemodel behavior.\n  /** @nocollapse */\n  static className = 'BaseRandomLayer';\n  protected randomGenerator: RandomSeed;\n\n  constructor(args: BaseRandomLayerArgs) {\n    super(args);\n    this.randomGenerator = new RandomSeed(args.seed);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'seed': this.randomGenerator.seed\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;AAUA,SAAoBA,KAAK,QAAQ,YAAY;AAC7C,SAASC,UAAU,QAAQ,wBAAwB;AAOnD,MAAsBC,eAAgB,SAAQF,KAAK;EAMjDG,YAAYC,IAAyB;IACnC,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,eAAe,GAAG,IAAIJ,UAAU,CAACG,IAAI,CAACE,IAAI,CAAC;EAClD;EAESC,SAASA,CAAA;IAChB,MAAMC,MAAM,GAA6B;MACvC,MAAM,EAAE,IAAI,CAACH,eAAe,CAACC;KAC9B;IAED,MAAMG,UAAU,GAAG,KAAK,CAACF,SAAS,EAAE;IACpCG,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;IACjC,OAAOD,MAAM;EACf;;AAlBA;AACA;AACON,eAAA,CAAAU,SAAS,GAAG,iBAAiB;SAHhBV,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}