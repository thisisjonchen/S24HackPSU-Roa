{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n  /**\n   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n   *\n   * The byte arrays producetd from the ByteChunkIterator on which this is\n   * called will be interpreted as concatenated.  No assumptions are made about\n   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n   * character may span the boundary between chunks.  This naturally happens,\n   * for instance, when reading fixed-size byte arrays from a file.\n   */\n  decodeUTF8() {\n    return new Utf8Iterator(this);\n  }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    this.impl = new Utf8IteratorImpl(upstream);\n  }\n  summary() {\n    return this.impl.summary();\n  }\n  async next() {\n    return this.impl.next();\n  }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    if (env().get('IS_BROWSER')) {\n      this.decoder = new TextDecoder('utf-8');\n    } else {\n      // tslint:disable-next-line:no-require-imports\n      const {\n        StringDecoder\n      } = require('string_decoder');\n      this.decoder = new StringDecoder('utf8');\n    }\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Utf8`;\n  }\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    let chunk;\n    if (chunkResult.done) {\n      return false;\n    } else {\n      chunk = chunkResult.value;\n    }\n    let text;\n    if (env().get('IS_BROWSER')) {\n      text = this.decoder.decode(chunk, {\n        stream: true\n      });\n    } else {\n      text = this.decoder.write(Buffer.from(chunk.buffer));\n    }\n    this.outputQueue.push(text);\n    return true;\n  }\n}","map":{"version":3,"names":["env","LazyIterator","OneToManyIterator","StringIterator","ByteChunkIterator","decodeUTF8","Utf8Iterator","constructor","upstream","impl","Utf8IteratorImpl","summary","next","get","decoder","TextDecoder","StringDecoder","require","pump","chunkResult","chunk","done","value","text","decode","stream","write","Buffer","from","buffer","outputQueue","push"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-data/src/iterators/byte_chunk_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {LazyIterator, OneToManyIterator} from './lazy_iterator';\nimport {StringIterator} from './string_iterator';\n\nexport abstract class ByteChunkIterator extends LazyIterator<Uint8Array> {\n  /**\n   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n   *\n   * The byte arrays producetd from the ByteChunkIterator on which this is\n   * called will be interpreted as concatenated.  No assumptions are made about\n   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n   * character may span the boundary between chunks.  This naturally happens,\n   * for instance, when reading fixed-size byte arrays from a file.\n   */\n  decodeUTF8(): StringIterator {\n    return new Utf8Iterator(this);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass Utf8Iterator extends StringIterator {\n  private impl: Utf8IteratorImpl;\n\n  constructor(protected upstream: LazyIterator<Uint8Array>) {\n    super();\n    this.impl = new Utf8IteratorImpl(upstream);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n}\n\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator<string> {\n  // `decoder` as `any` here to dynamically assign value based on the\n  // environment.\n  // tslint:disable-next-line:no-any\n  decoder: any;\n\n  constructor(protected readonly upstream: LazyIterator<Uint8Array>) {\n    super();\n    if (env().get('IS_BROWSER')) {\n      this.decoder = new TextDecoder('utf-8');\n    } else {\n      // tslint:disable-next-line:no-require-imports\n      const {StringDecoder} = require('string_decoder');\n      this.decoder = new StringDecoder('utf8');\n    }\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Utf8`;\n  }\n\n  async pump(): Promise<boolean> {\n    const chunkResult = await this.upstream.next();\n    let chunk;\n    if (chunkResult.done) {\n      return false;\n    } else {\n      chunk = chunkResult.value;\n    }\n\n    let text: string;\n    if (env().get('IS_BROWSER')) {\n      text = this.decoder.decode(chunk, {stream: true});\n    } else {\n      text = this.decoder.write(Buffer.from(chunk.buffer));\n    }\n    this.outputQueue.push(text);\n    return true;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,GAAG,QAAO,uBAAuB;AACzC,SAAQC,YAAY,EAAEC,iBAAiB,QAAO,iBAAiB;AAC/D,SAAQC,cAAc,QAAO,mBAAmB;AAEhD,OAAM,MAAgBC,iBAAkB,SAAQH,YAAwB;EACtE;;;;;;;;;EASAI,UAAUA,CAAA;IACR,OAAO,IAAIC,YAAY,CAAC,IAAI,CAAC;EAC/B;;AAGF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAMA,YAAa,SAAQH,cAAc;EAGvCI,YAAsBC,QAAkC;IACtD,KAAK,EAAE;IADa,KAAAA,QAAQ,GAARA,QAAQ;IAE5B,IAAI,CAACC,IAAI,GAAG,IAAIC,gBAAgB,CAACF,QAAQ,CAAC;EAC5C;EAEAG,OAAOA,CAAA;IACL,OAAO,IAAI,CAACF,IAAI,CAACE,OAAO,EAAE;EAC5B;EAEA,MAAMC,IAAIA,CAAA;IACR,OAAO,IAAI,CAACH,IAAI,CAACG,IAAI,EAAE;EACzB;;AAGF;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMF,gBAAiB,SAAQR,iBAAyB;EAMtDK,YAA+BC,QAAkC;IAC/D,KAAK,EAAE;IADsB,KAAAA,QAAQ,GAARA,QAAQ;IAErC,IAAIR,GAAG,EAAE,CAACa,GAAG,CAAC,YAAY,CAAC,EAAE;MAC3B,IAAI,CAACC,OAAO,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;KACxC,MAAM;MACL;MACA,MAAM;QAACC;MAAa,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;MACjD,IAAI,CAACH,OAAO,GAAG,IAAIE,aAAa,CAAC,MAAM,CAAC;;EAE5C;EACAL,OAAOA,CAAA;IACL,OAAO,GAAG,IAAI,CAACH,QAAQ,CAACG,OAAO,EAAE,UAAU;EAC7C;EAEA,MAAMO,IAAIA,CAAA;IACR,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACX,QAAQ,CAACI,IAAI,EAAE;IAC9C,IAAIQ,KAAK;IACT,IAAID,WAAW,CAACE,IAAI,EAAE;MACpB,OAAO,KAAK;KACb,MAAM;MACLD,KAAK,GAAGD,WAAW,CAACG,KAAK;;IAG3B,IAAIC,IAAY;IAChB,IAAIvB,GAAG,EAAE,CAACa,GAAG,CAAC,YAAY,CAAC,EAAE;MAC3BU,IAAI,GAAG,IAAI,CAACT,OAAO,CAACU,MAAM,CAACJ,KAAK,EAAE;QAACK,MAAM,EAAE;MAAI,CAAC,CAAC;KAClD,MAAM;MACLF,IAAI,GAAG,IAAI,CAACT,OAAO,CAACY,KAAK,CAACC,MAAM,CAACC,IAAI,CAACR,KAAK,CAACS,MAAM,CAAC,CAAC;;IAEtD,IAAI,CAACC,WAAW,CAACC,IAAI,CAACR,IAAI,CAAC;IAC3B,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}