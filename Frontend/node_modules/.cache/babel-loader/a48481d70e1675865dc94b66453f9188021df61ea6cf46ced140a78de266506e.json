{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nconst CHANNEL_CHAR_TO_INDEX_MAP = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\nexport class EncodeMatrixProgram {\n  constructor(outputShape, inputIsUnsignedByte = false, usedChannels = 'RGBA') {\n    this.variableNames = ['A'];\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length; usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n    this.userCode = `\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}","map":{"version":3,"names":["getGlslDifferences","useShapeUniforms","shader_util","CHANNEL_CHAR_TO_INDEX_MAP","EncodeMatrixProgram","constructor","outputShape","inputIsUnsignedByte","usedChannels","variableNames","customUniforms","name","type","glsl","enableShapeUniforms","length","output","mainLoop","usedChannelIndex","curChannel","userCode","getFlatIndexFrom3DOutput","getFlatIndexFrom3D","texture2D"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/encode_matrix_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,gBAAgB;AACjD,SAAsBC,gBAAgB,QAAO,cAAc;AAC3D,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD,MAAMC,yBAAyB,GAA2B;EACxD,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE;CACN;AAED,OAAM,MAAOC,mBAAmB;EAO9BC,YACIC,WAAqC,EAAEC,mBAAmB,GAAG,KAAK,EAClEC,YAAY,GAAG,MAAM;IARzB,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAIrB,KAAAC,cAAc,GAAG,CAAC;MAACC,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAgB,CAAE,CAAC;IAK5D,MAAMC,IAAI,GAAGb,kBAAkB,EAAE;IACjC,IAAI,CAACM,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACQ,mBAAmB,GAAGb,gBAAgB,CAAC,IAAI,CAACK,WAAW,CAACS,MAAM,CAAC;IAEpE,IAAIC,MAAM,GAAG,QAAQ;IACrB,IAAIT,mBAAmB,EAAE;MACvBS,MAAM,GAAG,4BAA4B;;IAGvC,IAAIC,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,gBAAgB,GAAG,CAAC,EAAEA,gBAAgB,GAAGV,YAAY,CAACO,MAAM,EAChEG,gBAAgB,EAAE,EAAE;MACvB,MAAMC,UAAU,GAAGX,YAAY,CAACU,gBAAgB,CAAC;MACjDD,QAAQ,IAAI;yBACOC,gBAAgB;8BACXf,yBAAyB,CAACgB,UAAU,CAAC;YACvD;;IAGR,IAAI,CAACC,QAAQ,GAAG;QAEZ,IAAI,CAACN,mBAAmB,GAAGZ,WAAW,CAACmB,wBAAwB,EAAE,GACtCnB,WAAW,CAACoB,kBAAkB,CAAChB,WAAW,CAAC;;;;;;uCAMvCE,YAAY,CAACO,MAAM;;sCAEpBP,YAAY,CAACO,MAAM;;;;;;0BAM/BF,IAAI,CAACU,SAAS;YAC5BN,QAAQ;;UAEVJ,IAAI,CAACG,MAAM,WAAWA,MAAM;;KAEjC;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}