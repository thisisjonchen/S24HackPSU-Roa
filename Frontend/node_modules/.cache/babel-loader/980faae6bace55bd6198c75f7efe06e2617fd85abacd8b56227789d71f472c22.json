{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function mirrorPad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    mode\n  } = attrs;\n  assertNotComplex(x, 'mirrorPad');\n  const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n  const xVals = backend.data.get(x.dataId).values;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n    resVals[i] = xVals[inIndex];\n  }\n  const outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad\n};","map":{"version":3,"names":["MirrorPad","util","assertNotComplex","mirrorPad","args","inputs","backend","attrs","x","paddings","mode","outShape","map","p","i","shape","start","end","offset","xVals","data","get","dataId","values","xRank","length","xStrides","computeStrides","resultSize","sizeFromShape","resultRank","resultStrides","resVals","getTypedArrayFromDType","dtype","coords","indexToLoc","c","inIndex","locToIndex","outId","write","mirrorPadConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-cpu/src/kernels/MirrorPad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as unknown as KernelFunc\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}