{"ast":null,"code":"var _jsxFileName = \"/Users/jonchen/Documents/HackPSU/s24hackpsu/src/components/recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WebcamRecorder() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [stream, setStream] = useState(null);\n  const [faceDetected, setFaceDetected] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const recordedChunks = useRef([]);\n  const captureInterval = useRef(null);\n  const faceDetector = useRef(null);\n  useEffect(() => {\n    startRecording();\n    async function loadFaceDetector() {\n      const model = await tf.loadGraphModel('/path/to/face_detection_model/model.json', {\n        fromFile: true\n      });\n      faceDetector.current = model;\n    }\n    loadFaceDetector();\n    function handleResize() {\n      if (videoRef.current && canvasRef.current) {\n        const videoHeight = window.innerHeight * 0.9;\n        videoRef.current.style.maxHeight = `${videoHeight}px`;\n        canvasRef.current.style.maxHeight = `${videoHeight}px`;\n      }\n    }\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  const startRecording = async () => {\n    try {\n      const constraints = {\n        video: {\n          width: 720,\n          height: 1280\n        }\n      };\n      const newStream = await navigator.mediaDevices.getUserMedia(constraints);\n      setStream(newStream);\n      const mediaRecorder = new MediaRecorder(newStream);\n      mediaRecorder.start();\n      setIsRecording(true);\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.ondataavailable = event => {\n        recordedChunks.current.push(event.data);\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(recordedChunks.current, {\n          type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'\n        });\n        const url = URL.createObjectURL(blob);\n        console.log('Recorded video URL:', url);\n        recordedChunks.current = [];\n      };\n      videoRef.current.srcObject = newStream;\n      captureInterval.current = setInterval(detectFaceOrRoad, 1000); // Detect every 1 second\n    } catch (error) {\n      console.error('Error accessing webcam:', error);\n    }\n  };\n  function stopRecording() {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n      videoRef.current.srcObject = null;\n    }\n    if (captureInterval.current) {\n      clearInterval(captureInterval.current);\n    }\n    setIsRecording(false);\n    window.location.replace('http://localhost:3000'); //TODO REPLACE URL AFTER TESTING!\n  }\n  async function detectFaceOrRoad() {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n    const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n    const tensor = tf.browser.fromPixels(imageData, 3);\n    const prediction = await faceDetector.current.executeAsync(tensor);\n    const faceDetected = prediction.length > 0;\n    setFaceDetected(faceDetected);\n    tensor.dispose();\n  }\n  function drawOverlay() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.font = '24px Arial';\n    ctx.fillStyle = 'white';\n    ctx.fillText('Point toward roads please', 10, 30);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0\n      },\n      children: faceDetected && drawOverlay()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(WebcamRecorder, \"8MVdcOkdcQ4N7el9L/1xRu+aa0Y=\");\n_c = WebcamRecorder;\nexport default WebcamRecorder;\nvar _c;\n$RefreshReg$(_c, \"WebcamRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","tf","jsxDEV","_jsxDEV","WebcamRecorder","_s","isRecording","setIsRecording","stream","setStream","faceDetected","setFaceDetected","videoRef","canvasRef","mediaRecorderRef","recordedChunks","captureInterval","faceDetector","startRecording","loadFaceDetector","model","loadGraphModel","fromFile","current","handleResize","videoHeight","window","innerHeight","style","maxHeight","addEventListener","removeEventListener","constraints","video","width","height","newStream","navigator","mediaDevices","getUserMedia","mediaRecorder","MediaRecorder","start","ondataavailable","event","push","data","onstop","blob","Blob","type","url","URL","createObjectURL","console","log","srcObject","setInterval","detectFaceOrRoad","error","stopRecording","state","stop","getTracks","forEach","track","clearInterval","location","replace","canvas","videoWidth","getContext","drawImage","imageData","getImageData","tensor","browser","fromPixels","prediction","executeAsync","length","dispose","drawOverlay","ctx","fillStyle","fillRect","font","fillText","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","position","left","top","onClick","_c","$RefreshReg$"],"sources":["/Users/jonchen/Documents/HackPSU/s24hackpsu/src/components/recorder.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction WebcamRecorder() {\n    const [isRecording, setIsRecording] = useState(false);\n    const [stream, setStream] = useState(null);\n    const [faceDetected, setFaceDetected] = useState(false);\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const mediaRecorderRef = useRef(null);\n    const recordedChunks = useRef([]);\n    const captureInterval = useRef(null);\n    const faceDetector = useRef(null);\n\n    useEffect(() => {\n        startRecording();\n        async function loadFaceDetector() {\n            const model = await tf.loadGraphModel('/path/to/face_detection_model/model.json', {\n                fromFile: true,\n            });\n            faceDetector.current = model;\n        }\n        loadFaceDetector();\n\n        function handleResize() {\n            if (videoRef.current && canvasRef.current) {\n                const videoHeight = window.innerHeight * 0.9;\n                videoRef.current.style.maxHeight = `${videoHeight}px`;\n                canvasRef.current.style.maxHeight = `${videoHeight}px`;\n            }\n        }\n\n        handleResize();\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    const startRecording = async () => {\n        try {\n            const constraints = { video: { width: 720, height: 1280 } };\n            const newStream = await navigator.mediaDevices.getUserMedia(constraints);\n            setStream(newStream);\n            const mediaRecorder = new MediaRecorder(newStream);\n\n            mediaRecorder.start();\n            setIsRecording(true);\n\n            mediaRecorderRef.current = mediaRecorder;\n            mediaRecorder.ondataavailable = (event) => {\n                recordedChunks.current.push(event.data);\n            };\n\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(recordedChunks.current, { type: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"' });\n                const url = URL.createObjectURL(blob);\n                console.log('Recorded video URL:', url);\n                recordedChunks.current = [];\n            };\n\n            videoRef.current.srcObject = newStream;\n            captureInterval.current = setInterval(detectFaceOrRoad, 1000); // Detect every 1 second\n        } catch (error) {\n            console.error('Error accessing webcam:', error);\n        }\n    };\n\n    function stopRecording() {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n            mediaRecorderRef.current.stop();\n        }\n        if (stream) {\n            stream.getTracks().forEach((track) => track.stop());\n            setStream(null);\n            videoRef.current.srcObject = null;\n        }\n        if (captureInterval.current) {\n            clearInterval(captureInterval.current);\n        }\n        setIsRecording(false);\n        window.location.replace('http://localhost:3000'); //TODO REPLACE URL AFTER TESTING!\n    }\n\n    async function detectFaceOrRoad() {\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n        const imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n        const tensor = tf.browser.fromPixels(imageData, 3);\n        const prediction = await faceDetector.current.executeAsync(tensor);\n        const faceDetected = prediction.length > 0;\n        setFaceDetected(faceDetected);\n        tensor.dispose();\n    }\n\n    function drawOverlay() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.font = '24px Arial';\n        ctx.fillStyle = 'white';\n        ctx.fillText('Point toward roads please', 10, 30);\n    }\n\n    return (\n        <div>\n            <video ref={videoRef} autoPlay></video>\n            <canvas ref={canvasRef} style={{ position: 'absolute', left: 0, top: 0 }}>\n                {faceDetected && drawOverlay()}\n            </canvas>\n            <div>\n                {isRecording ? (\n                    <button onClick={stopRecording}>Stop Recording</button>\n                ) : null}\n            </div>\n        </div>\n    );\n}\n\nexport default WebcamRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}