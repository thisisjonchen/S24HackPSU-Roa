{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n  let program;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs\n};","map":{"version":3,"names":["Abs","env","simpleAbsImplCPU","UnaryOpProgram","UnaryOpPackedProgram","ABS","abs","args","inputs","backend","x","shouldExecuteOnCPU","dtype","xData","texData","get","dataId","outValues","values","makeTensorInfo","shape","program","getBool","runWebGLProgram","absConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/Abs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,EAAaC,GAAG,QAAyD,uBAAuB;AAG3G,SAAQC,gBAAgB,QAAO,wBAAwB;AACvD,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,oBAAoB,QAAO,uBAAuB;AAE1D,MAAMC,GAAG,GAAG,gBAAgB;AAE5B,OAAM,SAAUC,GAAGA,CAACC,IAAoD;EAEtE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElB;EACA;EACA,IAAIC,OAAO,CAACE,kBAAkB,CAAC,CAACD,CAAC,CAAC,CAAC,IAAIA,CAAC,CAACE,KAAK,KAAK,WAAW,EAAE;IAC9D,MAAMC,KAAK,GAAGJ,OAAO,CAACK,OAAO,CAACC,GAAG,CAACL,CAAC,CAACM,MAAM,CAAC;IAC3C,MAAMC,SAAS,GAAGf,gBAAgB,CAACW,KAAK,CAACK,MAAoB,CAAC;IAC9D,OAAOT,OAAO,CAACU,cAAc,CAACT,CAAC,CAACU,KAAK,EAAEV,CAAC,CAACE,KAAK,EAAEK,SAAS,CAAC;;EAG5D,IAAII,OAA4C;EAChD,IAAIpB,GAAG,EAAE,CAACqB,OAAO,CAAC,6BAA6B,CAAC,EAAE;IAChDD,OAAO,GAAG,IAAIjB,oBAAoB,CAACM,CAAC,CAACU,KAAK,EAAEf,GAAG,CAAC;GACjD,MAAM;IACLgB,OAAO,GAAG,IAAIlB,cAAc,CAACO,CAAC,CAACU,KAAK,EAAEf,GAAG,CAAC;;EAE5C,OAAOI,OAAO,CAACc,eAAe,CAACF,OAAO,EAAE,CAACX,CAAC,CAAC,EAAEA,CAAC,CAACE,KAAK,CAAC;AACvD;AAEA,OAAO,MAAMY,SAAS,GAAiB;EACrCC,UAAU,EAAEzB,GAAG;EACf0B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAErB;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}