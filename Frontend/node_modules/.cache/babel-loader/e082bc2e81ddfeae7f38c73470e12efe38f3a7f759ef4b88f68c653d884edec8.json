{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cumprod } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the cumulative product of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumprod().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumprod().print();\n * ```\n *\n * @param x The input tensor to cumulatively multiply.\n * @param axis The axis along which to multiply. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative product. Optional.\n *     Defaults to false. If set to true then the product of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to multiply in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumprod_(x, axis = 0, exclusive = false, reverse = false) {\n  const $x = convertToTensor(x, 'x', 'cumprod');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    exclusive,\n    reverse\n  };\n  return ENGINE.runKernel(Cumprod, inputs, attrs);\n}\nexport const cumprod = /* @__PURE__ */op({\n  cumprod_\n});","map":{"version":3,"names":["ENGINE","Cumprod","convertToTensor","op","cumprod_","x","axis","exclusive","reverse","$x","inputs","attrs","runKernel","cumprod"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/cumprod.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { ENGINE } from '../engine';\nimport { Cumprod, CumprodAttrs, CumprodInputs } from '../kernel_names';\nimport { NamedAttrMap } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { NamedTensorMap } from '../tensor_types';\nimport { convertToTensor } from '../tensor_util_env';\nimport { TensorLike } from '../types';\n\nimport { op } from './operation';\n\n/**\n * Computes the cumulative product of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumprod().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumprod().print();\n * ```\n *\n * @param x The input tensor to cumulatively multiply.\n * @param axis The axis along which to multiply. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative product. Optional.\n *     Defaults to false. If set to true then the product of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to multiply in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumprod_<T extends Tensor>(\n  x: Tensor | TensorLike,\n  axis = 0,\n  exclusive = false,\n  reverse = false\n): T {\n  const $x = convertToTensor(x, 'x', 'cumprod');\n\n  const inputs: CumprodInputs = { x: $x };\n  const attrs: CumprodAttrs = { axis, exclusive, reverse };\n\n  return ENGINE.runKernel(\n    Cumprod,\n    inputs as unknown as NamedTensorMap,\n    attrs as unknown as NamedAttrMap\n  );\n}\n\nexport const cumprod = /* @__PURE__ */ op({ cumprod_ });\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAASA,MAAM,QAAQ,WAAW;AAClC,SAASC,OAAO,QAAqC,iBAAiB;AAItE,SAASC,eAAe,QAAQ,oBAAoB;AAGpD,SAASC,EAAE,QAAQ,aAAa;AAEhC;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,QAAQA,CACfC,CAAsB,EACtBC,IAAI,GAAG,CAAC,EACRC,SAAS,GAAG,KAAK,EACjBC,OAAO,GAAG,KAAK;EAEf,MAAMC,EAAE,GAAGP,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC;EAE7C,MAAMK,MAAM,GAAkB;IAAEL,CAAC,EAAEI;EAAE,CAAE;EACvC,MAAME,KAAK,GAAiB;IAAEL,IAAI;IAAEC,SAAS;IAAEC;EAAO,CAAE;EAExD,OAAOR,MAAM,CAACY,SAAS,CACrBX,OAAO,EACPS,MAAmC,EACnCC,KAAgC,CACjC;AACH;AAEA,OAAO,MAAME,OAAO,GAAG,eAAgBV,EAAE,CAAC;EAAEC;AAAQ,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}