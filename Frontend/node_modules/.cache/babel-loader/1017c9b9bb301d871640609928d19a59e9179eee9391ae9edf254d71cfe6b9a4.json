{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nclass Embedding extends Layer {\n  constructor(args) {\n    super(args);\n    this.embeddings = null;\n    this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape = [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n  build(inputShape) {\n    this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n    this.built = true;\n  }\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  warnOnIncompatibleInputShape(inputShape) {}\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if (s1 != null && s2 != null && s1 !== s2) {\n          throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output = K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n  getConfig() {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nexport { Embedding };\nserialization.registerClass(Embedding);","map":{"version":3,"names":["notEqual","reshape","serialization","tidy","zerosLike","K","getConstraint","serializeConstraint","Layer","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","generic_utils","getExactlyOneShape","getExactlyOneTensor","Embedding","constructor","args","embeddings","DEFAULT_EMBEDDINGS_INITIALIZER","batchInputShape","inputShape","batchSize","inputLength","concat","toList","inputDim","assertPositiveInteger","outputDim","embeddingsInitializer","embeddingsRegularizer","activityRegularizer","embeddingsConstraint","maskZero","supportsMasking","build","addWeight","dtype","built","warnOnIncompatibleInputShape","computeMask","inputs","mask","computeOutputShape","inLens","length","i","k","s1","s2","call","kwargs","invokeCallHook","input","cast","output","gather","read","size","shape","getConfig","config","baseConfig","Object","assign","className","registerClass"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-layers/src/layers/embeddings.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport {notEqual, reshape, serialization, Tensor, tidy, zerosLike} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface EmbeddingLayerArgs extends LayerArgs {\n  /**\n   * Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.\n   */\n  inputDim: number;\n  /**\n   * Integer >= 0. Dimension of the dense embedding.\n   */\n  outputDim: number;\n  /**\n   * Initializer for the `embeddings` matrix.\n   */\n  embeddingsInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Regularizer function applied to the `embeddings` matrix.\n   */\n  embeddingsRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Constraint function applied to the `embeddings` matrix.\n   */\n  embeddingsConstraint?: ConstraintIdentifier|Constraint;\n  /**\n   * Whether the input value 0 is a special \"padding\" value that should be\n   * masked out. This is useful when using recurrent layers which may take\n   * variable length input.\n   *\n   * If this is `True` then all subsequent layers in the model need to support\n   * masking or an exception will be raised. If maskZero is set to `True`, as a\n   * consequence, index 0 cannot be used in the vocabulary (inputDim should\n   * equal size of vocabulary + 1).\n   */\n  maskZero?: boolean;\n  /**\n   * Length of input sequences, when it is constant.\n   *\n   * This argument is required if you are going to connect `flatten` then\n   * `dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed).\n   */\n  inputLength?: number|number[];\n}\n\nexport class Embedding extends Layer {\n  /** @nocollapse */\n  static className = 'Embedding';\n  private inputDim: number;\n  private outputDim: number;\n  private embeddingsInitializer: Initializer;\n  private maskZero: boolean;\n  private inputLength: number|number[];\n\n  private embeddings: LayerVariable = null;\n\n  readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier =\n      'randomUniform';\n  private readonly embeddingsRegularizer?: Regularizer;\n  private readonly embeddingsConstraint?: Constraint;\n\n  constructor(args: EmbeddingLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape =\n            [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(\n        args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    this.embeddings = this.addWeight(\n        'embeddings', [this.inputDim, this.outputDim], this.dtype,\n        this.embeddingsInitializer, this.embeddingsRegularizer, true,\n        this.embeddingsConstraint);\n    this.built = true;\n  }\n\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  protected override warnOnIncompatibleInputShape(inputShape: Shape) {}\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens: number[] = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(\n          `\"inputLength\" is ${this.inputLength}, but received ` +\n          `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n          throw new ValueError(\n              `\"inputLength\" is ${this.inputLength}, but received ` +\n              `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output =\n          K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(\n          output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Embedding);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}