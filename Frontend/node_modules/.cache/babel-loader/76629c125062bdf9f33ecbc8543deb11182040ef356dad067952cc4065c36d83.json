{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { cumprod } from '../../ops/cumprod';\nimport { getGlobalTensorClass } from '../../tensor';\ngetGlobalTensorClass().prototype.cumprod = function (axis, exclusive, reverse) {\n  this.throwIfDisposed();\n  return cumprod(this, axis, exclusive, reverse);\n};","map":{"version":3,"names":["cumprod","getGlobalTensorClass","prototype","axis","exclusive","reverse","throwIfDisposed"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/public/chained_ops/cumprod.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { cumprod } from '../../ops/cumprod';\nimport { getGlobalTensorClass, Tensor } from '../../tensor';\nimport { Rank } from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    cumprod<R extends Rank>(\n      axis?: number,\n      exclusive?: boolean,\n      reverse?: boolean\n    ): Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.cumprod = function <R extends Rank>(\n  axis?: number,\n  exclusive?: boolean,\n  reverse?: boolean\n): Tensor<R> {\n  this.throwIfDisposed();\n  return cumprod(this, axis, exclusive, reverse);\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,oBAAoB,QAAgB,cAAc;AAa3DA,oBAAoB,EAAE,CAACC,SAAS,CAACF,OAAO,GAAG,UACzCG,IAAa,EACbC,SAAmB,EACnBC,OAAiB;EAEjB,IAAI,CAACC,eAAe,EAAE;EACtB,OAAON,OAAO,CAAC,IAAI,EAAEG,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}