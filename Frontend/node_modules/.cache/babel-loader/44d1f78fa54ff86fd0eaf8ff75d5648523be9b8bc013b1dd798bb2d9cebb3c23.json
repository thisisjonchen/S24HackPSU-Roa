{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out = reshape(buff.toTensor(), [numRows, numColumns]);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n    } else {\n      throw new Error(`eye() currently supports only 1D and 2D ` +\n      // tslint:disable-next-line:no-any\n      `batchShapes, but received ${batchShape.length}D.`);\n    }\n  }\n}\nexport const eye = /* @__PURE__ */op({\n  eye_\n});","map":{"version":3,"names":["buffer","expandDims","op","reshape","tile","eye_","numRows","numColumns","batchShape","dtype","buff","n","i","set","out","toTensor","length","Error","eye"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-core/src/ops/eye.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {DataType} from '../types';\n\nimport {buffer} from './buffer';\nimport {expandDims} from './expand_dims';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {tile} from './tile';\n\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(\n    numRows: number, numColumns?: number,\n    batchShape?:\n        [\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number],\n    dtype: DataType = 'float32'): Tensor2D {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out: Tensor2D = reshape(buff.toTensor(), [numRows, numColumns]);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(\n                 expandDims(expandDims(out, 0), 0),\n                 [batchShape[0], batchShape[1], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n               batchShape[0], batchShape[1], batchShape[2], 1, 1\n             ]) as Tensor2D;\n    } else {\n      throw new Error(\n          `eye() currently supports only 1D and 2D ` +\n          // tslint:disable-next-line:no-any\n          `batchShapes, but received ${(batchShape as any).length}D.`);\n    }\n  }\n}\n\nexport const eye = /* @__PURE__ */ op({eye_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,SAAQA,MAAM,QAAO,UAAU;AAC/B,SAAQC,UAAU,QAAO,eAAe;AACxC,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,IAAI,QAAO,QAAQ;AAE3B;;;;;;;;;;;;;;AAcA,SAASC,IAAIA,CACTC,OAAe,EAAEC,UAAmB,EACpCC,UAIwE,EACxEC,KAAA,GAAkB,SAAS;EAC7B,IAAIF,UAAU,IAAI,IAAI,EAAE;IACtBA,UAAU,GAAGD,OAAO;;EAEtB,MAAMI,IAAI,GAAGV,MAAM,CAAC,CAACM,OAAO,EAAEC,UAAU,CAAC,EAAEE,KAAK,CAAC;EACjD,MAAME,CAAC,GAAGL,OAAO,IAAIC,UAAU,GAAGD,OAAO,GAAGC,UAAU;EACtD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,EAAE,EAAEC,CAAC,EAAE;IAC1BF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAED,CAAC,EAAEA,CAAC,CAAC;;EAEnB,MAAME,GAAG,GAAaX,OAAO,CAACO,IAAI,CAACK,QAAQ,EAAE,EAAE,CAACT,OAAO,EAAEC,UAAU,CAAC,CAAC;EACrE,IAAIC,UAAU,IAAI,IAAI,EAAE;IACtB,OAAOM,GAAG;GACX,MAAM;IACL,IAAIN,UAAU,CAACQ,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAOZ,IAAI,CAACH,UAAU,CAACa,GAAG,EAAE,CAAC,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAa;KACnE,MAAM,IAAIA,UAAU,CAACQ,MAAM,KAAK,CAAC,EAAE;MAClC;MACA,OAAOZ,IAAI,CACAH,UAAU,CAACA,UAAU,CAACa,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EACjC,CAACN,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAa;KAC7D,MAAM,IAAIA,UAAU,CAACQ,MAAM,KAAK,CAAC,EAAE;MAClC;MACA,OAAOZ,IAAI,CAACH,UAAU,CAACA,UAAU,CAACA,UAAU,CAACa,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CACrDN,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAClD,CAAa;KACtB,MAAM;MACL,MAAM,IAAIS,KAAK,CACX,0CAA0C;MAC1C;MACA,6BAA8BT,UAAkB,CAACQ,MAAM,IAAI,CAAC;;;AAGtE;AAEA,OAAO,MAAME,GAAG,GAAG,eAAgBhB,EAAE,CAAC;EAACG;AAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}