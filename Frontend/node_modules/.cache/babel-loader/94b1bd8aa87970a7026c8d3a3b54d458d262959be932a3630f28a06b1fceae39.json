{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend\n    });\n  }\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({\n      inputs: tensors.slice(0, midIndex),\n      backend\n    });\n    const rightSide = addN({\n      inputs: tensors.slice(midIndex),\n      backend\n    });\n    return addN({\n      inputs: [leftSide, rightSide],\n      backend\n    });\n  }\n  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN\n};","map":{"version":3,"names":["AddN","env","upcastType","AddNProgram","AddNPackedProgram","identity","addN","args","inputs","backend","tensors","length","x","getNumber","midIndex","Math","floor","leftSide","slice","rightSide","dtype","map","t","reduce","d1","d2","shapes","shape","usePackedOp","getBool","program","runWebGLProgram","addNConfig","kernelName","backendName","kernelFunc"],"sources":["/Users/jonchen/Documents/HackPSU/tfjs-backend-webgl/src/kernels/AddN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,EAAcC,GAAG,EAAwCC,UAAU,QAAO,uBAAuB;AAE7G,SAAQC,WAAW,QAAO,aAAa;AACvC,SAAQC,iBAAiB,QAAO,oBAAoB;AAEpD,SAAQC,QAAQ,QAAO,YAAY;AAEnC,OAAM,SAAUC,IAAIA,CAACC,IAAqD;EAExE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAE9B,MAAMG,OAAO,GAAGF,MAAM;EACtB,IAAIE,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAON,QAAQ,CAAC;MAACG,MAAM,EAAE;QAACI,CAAC,EAAEF,OAAO,CAAC,CAAC;MAAC,CAAC;MAAED;IAAO,CAAC,CAAC;;EAGrD;EACA,IAAIC,OAAO,CAACC,MAAM,GAAGV,GAAG,EAAE,CAACY,SAAS,CAAC,8BAA8B,CAAC,EAAE;IACpE,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;IAC/C,MAAMM,QAAQ,GAAGX,IAAI,CAAC;MAACE,MAAM,EAAEE,OAAO,CAACQ,KAAK,CAAC,CAAC,EAAEJ,QAAQ,CAAC;MAAEL;IAAO,CAAC,CAAC;IACpE,MAAMU,SAAS,GAAGb,IAAI,CAAC;MAACE,MAAM,EAAEE,OAAO,CAACQ,KAAK,CAACJ,QAAQ,CAAC;MAAEL;IAAO,CAAC,CAAC;IAClE,OAAOH,IAAI,CAAC;MAACE,MAAM,EAAE,CAACS,QAAQ,EAAEE,SAAS,CAAC;MAAEV;IAAO,CAAC,CAAC;;EAGvD,MAAMW,KAAK,GACPV,OAAO,CAACW,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAKvB,UAAU,CAACsB,EAAE,EAAEC,EAAE,CAAC,CAAC;EACpE,MAAMC,MAAM,GAAGhB,OAAO,CAACW,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACK,KAAK,CAAC;EACxC;EACA,MAAMC,WAAW,GAAG3B,GAAG,EAAE,CAAC4B,OAAO,CAAC,YAAY,CAAC;EAC/C,MAAMC,OAAO,GAAGF,WAAW,GACvB,IAAIxB,iBAAiB,CAACM,OAAO,CAAC,CAAC,CAAC,CAACiB,KAAK,EAAED,MAAM,CAAC,GAC/C,IAAIvB,WAAW,CAACO,OAAO,CAAC,CAAC,CAAC,CAACiB,KAAK,EAAED,MAAM,CAAC;EAC7C,OAAOjB,OAAO,CAACsB,eAAe,CAACD,OAAO,EAAEpB,OAAO,EAAEU,KAAK,CAAC;AACzD;AAEA,OAAO,MAAMY,UAAU,GAAiB;EACtCC,UAAU,EAAEjC,IAAI;EAChBkC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE7B;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}